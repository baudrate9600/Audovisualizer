
bruh.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000338  00800100  00000eca  00000f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  00800438  00800438  00001296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151f  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b86  00000000  00000000  00002957  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b21  00000000  00000000  000034dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00004000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000626  00000000  00000000  0000454c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016aa  00000000  00000000  00004b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000621c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	26 e0       	ldi	r18, 0x06	; 6
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a1 03 	call	0x742	; 0x742 <main>
  9e:	0c 94 63 07 	jmp	0xec6	; 0xec6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <magnitude>:
float magnitude(scomplex x){
	return sqrt( x.real*x.real + x.imag*x.imag);
}
int imagnitude(scomplex x){
	return (int) sqrt(x.real*x.real + x.imag*x.imag);
}
  a6:	4f 92       	push	r4
  a8:	5f 92       	push	r5
  aa:	6f 92       	push	r6
  ac:	7f 92       	push	r7
  ae:	8f 92       	push	r8
  b0:	9f 92       	push	r9
  b2:	af 92       	push	r10
  b4:	bf 92       	push	r11
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	28 97       	sbiw	r28, 0x08	; 8
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	29 83       	std	Y+1, r18	; 0x01
  d4:	3a 83       	std	Y+2, r19	; 0x02
  d6:	4b 83       	std	Y+3, r20	; 0x03
  d8:	5c 83       	std	Y+4, r21	; 0x04
  da:	6d 83       	std	Y+5, r22	; 0x05
  dc:	7e 83       	std	Y+6, r23	; 0x06
  de:	8f 83       	std	Y+7, r24	; 0x07
  e0:	98 87       	std	Y+8, r25	; 0x08
  e2:	89 80       	ldd	r8, Y+1	; 0x01
  e4:	9a 80       	ldd	r9, Y+2	; 0x02
  e6:	ab 80       	ldd	r10, Y+3	; 0x03
  e8:	bc 80       	ldd	r11, Y+4	; 0x04
  ea:	cd 80       	ldd	r12, Y+5	; 0x05
  ec:	de 80       	ldd	r13, Y+6	; 0x06
  ee:	ef 80       	ldd	r14, Y+7	; 0x07
  f0:	f8 84       	ldd	r15, Y+8	; 0x08
  f2:	a5 01       	movw	r20, r10
  f4:	94 01       	movw	r18, r8
  f6:	c5 01       	movw	r24, r10
  f8:	b4 01       	movw	r22, r8
  fa:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
  fe:	4b 01       	movw	r8, r22
 100:	5c 01       	movw	r10, r24
 102:	a7 01       	movw	r20, r14
 104:	96 01       	movw	r18, r12
 106:	c7 01       	movw	r24, r14
 108:	b6 01       	movw	r22, r12
 10a:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 10e:	9b 01       	movw	r18, r22
 110:	ac 01       	movw	r20, r24
 112:	c5 01       	movw	r24, r10
 114:	b4 01       	movw	r22, r8
 116:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3>
 11a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <sqrt>
 11e:	28 96       	adiw	r28, 0x08	; 8
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	cf 90       	pop	r12
 136:	bf 90       	pop	r11
 138:	af 90       	pop	r10
 13a:	9f 90       	pop	r9
 13c:	8f 90       	pop	r8
 13e:	7f 90       	pop	r7
 140:	6f 90       	pop	r6
 142:	5f 90       	pop	r5
 144:	4f 90       	pop	r4
 146:	08 95       	ret

00000148 <fft>:


void fft(scomplex * samples){
 148:	2f 92       	push	r2
 14a:	3f 92       	push	r3
 14c:	4f 92       	push	r4
 14e:	5f 92       	push	r5
 150:	6f 92       	push	r6
 152:	7f 92       	push	r7
 154:	8f 92       	push	r8
 156:	9f 92       	push	r9
 158:	af 92       	push	r10
 15a:	bf 92       	push	r11
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	68 97       	sbiw	r28, 0x18	; 24
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	9e 8b       	std	Y+22, r25	; 0x16
 17e:	8d 8b       	std	Y+21, r24	; 0x15
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
			if(counter == line){
				counter = 0;
 180:	26 e0       	ldi	r18, 0x06	; 6
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	3c 8b       	std	Y+20, r19	; 0x14
 186:	2b 8b       	std	Y+19, r18	; 0x13
	//       n=0 
	int odd,even;
	scomplex cmplxPart;	
	int val;

	int stride = 0;
 188:	1a 8a       	std	Y+18, r1	; 0x12
 18a:	19 8a       	std	Y+17, r1	; 0x11


void fft(scomplex * samples){
	int counter = 0;
	//determines the offset between odd and even 
	int line = 1;
 18c:	66 24       	eor	r6, r6
 18e:	63 94       	inc	r6
 190:	71 2c       	mov	r7, r1
 192:	f0 c0       	rjmp	.+480    	; 0x374 <fft+0x22c>
	int stride = 0;
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
			if(counter == line){
 194:	64 14       	cp	r6, r4
 196:	75 04       	cpc	r7, r5
 198:	21 f4       	brne	.+8      	; 0x1a2 <fft+0x5a>
				counter = 0;
				offset += line;
 19a:	e6 0c       	add	r14, r6
 19c:	f7 1c       	adc	r15, r7
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
			if(counter == line){
				counter = 0;
 19e:	41 2c       	mov	r4, r1
 1a0:	51 2c       	mov	r5, r1
				offset += line;
			}	
			val = stride + counter;
 1a2:	89 89       	ldd	r24, Y+17	; 0x11
 1a4:	9a 89       	ldd	r25, Y+18	; 0x12
 1a6:	84 0d       	add	r24, r4
 1a8:	95 1d       	adc	r25, r5
			cmplxPart.real = lut_cos[val];
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	fc 01       	movw	r30, r24
 1b4:	e4 5c       	subi	r30, 0xC4	; 196
 1b6:	fc 4f       	sbci	r31, 0xFC	; 252
 1b8:	20 81       	ld	r18, Z
 1ba:	31 81       	ldd	r19, Z+1	; 0x01
 1bc:	42 81       	ldd	r20, Z+2	; 0x02
 1be:	53 81       	ldd	r21, Z+3	; 0x03
 1c0:	29 83       	std	Y+1, r18	; 0x01
 1c2:	3a 83       	std	Y+2, r19	; 0x02
 1c4:	4b 83       	std	Y+3, r20	; 0x03
 1c6:	5c 83       	std	Y+4, r21	; 0x04
			cmplxPart.imag = lut_sin[val];
 1c8:	fc 01       	movw	r30, r24
 1ca:	e0 5c       	subi	r30, 0xC0	; 192
 1cc:	fd 4f       	sbci	r31, 0xFD	; 253
 1ce:	80 80       	ld	r8, Z
 1d0:	91 80       	ldd	r9, Z+1	; 0x01
 1d2:	a2 80       	ldd	r10, Z+2	; 0x02
 1d4:	b3 80       	ldd	r11, Z+3	; 0x03

			even = j+offset;
 1d6:	a7 01       	movw	r20, r14
 1d8:	42 0d       	add	r20, r2
 1da:	53 1d       	adc	r21, r3
 1dc:	58 8f       	std	Y+24, r21	; 0x18
 1de:	4f 8b       	std	Y+23, r20	; 0x17
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
 1e0:	8a 01       	movw	r16, r20
 1e2:	06 0d       	add	r16, r6
 1e4:	17 1d       	adc	r17, r7
 1e6:	00 0f       	add	r16, r16
 1e8:	11 1f       	adc	r17, r17
 1ea:	00 0f       	add	r16, r16
 1ec:	11 1f       	adc	r17, r17
 1ee:	00 0f       	add	r16, r16
 1f0:	11 1f       	adc	r17, r17
 1f2:	0c 0d       	add	r16, r12
 1f4:	1d 1d       	adc	r17, r13
 1f6:	d8 01       	movw	r26, r16
 1f8:	8d 91       	ld	r24, X+
 1fa:	9d 91       	ld	r25, X+
 1fc:	0d 90       	ld	r0, X+
 1fe:	bc 91       	ld	r27, X
 200:	a0 2d       	mov	r26, r0
 202:	8d 87       	std	Y+13, r24	; 0x0d
 204:	9e 87       	std	Y+14, r25	; 0x0e
 206:	af 87       	std	Y+15, r26	; 0x0f
 208:	b8 8b       	std	Y+16, r27	; 0x10
 20a:	d8 01       	movw	r26, r16
 20c:	14 96       	adiw	r26, 0x04	; 4
 20e:	2d 91       	ld	r18, X+
 210:	3d 91       	ld	r19, X+
 212:	4d 91       	ld	r20, X+
 214:	5c 91       	ld	r21, X
 216:	17 97       	sbiw	r26, 0x07	; 7
 218:	29 87       	std	Y+9, r18	; 0x09
 21a:	3a 87       	std	Y+10, r19	; 0x0a
 21c:	4b 87       	std	Y+11, r20	; 0x0b
 21e:	5c 87       	std	Y+12, r21	; 0x0c
    return num;
}

scomplex multiply(scomplex x, scomplex y){
	scomplex mult;
	mult.real = x.real * y.real -(x.imag*y.imag);
 220:	2d 85       	ldd	r18, Y+13	; 0x0d
 222:	3e 85       	ldd	r19, Y+14	; 0x0e
 224:	4f 85       	ldd	r20, Y+15	; 0x0f
 226:	58 89       	ldd	r21, Y+16	; 0x10
 228:	69 81       	ldd	r22, Y+1	; 0x01
 22a:	7a 81       	ldd	r23, Y+2	; 0x02
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 234:	6d 83       	std	Y+5, r22	; 0x05
 236:	7e 83       	std	Y+6, r23	; 0x06
 238:	8f 83       	std	Y+7, r24	; 0x07
 23a:	98 87       	std	Y+8, r25	; 0x08
 23c:	29 85       	ldd	r18, Y+9	; 0x09
 23e:	3a 85       	ldd	r19, Y+10	; 0x0a
 240:	4b 85       	ldd	r20, Y+11	; 0x0b
 242:	5c 85       	ldd	r21, Y+12	; 0x0c
 244:	c5 01       	movw	r24, r10
 246:	b4 01       	movw	r22, r8
 248:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 24c:	9b 01       	movw	r18, r22
 24e:	ac 01       	movw	r20, r24
 250:	6d 81       	ldd	r22, Y+5	; 0x05
 252:	7e 81       	ldd	r23, Y+6	; 0x06
 254:	8f 81       	ldd	r24, Y+7	; 0x07
 256:	98 85       	ldd	r25, Y+8	; 0x08
 258:	0e 94 1b 05 	call	0xa36	; 0xa36 <__subsf3>
 25c:	6d 83       	std	Y+5, r22	; 0x05
 25e:	7e 83       	std	Y+6, r23	; 0x06
 260:	8f 83       	std	Y+7, r24	; 0x07
 262:	98 87       	std	Y+8, r25	; 0x08
	mult.imag = x.real * y.imag + x.imag *y.real;
 264:	2d 85       	ldd	r18, Y+13	; 0x0d
 266:	3e 85       	ldd	r19, Y+14	; 0x0e
 268:	4f 85       	ldd	r20, Y+15	; 0x0f
 26a:	58 89       	ldd	r21, Y+16	; 0x10
 26c:	c5 01       	movw	r24, r10
 26e:	b4 01       	movw	r22, r8
 270:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 274:	4b 01       	movw	r8, r22
 276:	5c 01       	movw	r10, r24
 278:	29 85       	ldd	r18, Y+9	; 0x09
 27a:	3a 85       	ldd	r19, Y+10	; 0x0a
 27c:	4b 85       	ldd	r20, Y+11	; 0x0b
 27e:	5c 85       	ldd	r21, Y+12	; 0x0c
 280:	69 81       	ldd	r22, Y+1	; 0x01
 282:	7a 81       	ldd	r23, Y+2	; 0x02
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	9c 81       	ldd	r25, Y+4	; 0x04
 288:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 28c:	9b 01       	movw	r18, r22
 28e:	ac 01       	movw	r20, r24
 290:	c5 01       	movw	r24, r10
 292:	b4 01       	movw	r22, r8
 294:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3>
 298:	69 83       	std	Y+1, r22	; 0x01
 29a:	7a 83       	std	Y+2, r23	; 0x02
 29c:	8b 83       	std	Y+3, r24	; 0x03
 29e:	9c 83       	std	Y+4, r25	; 0x04

			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
 2a0:	ef 89       	ldd	r30, Y+23	; 0x17
 2a2:	f8 8d       	ldd	r31, Y+24	; 0x18
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	ec 0d       	add	r30, r12
 2b2:	fd 1d       	adc	r31, r13
 2b4:	fa 87       	std	Y+10, r31	; 0x0a
 2b6:	e9 87       	std	Y+9, r30	; 0x09
	return ad;
}
scomplex subtract(scomplex x, scomplex y){
	scomplex sub; 
	sub.real = x.real - y.real; 
	sub.imag = x.imag - y.imag;
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	64 81       	ldd	r22, Z+4	; 0x04
 2be:	75 81       	ldd	r23, Z+5	; 0x05
 2c0:	86 81       	ldd	r24, Z+6	; 0x06
 2c2:	97 81       	ldd	r25, Z+7	; 0x07
 2c4:	0e 94 1b 05 	call	0xa36	; 0xa36 <__subsf3>
 2c8:	4b 01       	movw	r8, r22
 2ca:	5c 01       	movw	r10, r24

			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
 2cc:	2d 81       	ldd	r18, Y+5	; 0x05
 2ce:	3e 81       	ldd	r19, Y+6	; 0x06
 2d0:	4f 81       	ldd	r20, Y+7	; 0x07
 2d2:	58 85       	ldd	r21, Y+8	; 0x08
 2d4:	a9 85       	ldd	r26, Y+9	; 0x09
 2d6:	ba 85       	ldd	r27, Y+10	; 0x0a
 2d8:	6d 91       	ld	r22, X+
 2da:	7d 91       	ld	r23, X+
 2dc:	8d 91       	ld	r24, X+
 2de:	9c 91       	ld	r25, X
 2e0:	0e 94 1b 05 	call	0xa36	; 0xa36 <__subsf3>
 2e4:	f8 01       	movw	r30, r16
 2e6:	60 83       	st	Z, r22
 2e8:	71 83       	std	Z+1, r23	; 0x01
 2ea:	82 83       	std	Z+2, r24	; 0x02
 2ec:	93 83       	std	Z+3, r25	; 0x03
 2ee:	84 82       	std	Z+4, r8	; 0x04
 2f0:	95 82       	std	Z+5, r9	; 0x05
 2f2:	a6 82       	std	Z+6, r10	; 0x06
 2f4:	b7 82       	std	Z+7, r11	; 0x07
	return mult;
}
scomplex add(scomplex x, scomplex y){
	scomplex ad; 
	ad.real = x.real + y.real; 
	ad.imag = x.imag + y.imag;
 2f6:	e9 85       	ldd	r30, Y+9	; 0x09
 2f8:	fa 85       	ldd	r31, Y+10	; 0x0a
 2fa:	24 81       	ldd	r18, Z+4	; 0x04
 2fc:	35 81       	ldd	r19, Z+5	; 0x05
 2fe:	46 81       	ldd	r20, Z+6	; 0x06
 300:	57 81       	ldd	r21, Z+7	; 0x07
 302:	69 81       	ldd	r22, Y+1	; 0x01
 304:	7a 81       	ldd	r23, Y+2	; 0x02
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	9c 81       	ldd	r25, Y+4	; 0x04
 30a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3>
 30e:	4b 01       	movw	r8, r22
 310:	5c 01       	movw	r10, r24
			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
			samples[even] = add(samples[even], cmplxPart);
 312:	2d 81       	ldd	r18, Y+5	; 0x05
 314:	3e 81       	ldd	r19, Y+6	; 0x06
 316:	4f 81       	ldd	r20, Y+7	; 0x07
 318:	58 85       	ldd	r21, Y+8	; 0x08
 31a:	a9 85       	ldd	r26, Y+9	; 0x09
 31c:	ba 85       	ldd	r27, Y+10	; 0x0a
 31e:	6d 91       	ld	r22, X+
 320:	7d 91       	ld	r23, X+
 322:	8d 91       	ld	r24, X+
 324:	9c 91       	ld	r25, X
 326:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3>
 32a:	e9 85       	ldd	r30, Y+9	; 0x09
 32c:	fa 85       	ldd	r31, Y+10	; 0x0a
 32e:	60 83       	st	Z, r22
 330:	71 83       	std	Z+1, r23	; 0x01
 332:	82 83       	std	Z+2, r24	; 0x02
 334:	93 83       	std	Z+3, r25	; 0x03
 336:	84 82       	std	Z+4, r8	; 0x04
 338:	95 82       	std	Z+5, r9	; 0x05
 33a:	a6 82       	std	Z+6, r10	; 0x06
 33c:	b7 82       	std	Z+7, r11	; 0x07
			counter ++;
 33e:	bf ef       	ldi	r27, 0xFF	; 255
 340:	4b 1a       	sub	r4, r27
 342:	5b 0a       	sbc	r5, r27

	int stride = 0;
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
 344:	ef ef       	ldi	r30, 0xFF	; 255
 346:	2e 1a       	sub	r2, r30
 348:	3e 0a       	sbc	r3, r30
 34a:	f0 e2       	ldi	r31, 0x20	; 32
 34c:	2f 16       	cp	r2, r31
 34e:	31 04       	cpc	r3, r1
 350:	09 f0       	breq	.+2      	; 0x354 <fft+0x20c>
 352:	20 cf       	rjmp	.-448    	; 0x194 <fft+0x4c>
			samples[odd] = subtract(samples[even],cmplxPart);
			samples[even] = add(samples[even], cmplxPart);
			counter ++;

		}
		stride = stride + line; 
 354:	29 89       	ldd	r18, Y+17	; 0x11
 356:	3a 89       	ldd	r19, Y+18	; 0x12
 358:	26 0d       	add	r18, r6
 35a:	37 1d       	adc	r19, r7
 35c:	3a 8b       	std	Y+18, r19	; 0x12
 35e:	29 8b       	std	Y+17, r18	; 0x11
		line = line * 2;
 360:	66 0c       	add	r6, r6
 362:	77 1c       	adc	r7, r7
 364:	4b 89       	ldd	r20, Y+19	; 0x13
 366:	5c 89       	ldd	r21, Y+20	; 0x14
 368:	41 50       	subi	r20, 0x01	; 1
 36a:	51 09       	sbc	r21, r1
 36c:	5c 8b       	std	Y+20, r21	; 0x14
 36e:	4b 8b       	std	Y+19, r20	; 0x13
	int odd,even;
	scomplex cmplxPart;	
	int val;

	int stride = 0;
	for (int i = 0; i < OUTER_LOOP; i++){
 370:	45 2b       	or	r20, r21
 372:	49 f0       	breq	.+18     	; 0x386 <fft+0x23e>
int imagnitude(scomplex x){
	return (int) sqrt(x.real*x.real + x.imag*x.imag);
}


void fft(scomplex * samples){
 374:	21 2c       	mov	r2, r1
 376:	31 2c       	mov	r3, r1
 378:	e1 2c       	mov	r14, r1
 37a:	f1 2c       	mov	r15, r1
 37c:	41 2c       	mov	r4, r1
 37e:	51 2c       	mov	r5, r1
 380:	cd 88       	ldd	r12, Y+21	; 0x15
 382:	de 88       	ldd	r13, Y+22	; 0x16
 384:	07 cf       	rjmp	.-498    	; 0x194 <fft+0x4c>
		}
		stride = stride + line; 
		line = line * 2;
	}

}
 386:	68 96       	adiw	r28, 0x18	; 24
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	9f 90       	pop	r9
 3a8:	8f 90       	pop	r8
 3aa:	7f 90       	pop	r7
 3ac:	6f 90       	pop	r6
 3ae:	5f 90       	pop	r5
 3b0:	4f 90       	pop	r4
 3b2:	3f 90       	pop	r3
 3b4:	2f 90       	pop	r2
 3b6:	08 95       	ret

000003b8 <initSerial>:
		return (int)val; 
	}
}
void decay_columns(uint16_t decay_speed){
	if((general_timer % decay_speed) == 0){
		for(int i = 0; i < 18; i++){
 3b8:	88 e9       	ldi	r24, 0x98	; 152
 3ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 3be:	86 e0       	ldi	r24, 0x06	; 6
 3c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 3c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 3c8:	87 e6       	ldi	r24, 0x67	; 103
 3ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 3ce:	08 95       	ret

000003d0 <spi>:
 3d0:	8c b5       	in	r24, 0x2c	; 44
 3d2:	80 61       	ori	r24, 0x10	; 16
 3d4:	8c bd       	out	0x2c, r24	; 44
 3d6:	8d b5       	in	r24, 0x2d	; 45
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	8d bd       	out	0x2d, r24	; 45
 3dc:	8c b5       	in	r24, 0x2c	; 44
 3de:	80 64       	ori	r24, 0x40	; 64
 3e0:	8c bd       	out	0x2c, r24	; 44
 3e2:	08 95       	ret

000003e4 <send>:
 3e4:	5e 98       	cbi	0x0b, 6	; 11
 3e6:	8e bd       	out	0x2e, r24	; 46
 3e8:	0d b4       	in	r0, 0x2d	; 45
 3ea:	07 fe       	sbrs	r0, 7
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <send+0x4>
 3ee:	7e bd       	out	0x2e, r23	; 46
 3f0:	0d b4       	in	r0, 0x2d	; 45
 3f2:	07 fe       	sbrs	r0, 7
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <send+0xc>
 3f6:	6e bd       	out	0x2e, r22	; 46
 3f8:	0d b4       	in	r0, 0x2d	; 45
 3fa:	07 fe       	sbrs	r0, 7
 3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <send+0x14>
 3fe:	5e 9a       	sbi	0x0b, 6	; 11
 400:	08 95       	ret

00000402 <timer1>:
 402:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 406:	e1 e8       	ldi	r30, 0x81	; 129
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	10 82       	st	Z, r1
 40c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 410:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 41c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 420:	80 81       	ld	r24, Z
 422:	88 60       	ori	r24, 0x08	; 8
 424:	80 83       	st	Z, r24
 426:	80 81       	ld	r24, Z
 428:	83 60       	ori	r24, 0x03	; 3
 42a:	80 83       	st	Z, r24
 42c:	ef e6       	ldi	r30, 0x6F	; 111
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	82 60       	ori	r24, 0x02	; 2
 434:	80 83       	st	Z, r24
 436:	08 95       	ret

00000438 <timer2>:
 438:	a0 eb       	ldi	r26, 0xB0	; 176
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	1c 92       	st	X, r1
 43e:	e1 eb       	ldi	r30, 0xB1	; 177
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	10 82       	st	Z, r1
 444:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 448:	80 e3       	ldi	r24, 0x30	; 48
 44a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 44e:	8c 91       	ld	r24, X
 450:	82 60       	ori	r24, 0x02	; 2
 452:	8c 93       	st	X, r24
 454:	80 81       	ld	r24, Z
 456:	83 60       	ori	r24, 0x03	; 3
 458:	80 83       	st	Z, r24
 45a:	e0 e7       	ldi	r30, 0x70	; 112
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	82 60       	ori	r24, 0x02	; 2
 462:	80 83       	st	Z, r24
 464:	08 95       	ret

00000466 <timer2_stop>:
 466:	e0 e7       	ldi	r30, 0x70	; 112
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	8d 7f       	andi	r24, 0xFD	; 253
 46e:	80 83       	st	Z, r24
 470:	08 95       	ret

00000472 <timer2_start>:
 472:	e0 e7       	ldi	r30, 0x70	; 112
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	82 60       	ori	r24, 0x02	; 2
 47a:	80 83       	st	Z, r24
 47c:	08 95       	ret

0000047e <__vector_7>:
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
 4a4:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <sample_done>
 4a8:	81 11       	cpse	r24, r1
 4aa:	73 c0       	rjmp	.+230    	; 0x592 <__vector_7+0x114>
 4ac:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <sample_counter>
 4b0:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <sample_counter+0x1>
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	79 f4       	brne	.+30     	; 0x4d6 <__vector_7+0x58>
 4b8:	ea e7       	ldi	r30, 0x7A	; 122
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	80 64       	ori	r24, 0x40	; 64
 4c0:	80 83       	st	Z, r24
 4c2:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <sample_counter>
 4c6:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <sample_counter+0x1>
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <sample_counter+0x1>
 4d0:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <sample_counter>
 4d4:	5e c0       	rjmp	.+188    	; 0x592 <__vector_7+0x114>
 4d6:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <sample_counter>
 4da:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <sample_counter+0x1>
 4de:	cf 97       	sbiw	r24, 0x3f	; 63
 4e0:	59 f5       	brne	.+86     	; 0x538 <__vector_7+0xba>
 4e2:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <sample_counter>
 4e6:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <sample_counter+0x1>
 4ea:	e0 50       	subi	r30, 0x00	; 0
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	c0 81       	ld	r28, Z
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
 4f2:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	60 58       	subi	r22, 0x80	; 128
 4fa:	71 09       	sbc	r23, r1
 4fc:	07 2e       	mov	r0, r23
 4fe:	00 0c       	add	r0, r0
 500:	88 0b       	sbc	r24, r24
 502:	99 0b       	sbc	r25, r25
 504:	0e 94 be 05 	call	0xb7c	; 0xb7c <__floatsisf>
 508:	cc 0f       	add	r28, r28
 50a:	dd 1f       	adc	r29, r29
 50c:	cc 0f       	add	r28, r28
 50e:	dd 1f       	adc	r29, r29
 510:	cc 0f       	add	r28, r28
 512:	dd 1f       	adc	r29, r29
 514:	ca 5a       	subi	r28, 0xAA	; 170
 516:	db 4f       	sbci	r29, 0xFB	; 251
 518:	68 83       	st	Y, r22
 51a:	79 83       	std	Y+1, r23	; 0x01
 51c:	8a 83       	std	Y+2, r24	; 0x02
 51e:	9b 83       	std	Y+3, r25	; 0x03
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <sample_done>
 526:	0e 94 33 02 	call	0x466	; 0x466 <timer2_stop>
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	9f ef       	ldi	r25, 0xFF	; 255
 52e:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <sample_counter+0x1>
 532:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <sample_counter>
 536:	2d c0       	rjmp	.+90     	; 0x592 <__vector_7+0x114>
 538:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <sample_counter>
 53c:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <sample_counter+0x1>
 540:	e0 50       	subi	r30, 0x00	; 0
 542:	ff 4f       	sbci	r31, 0xFF	; 255
 544:	c0 81       	ld	r28, Z
 546:	d0 e0       	ldi	r29, 0x00	; 0
 548:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	60 58       	subi	r22, 0x80	; 128
 550:	71 09       	sbc	r23, r1
 552:	07 2e       	mov	r0, r23
 554:	00 0c       	add	r0, r0
 556:	88 0b       	sbc	r24, r24
 558:	99 0b       	sbc	r25, r25
 55a:	0e 94 be 05 	call	0xb7c	; 0xb7c <__floatsisf>
 55e:	cc 0f       	add	r28, r28
 560:	dd 1f       	adc	r29, r29
 562:	cc 0f       	add	r28, r28
 564:	dd 1f       	adc	r29, r29
 566:	cc 0f       	add	r28, r28
 568:	dd 1f       	adc	r29, r29
 56a:	ca 5a       	subi	r28, 0xAA	; 170
 56c:	db 4f       	sbci	r29, 0xFB	; 251
 56e:	68 83       	st	Y, r22
 570:	79 83       	std	Y+1, r23	; 0x01
 572:	8a 83       	std	Y+2, r24	; 0x02
 574:	9b 83       	std	Y+3, r25	; 0x03
 576:	ea e7       	ldi	r30, 0x7A	; 122
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	80 64       	ori	r24, 0x40	; 64
 57e:	80 83       	st	Z, r24
 580:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <sample_counter>
 584:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <sample_counter+0x1>
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <sample_counter+0x1>
 58e:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <sample_counter>
 592:	ff 91       	pop	r31
 594:	ef 91       	pop	r30
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <render>:
 5b8:	cf 93       	push	r28
 5ba:	20 91 40 04 	lds	r18, 0x0440	; 0x800440 <render_timer>
 5be:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <render_timer+0x1>
 5c2:	28 17       	cp	r18, r24
 5c4:	39 07       	cpc	r19, r25
 5c6:	08 f4       	brcc	.+2      	; 0x5ca <render+0x12>
 5c8:	4b c0       	rjmp	.+150    	; 0x660 <render+0xa8>
 5ca:	5a 98       	cbi	0x0b, 2	; 11
 5cc:	5b 98       	cbi	0x0b, 3	; 11
 5ce:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <render_timer+0x1>
 5d2:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <render_timer>
 5d6:	c0 91 38 04 	lds	r28, 0x0438	; 0x800438 <__data_end>
 5da:	c1 11       	cpse	r28, r1
 5dc:	10 c0       	rjmp	.+32     	; 0x5fe <render+0x46>
 5de:	5b 9a       	sbi	0x0b, 3	; 11
 5e0:	c0 91 38 04 	lds	r28, 0x0438	; 0x800438 <__data_end>
 5e4:	ec 2f       	mov	r30, r28
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	ec 5b       	subi	r30, 0xBC	; 188
 5ea:	fb 4f       	sbci	r31, 0xFB	; 251
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send>
 5f6:	cf 5f       	subi	r28, 0xFF	; 255
 5f8:	c0 93 38 04 	sts	0x0438, r28	; 0x800438 <__data_end>
 5fc:	31 c0       	rjmp	.+98     	; 0x660 <render+0xa8>
 5fe:	c2 31       	cpi	r28, 0x12	; 18
 600:	41 f4       	brne	.+16     	; 0x612 <render+0x5a>
 602:	6f ef       	ldi	r22, 0xFF	; 255
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send>
 60c:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <__data_end>
 610:	27 c0       	rjmp	.+78     	; 0x660 <render+0xa8>
 612:	c1 31       	cpi	r28, 0x11	; 17
 614:	81 f4       	brne	.+32     	; 0x636 <render+0x7e>
 616:	5a 9a       	sbi	0x0b, 2	; 11
 618:	c0 91 38 04 	lds	r28, 0x0438	; 0x800438 <__data_end>
 61c:	ec 2f       	mov	r30, r28
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	ec 5b       	subi	r30, 0xBC	; 188
 622:	fb 4f       	sbci	r31, 0xFB	; 251
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send>
 62e:	cf 5f       	subi	r28, 0xFF	; 255
 630:	c0 93 38 04 	sts	0x0438, r28	; 0x800438 <__data_end>
 634:	15 c0       	rjmp	.+42     	; 0x660 <render+0xa8>
 636:	8c 2f       	mov	r24, r28
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	9c 01       	movw	r18, r24
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	31 09       	sbc	r19, r1
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <render+0x92>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	2a 95       	dec	r18
 64c:	e2 f7       	brpl	.-8      	; 0x646 <render+0x8e>
 64e:	fc 01       	movw	r30, r24
 650:	ec 5b       	subi	r30, 0xBC	; 188
 652:	fb 4f       	sbci	r31, 0xFB	; 251
 654:	80 81       	ld	r24, Z
 656:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send>
 65a:	cf 5f       	subi	r28, 0xFF	; 255
 65c:	c0 93 38 04 	sts	0x0438, r28	; 0x800438 <__data_end>
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <__vector_11>:
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
 686:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <render_timer>
 68a:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <render_timer+0x1>
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <render_timer+0x1>
 694:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <render_timer>
 698:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <general_timer>
 69c:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <general_timer+0x1>
 6a0:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <general_timer+0x2>
 6a4:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <general_timer+0x3>
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	a1 1d       	adc	r26, r1
 6ac:	b1 1d       	adc	r27, r1
 6ae:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <general_timer>
 6b2:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <general_timer+0x1>
 6b6:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <general_timer+0x2>
 6ba:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <general_timer+0x3>
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <render>
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <init_adc>:
 6e8:	aa e7       	ldi	r26, 0x7A	; 122
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	8c 91       	ld	r24, X
 6ee:	85 68       	ori	r24, 0x85	; 133
 6f0:	8c 93       	st	X, r24
 6f2:	ec e7       	ldi	r30, 0x7C	; 124
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	90 81       	ld	r25, Z
 6fa:	80 7f       	andi	r24, 0xF0	; 240
 6fc:	89 2b       	or	r24, r25
 6fe:	80 83       	st	Z, r24
 700:	80 81       	ld	r24, Z
 702:	80 62       	ori	r24, 0x20	; 32
 704:	80 83       	st	Z, r24
 706:	8c 91       	ld	r24, X
 708:	80 64       	ori	r24, 0x40	; 64
 70a:	8c 93       	st	X, r24
 70c:	ea e7       	ldi	r30, 0x7A	; 122
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	86 fd       	sbrc	r24, 6
 714:	fd cf       	rjmp	.-6      	; 0x710 <init_adc+0x28>
 716:	08 95       	ret

00000718 <columns>:
 718:	dc 01       	movw	r26, r24
 71a:	52 96       	adiw	r26, 0x12	; 18
 71c:	e4 e4       	ldi	r30, 0x44	; 68
 71e:	f4 e0       	ldi	r31, 0x04	; 4
 720:	46 e5       	ldi	r20, 0x56	; 86
 722:	54 e0       	ldi	r21, 0x04	; 4
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	9c 01       	movw	r18, r24
 72a:	0e 90       	ld	r0, -X
 72c:	02 c0       	rjmp	.+4      	; 0x732 <columns+0x1a>
 72e:	22 0f       	add	r18, r18
 730:	33 1f       	adc	r19, r19
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <columns+0x16>
 736:	21 50       	subi	r18, 0x01	; 1
 738:	21 93       	st	Z+, r18
 73a:	e4 17       	cp	r30, r20
 73c:	f5 07       	cpc	r31, r21
 73e:	a1 f7       	brne	.-24     	; 0x728 <columns+0x10>
 740:	08 95       	ret

00000742 <main>:
			frame[i] = frame[i] >> 1; 
		}
	}
}

int main(){
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	c4 55       	subi	r28, 0x54	; 84
 74c:	d1 09       	sbc	r29, r1
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
	/*Variable initialization */
	sample_counter = -1; 	
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	9f ef       	ldi	r25, 0xFF	; 255
 75c:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <sample_counter+0x1>
 760:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <sample_counter>
	
	/* Pin initialization */ 
    DDRB |= (1 << PB3) | (1 << PB5);
 764:	84 b1       	in	r24, 0x04	; 4
 766:	88 62       	ori	r24, 0x28	; 40
 768:	84 b9       	out	0x04, r24	; 4
    DDRB |= ( 1 << PB2 );
 76a:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1 << PB2);
 76c:	2a 98       	cbi	0x05, 2	; 5
    DDRD |=  (1 << DRCLK ) ;
 76e:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= NPN_0 | NPN_1;
 770:	8a b1       	in	r24, 0x0a	; 10
 772:	8c 60       	ori	r24, 0x0C	; 12
 774:	8a b9       	out	0x0a, r24	; 10
    spi();
 776:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi>
//	demo();
	uint8_t column_vec[32] ;
	uint8_t old_column[32] ;
	uint8_t display_column[18];
	//columns(column_vec);
	init_adc();
 77a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <init_adc>
	initSerial();
 77e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <initSerial>
	sei();
 782:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 784:	8f e9       	ldi	r24, 0x9F	; 159
 786:	9f e0       	ldi	r25, 0x0F	; 15
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <main+0x46>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <main+0x4c>
 78e:	00 00       	nop
	char buffer[20];
	_delay_ms(1);
	timer1();
 790:	0e 94 01 02 	call	0x402	; 0x402 <timer1>
	timer2();
 794:	0e 94 1c 02 	call	0x438	; 0x438 <timer2>
						smoothing =c_smooth*old_column[i] + (1-c_smooth)* val;
						old_column[i]  = column_vec[i];
						column_vec[i] = smoothing;
					}
			}
			display_column[0] = (column_vec[1]+column_vec[2] + column_vec[3] + column_vec[4] + column_vec[5])/10;
 798:	de 01       	movw	r26, r28
 79a:	af 5b       	subi	r26, 0xBF	; 191
 79c:	bf 4f       	sbci	r27, 0xFF	; 255
 79e:	65 96       	adiw	r28, 0x15	; 21
 7a0:	bf af       	std	Y+63, r27	; 0x3f
 7a2:	ae af       	std	Y+62, r26	; 0x3e
 7a4:	65 97       	sbiw	r28, 0x15	; 21
 7a6:	1e 01       	movw	r2, r28
 7a8:	b1 e2       	ldi	r27, 0x21	; 33
 7aa:	2b 0e       	add	r2, r27
 7ac:	31 1c       	adc	r3, r1
	float smoothing; 
	float delta; 
	float c_smooth = 0.8; 
	float max = 3;
    while(1){
			if(sample_done == 1){
 7ae:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <sample_done>
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <main+0x6c>
 7b6:	0f 2e       	mov	r0, r31
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ef 2e       	mov	r14, r31
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	ff 2e       	mov	r15, r31
 7c0:	f0 2d       	mov	r31, r0
 7c2:	c1 2c       	mov	r12, r1
 7c4:	d1 2c       	mov	r13, r1
			for(int i = 0; i < N_SAMPLES; i++){
				int k = reversed[i];
 7c6:	d7 01       	movw	r26, r14
 7c8:	ed 91       	ld	r30, X+
 7ca:	7d 01       	movw	r14, r26
				sample_vec[i].real = hanning_lut[k] * sample_vec[i].real;
 7cc:	86 01       	movw	r16, r12
 7ce:	00 0f       	add	r16, r16
 7d0:	11 1f       	adc	r17, r17
 7d2:	00 0f       	add	r16, r16
 7d4:	11 1f       	adc	r17, r17
 7d6:	00 0f       	add	r16, r16
 7d8:	11 1f       	adc	r17, r17
 7da:	0a 5a       	subi	r16, 0xAA	; 170
 7dc:	1b 4f       	sbci	r17, 0xFB	; 251
 7de:	d8 01       	movw	r26, r16
 7e0:	6d 91       	ld	r22, X+
 7e2:	7d 91       	ld	r23, X+
 7e4:	8d 91       	ld	r24, X+
 7e6:	9c 91       	ld	r25, X
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	ee 0f       	add	r30, r30
 7ec:	ff 1f       	adc	r31, r31
 7ee:	ee 0f       	add	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	e0 5c       	subi	r30, 0xC0	; 192
 7f4:	fe 4f       	sbci	r31, 0xFE	; 254
 7f6:	20 81       	ld	r18, Z
 7f8:	31 81       	ldd	r19, Z+1	; 0x01
 7fa:	42 81       	ldd	r20, Z+2	; 0x02
 7fc:	53 81       	ldd	r21, Z+3	; 0x03
 7fe:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 802:	f8 01       	movw	r30, r16
 804:	60 83       	st	Z, r22
 806:	71 83       	std	Z+1, r23	; 0x01
 808:	82 83       	std	Z+2, r24	; 0x02
 80a:	93 83       	std	Z+3, r25	; 0x03
				sample_vec[i].imag = 0; 
 80c:	14 82       	std	Z+4, r1	; 0x04
 80e:	15 82       	std	Z+5, r1	; 0x05
 810:	16 82       	std	Z+6, r1	; 0x06
 812:	17 82       	std	Z+7, r1	; 0x07
	float delta; 
	float c_smooth = 0.8; 
	float max = 3;
    while(1){
			if(sample_done == 1){
			for(int i = 0; i < N_SAMPLES; i++){
 814:	bf ef       	ldi	r27, 0xFF	; 255
 816:	cb 1a       	sub	r12, r27
 818:	db 0a       	sbc	r13, r27
 81a:	e0 e4       	ldi	r30, 0x40	; 64
 81c:	ce 16       	cp	r12, r30
 81e:	d1 04       	cpc	r13, r1
 820:	91 f6       	brne	.-92     	; 0x7c6 <main+0x84>
				int k = reversed[i];
				sample_vec[i].real = hanning_lut[k] * sample_vec[i].real;
				sample_vec[i].imag = 0; 
			}
		
		    fft(sample_vec);
 822:	86 e5       	ldi	r24, 0x56	; 86
 824:	94 e0       	ldi	r25, 0x04	; 4
 826:	0e 94 a4 00 	call	0x148	; 0x148 <fft>
 82a:	3e 01       	movw	r6, r28
 82c:	f2 e2       	ldi	r31, 0x22	; 34
 82e:	6f 0e       	add	r6, r31
 830:	71 1c       	adc	r7, r1
 832:	2e 01       	movw	r4, r28
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	48 0e       	add	r4, r24
 838:	51 1c       	adc	r5, r1

				
			for(uint16_t i = 1; i < 32; i++){
 83a:	cc 24       	eor	r12, r12
 83c:	c3 94       	inc	r12
 83e:	d1 2c       	mov	r13, r1
					float val = magnitude(sample_vec[i])/2;
 840:	f6 01       	movw	r30, r12
 842:	ee 0f       	add	r30, r30
 844:	ff 1f       	adc	r31, r31
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	ee 0f       	add	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	ea 5a       	subi	r30, 0xAA	; 170
 850:	fb 4f       	sbci	r31, 0xFB	; 251
 852:	20 81       	ld	r18, Z
 854:	31 81       	ldd	r19, Z+1	; 0x01
 856:	42 81       	ldd	r20, Z+2	; 0x02
 858:	53 81       	ldd	r21, Z+3	; 0x03
 85a:	64 81       	ldd	r22, Z+4	; 0x04
 85c:	75 81       	ldd	r23, Z+5	; 0x05
 85e:	86 81       	ldd	r24, Z+6	; 0x06
 860:	97 81       	ldd	r25, Z+7	; 0x07
 862:	0e 94 53 00 	call	0xa6	; 0xa6 <magnitude>
 866:	20 e0       	ldi	r18, 0x00	; 0
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	40 e0       	ldi	r20, 0x00	; 0
 86c:	5f e3       	ldi	r21, 0x3F	; 63
 86e:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 872:	16 2f       	mov	r17, r22
 874:	07 2f       	mov	r16, r23
 876:	f8 2e       	mov	r15, r24
 878:	e9 2e       	mov	r14, r25
					if(val < max ){
 87a:	20 e0       	ldi	r18, 0x00	; 0
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	40 e4       	ldi	r20, 0x40	; 64
 880:	50 e4       	ldi	r21, 0x40	; 64
 882:	0e 94 88 05 	call	0xb10	; 0xb10 <__cmpsf2>
 886:	88 23       	and	r24, r24
 888:	4c f4       	brge	.+18     	; 0x89c <main+0x15a>
						val = 1; 
 88a:	10 e0       	ldi	r17, 0x00	; 0
 88c:	00 e0       	ldi	r16, 0x00	; 0
 88e:	68 94       	set
 890:	ff 24       	eor	r15, r15
 892:	f7 f8       	bld	r15, 7
 894:	0f 2e       	mov	r0, r31
 896:	ff e3       	ldi	r31, 0x3F	; 63
 898:	ef 2e       	mov	r14, r31
 89a:	f0 2d       	mov	r31, r0
					}
					if (val > old_column[i]){
 89c:	d3 01       	movw	r26, r6
 89e:	6c 91       	ld	r22, X
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 be 05 	call	0xb7c	; 0xb7c <__floatsisf>
 8aa:	4b 01       	movw	r8, r22
 8ac:	5c 01       	movw	r10, r24
 8ae:	9b 01       	movw	r18, r22
 8b0:	ac 01       	movw	r20, r24
 8b2:	61 2f       	mov	r22, r17
 8b4:	70 2f       	mov	r23, r16
 8b6:	8f 2d       	mov	r24, r15
 8b8:	9e 2d       	mov	r25, r14
 8ba:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__gesf2>
 8be:	18 16       	cp	r1, r24
 8c0:	5c f4       	brge	.+22     	; 0x8d8 <main+0x196>
						old_column[i] = val; 
 8c2:	61 2f       	mov	r22, r17
 8c4:	70 2f       	mov	r23, r16
 8c6:	8f 2d       	mov	r24, r15
 8c8:	9e 2d       	mov	r25, r14
 8ca:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fixunssfsi>
 8ce:	f3 01       	movw	r30, r6
 8d0:	60 83       	st	Z, r22
						column_vec[i] = val; 
 8d2:	d2 01       	movw	r26, r4
 8d4:	6c 93       	st	X, r22
 8d6:	22 c0       	rjmp	.+68     	; 0x91c <__stack+0x1d>
					}else{
						smoothing =c_smooth*old_column[i] + (1-c_smooth)* val;
						old_column[i]  = column_vec[i];
 8d8:	f2 01       	movw	r30, r4
 8da:	80 81       	ld	r24, Z
 8dc:	d3 01       	movw	r26, r6
 8de:	8c 93       	st	X, r24
						column_vec[i] = smoothing;
 8e0:	2d ec       	ldi	r18, 0xCD	; 205
 8e2:	3c ec       	ldi	r19, 0xCC	; 204
 8e4:	4c e4       	ldi	r20, 0x4C	; 76
 8e6:	5f e3       	ldi	r21, 0x3F	; 63
 8e8:	c5 01       	movw	r24, r10
 8ea:	b4 01       	movw	r22, r8
 8ec:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 8f0:	4b 01       	movw	r8, r22
 8f2:	5c 01       	movw	r10, r24
 8f4:	2c ec       	ldi	r18, 0xCC	; 204
 8f6:	3c ec       	ldi	r19, 0xCC	; 204
 8f8:	4c e4       	ldi	r20, 0x4C	; 76
 8fa:	5e e3       	ldi	r21, 0x3E	; 62
 8fc:	61 2f       	mov	r22, r17
 8fe:	70 2f       	mov	r23, r16
 900:	8f 2d       	mov	r24, r15
 902:	9e 2d       	mov	r25, r14
 904:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 908:	9b 01       	movw	r18, r22
 90a:	ac 01       	movw	r20, r24
 90c:	c5 01       	movw	r24, r10
 90e:	b4 01       	movw	r22, r8
 910:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3>
 914:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fixunssfsi>
 918:	f2 01       	movw	r30, r4
 91a:	60 83       	st	Z, r22
			}
		
		    fft(sample_vec);

				
			for(uint16_t i = 1; i < 32; i++){
 91c:	ff ef       	ldi	r31, 0xFF	; 255
 91e:	cf 1a       	sub	r12, r31
 920:	df 0a       	sbc	r13, r31
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	68 1a       	sub	r6, r24
 926:	78 0a       	sbc	r7, r24
 928:	9f ef       	ldi	r25, 0xFF	; 255
 92a:	49 1a       	sub	r4, r25
 92c:	59 0a       	sbc	r5, r25
 92e:	a0 e2       	ldi	r26, 0x20	; 32
 930:	ca 16       	cp	r12, r26
 932:	d1 04       	cpc	r13, r1
 934:	09 f0       	breq	.+2      	; 0x938 <__stack+0x39>
 936:	84 cf       	rjmp	.-248    	; 0x840 <main+0xfe>
						smoothing =c_smooth*old_column[i] + (1-c_smooth)* val;
						old_column[i]  = column_vec[i];
						column_vec[i] = smoothing;
					}
			}
			display_column[0] = (column_vec[1]+column_vec[2] + column_vec[3] + column_vec[4] + column_vec[5])/10;
 938:	2a 81       	ldd	r18, Y+2	; 0x02
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	82 0f       	add	r24, r18
 940:	91 1d       	adc	r25, r1
 942:	2c 81       	ldd	r18, Y+4	; 0x04
 944:	82 0f       	add	r24, r18
 946:	91 1d       	adc	r25, r1
 948:	2d 81       	ldd	r18, Y+5	; 0x05
 94a:	82 0f       	add	r24, r18
 94c:	91 1d       	adc	r25, r1
 94e:	2e 81       	ldd	r18, Y+6	; 0x06
 950:	82 0f       	add	r24, r18
 952:	91 1d       	adc	r25, r1
 954:	6a e0       	ldi	r22, 0x0A	; 10
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	0e 94 3b 07 	call	0xe76	; 0xe76 <__divmodhi4>
 95c:	22 96       	adiw	r28, 0x02	; 2
 95e:	6f af       	std	Y+63, r22	; 0x3f
 960:	22 97       	sbiw	r28, 0x02	; 2
			display_column[1] = (column_vec[6]+column_vec[7]+column_vec[8])/3;
 962:	2f 81       	ldd	r18, Y+7	; 0x07
 964:	88 85       	ldd	r24, Y+8	; 0x08
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	82 0f       	add	r24, r18
 96a:	91 1d       	adc	r25, r1
 96c:	29 85       	ldd	r18, Y+9	; 0x09
 96e:	82 0f       	add	r24, r18
 970:	91 1d       	adc	r25, r1
 972:	63 e0       	ldi	r22, 0x03	; 3
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	0e 94 3b 07 	call	0xe76	; 0xe76 <__divmodhi4>
 97a:	23 96       	adiw	r28, 0x03	; 3
 97c:	6f af       	std	Y+63, r22	; 0x3f
 97e:	23 97       	sbiw	r28, 0x03	; 3
			display_column[2] = (column_vec[9]+column_vec[10]+column_vec[11])/3;
 980:	2a 85       	ldd	r18, Y+10	; 0x0a
 982:	8b 85       	ldd	r24, Y+11	; 0x0b
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	82 0f       	add	r24, r18
 988:	91 1d       	adc	r25, r1
 98a:	2c 85       	ldd	r18, Y+12	; 0x0c
 98c:	82 0f       	add	r24, r18
 98e:	91 1d       	adc	r25, r1
 990:	63 e0       	ldi	r22, 0x03	; 3
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__divmodhi4>
 998:	24 96       	adiw	r28, 0x04	; 4
 99a:	6f af       	std	Y+63, r22	; 0x3f
 99c:	24 97       	sbiw	r28, 0x04	; 4
			display_column[3] = (column_vec[12] + column_vec[13])/2; 
 99e:	2d 85       	ldd	r18, Y+13	; 0x0d
 9a0:	8e 85       	ldd	r24, Y+14	; 0x0e
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	82 0f       	add	r24, r18
 9a6:	91 1d       	adc	r25, r1
 9a8:	95 95       	asr	r25
 9aa:	87 95       	ror	r24
 9ac:	25 96       	adiw	r28, 0x05	; 5
 9ae:	8f af       	std	Y+63, r24	; 0x3f
 9b0:	25 97       	sbiw	r28, 0x05	; 5
			display_column[4] = (column_vec[14] + column_vec[15])/2; 
 9b2:	2f 85       	ldd	r18, Y+15	; 0x0f
 9b4:	88 89       	ldd	r24, Y+16	; 0x10
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	82 0f       	add	r24, r18
 9ba:	91 1d       	adc	r25, r1
 9bc:	95 95       	asr	r25
 9be:	87 95       	ror	r24
 9c0:	26 96       	adiw	r28, 0x06	; 6
 9c2:	8f af       	std	Y+63, r24	; 0x3f
 9c4:	26 97       	sbiw	r28, 0x06	; 6
			display_column[5] = (column_vec[16] + column_vec[17])/2; 
 9c6:	29 89       	ldd	r18, Y+17	; 0x11
 9c8:	8a 89       	ldd	r24, Y+18	; 0x12
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	82 0f       	add	r24, r18
 9ce:	91 1d       	adc	r25, r1
 9d0:	95 95       	asr	r25
 9d2:	87 95       	ror	r24
 9d4:	27 96       	adiw	r28, 0x07	; 7
 9d6:	8f af       	std	Y+63, r24	; 0x3f
 9d8:	27 97       	sbiw	r28, 0x07	; 7
			display_column[6] = (column_vec[18] + column_vec[19])/2; 
 9da:	2b 89       	ldd	r18, Y+19	; 0x13
 9dc:	8c 89       	ldd	r24, Y+20	; 0x14
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	82 0f       	add	r24, r18
 9e2:	91 1d       	adc	r25, r1
 9e4:	95 95       	asr	r25
 9e6:	87 95       	ror	r24
 9e8:	28 96       	adiw	r28, 0x08	; 8
 9ea:	8f af       	std	Y+63, r24	; 0x3f
 9ec:	28 97       	sbiw	r28, 0x08	; 8
			display_column[7] = (column_vec[20] + column_vec[21])/2; 
 9ee:	2d 89       	ldd	r18, Y+21	; 0x15
 9f0:	8e 89       	ldd	r24, Y+22	; 0x16
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	82 0f       	add	r24, r18
 9f6:	91 1d       	adc	r25, r1
 9f8:	95 95       	asr	r25
 9fa:	87 95       	ror	r24
 9fc:	29 96       	adiw	r28, 0x09	; 9
 9fe:	8f af       	std	Y+63, r24	; 0x3f
 a00:	29 97       	sbiw	r28, 0x09	; 9
 a02:	fe 01       	movw	r30, r28
 a04:	77 96       	adiw	r30, 0x17	; 23
 a06:	a1 e4       	ldi	r26, 0x41	; 65
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	ac 0f       	add	r26, r28
 a0c:	bd 1f       	adc	r27, r29
 a0e:	18 96       	adiw	r26, 0x08	; 8
			for(int i = 8; i < 18; i++){
				display_column[i] = column_vec[14+i]; 
 a10:	81 91       	ld	r24, Z+
 a12:	8d 93       	st	X+, r24
			display_column[3] = (column_vec[12] + column_vec[13])/2; 
			display_column[4] = (column_vec[14] + column_vec[15])/2; 
			display_column[5] = (column_vec[16] + column_vec[17])/2; 
			display_column[6] = (column_vec[18] + column_vec[19])/2; 
			display_column[7] = (column_vec[20] + column_vec[21])/2; 
			for(int i = 8; i < 18; i++){
 a14:	2e 16       	cp	r2, r30
 a16:	3f 06       	cpc	r3, r31
 a18:	d9 f7       	brne	.-10     	; 0xa10 <__stack+0x111>
				display_column[i] = column_vec[14+i]; 
			}
			display_column[17] = 0xff;
 a1a:	bf ef       	ldi	r27, 0xFF	; 255
 a1c:	63 96       	adiw	r28, 0x13	; 19
 a1e:	bf af       	std	Y+63, r27	; 0x3f
 a20:	63 97       	sbiw	r28, 0x13	; 19
			columns(display_column);
 a22:	ce 01       	movw	r24, r28
 a24:	8f 5b       	subi	r24, 0xBF	; 191
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	0e 94 8c 03 	call	0x718	; 0x718 <columns>
			sample_done = 0; 
 a2c:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <sample_done>
			timer2_start();	
 a30:	0e 94 39 02 	call	0x472	; 0x472 <timer2_start>
 a34:	bc ce       	rjmp	.-648    	; 0x7ae <main+0x6c>

00000a36 <__subsf3>:
 a36:	50 58       	subi	r21, 0x80	; 128

00000a38 <__addsf3>:
 a38:	bb 27       	eor	r27, r27
 a3a:	aa 27       	eor	r26, r26
 a3c:	0e 94 33 05 	call	0xa66	; 0xa66 <__addsf3x>
 a40:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_round>
 a44:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_pscA>
 a48:	38 f0       	brcs	.+14     	; 0xa58 <__addsf3+0x20>
 a4a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__fp_pscB>
 a4e:	20 f0       	brcs	.+8      	; 0xa58 <__addsf3+0x20>
 a50:	39 f4       	brne	.+14     	; 0xa60 <__addsf3+0x28>
 a52:	9f 3f       	cpi	r25, 0xFF	; 255
 a54:	19 f4       	brne	.+6      	; 0xa5c <__addsf3+0x24>
 a56:	26 f4       	brtc	.+8      	; 0xa60 <__addsf3+0x28>
 a58:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_nan>
 a5c:	0e f4       	brtc	.+2      	; 0xa60 <__addsf3+0x28>
 a5e:	e0 95       	com	r30
 a60:	e7 fb       	bst	r30, 7
 a62:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__fp_inf>

00000a66 <__addsf3x>:
 a66:	e9 2f       	mov	r30, r25
 a68:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_split3>
 a6c:	58 f3       	brcs	.-42     	; 0xa44 <__addsf3+0xc>
 a6e:	ba 17       	cp	r27, r26
 a70:	62 07       	cpc	r22, r18
 a72:	73 07       	cpc	r23, r19
 a74:	84 07       	cpc	r24, r20
 a76:	95 07       	cpc	r25, r21
 a78:	20 f0       	brcs	.+8      	; 0xa82 <__addsf3x+0x1c>
 a7a:	79 f4       	brne	.+30     	; 0xa9a <__addsf3x+0x34>
 a7c:	a6 f5       	brtc	.+104    	; 0xae6 <__addsf3x+0x80>
 a7e:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_zero>
 a82:	0e f4       	brtc	.+2      	; 0xa86 <__addsf3x+0x20>
 a84:	e0 95       	com	r30
 a86:	0b 2e       	mov	r0, r27
 a88:	ba 2f       	mov	r27, r26
 a8a:	a0 2d       	mov	r26, r0
 a8c:	0b 01       	movw	r0, r22
 a8e:	b9 01       	movw	r22, r18
 a90:	90 01       	movw	r18, r0
 a92:	0c 01       	movw	r0, r24
 a94:	ca 01       	movw	r24, r20
 a96:	a0 01       	movw	r20, r0
 a98:	11 24       	eor	r1, r1
 a9a:	ff 27       	eor	r31, r31
 a9c:	59 1b       	sub	r21, r25
 a9e:	99 f0       	breq	.+38     	; 0xac6 <__addsf3x+0x60>
 aa0:	59 3f       	cpi	r21, 0xF9	; 249
 aa2:	50 f4       	brcc	.+20     	; 0xab8 <__addsf3x+0x52>
 aa4:	50 3e       	cpi	r21, 0xE0	; 224
 aa6:	68 f1       	brcs	.+90     	; 0xb02 <__addsf3x+0x9c>
 aa8:	1a 16       	cp	r1, r26
 aaa:	f0 40       	sbci	r31, 0x00	; 0
 aac:	a2 2f       	mov	r26, r18
 aae:	23 2f       	mov	r18, r19
 ab0:	34 2f       	mov	r19, r20
 ab2:	44 27       	eor	r20, r20
 ab4:	58 5f       	subi	r21, 0xF8	; 248
 ab6:	f3 cf       	rjmp	.-26     	; 0xa9e <__addsf3x+0x38>
 ab8:	46 95       	lsr	r20
 aba:	37 95       	ror	r19
 abc:	27 95       	ror	r18
 abe:	a7 95       	ror	r26
 ac0:	f0 40       	sbci	r31, 0x00	; 0
 ac2:	53 95       	inc	r21
 ac4:	c9 f7       	brne	.-14     	; 0xab8 <__addsf3x+0x52>
 ac6:	7e f4       	brtc	.+30     	; 0xae6 <__addsf3x+0x80>
 ac8:	1f 16       	cp	r1, r31
 aca:	ba 0b       	sbc	r27, r26
 acc:	62 0b       	sbc	r22, r18
 ace:	73 0b       	sbc	r23, r19
 ad0:	84 0b       	sbc	r24, r20
 ad2:	ba f0       	brmi	.+46     	; 0xb02 <__addsf3x+0x9c>
 ad4:	91 50       	subi	r25, 0x01	; 1
 ad6:	a1 f0       	breq	.+40     	; 0xb00 <__addsf3x+0x9a>
 ad8:	ff 0f       	add	r31, r31
 ada:	bb 1f       	adc	r27, r27
 adc:	66 1f       	adc	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	c2 f7       	brpl	.-16     	; 0xad4 <__addsf3x+0x6e>
 ae4:	0e c0       	rjmp	.+28     	; 0xb02 <__addsf3x+0x9c>
 ae6:	ba 0f       	add	r27, r26
 ae8:	62 1f       	adc	r22, r18
 aea:	73 1f       	adc	r23, r19
 aec:	84 1f       	adc	r24, r20
 aee:	48 f4       	brcc	.+18     	; 0xb02 <__addsf3x+0x9c>
 af0:	87 95       	ror	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b7 95       	ror	r27
 af8:	f7 95       	ror	r31
 afa:	9e 3f       	cpi	r25, 0xFE	; 254
 afc:	08 f0       	brcs	.+2      	; 0xb00 <__addsf3x+0x9a>
 afe:	b0 cf       	rjmp	.-160    	; 0xa60 <__addsf3+0x28>
 b00:	93 95       	inc	r25
 b02:	88 0f       	add	r24, r24
 b04:	08 f0       	brcs	.+2      	; 0xb08 <__addsf3x+0xa2>
 b06:	99 27       	eor	r25, r25
 b08:	ee 0f       	add	r30, r30
 b0a:	97 95       	ror	r25
 b0c:	87 95       	ror	r24
 b0e:	08 95       	ret

00000b10 <__cmpsf2>:
 b10:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_cmp>
 b14:	08 f4       	brcc	.+2      	; 0xb18 <__cmpsf2+0x8>
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	08 95       	ret

00000b1a <__fixunssfsi>:
 b1a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__fp_splitA>
 b1e:	88 f0       	brcs	.+34     	; 0xb42 <__fixunssfsi+0x28>
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	98 f0       	brcs	.+38     	; 0xb4a <__fixunssfsi+0x30>
 b24:	b9 2f       	mov	r27, r25
 b26:	99 27       	eor	r25, r25
 b28:	b7 51       	subi	r27, 0x17	; 23
 b2a:	b0 f0       	brcs	.+44     	; 0xb58 <__fixunssfsi+0x3e>
 b2c:	e1 f0       	breq	.+56     	; 0xb66 <__fixunssfsi+0x4c>
 b2e:	66 0f       	add	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	1a f0       	brmi	.+6      	; 0xb3e <__fixunssfsi+0x24>
 b38:	ba 95       	dec	r27
 b3a:	c9 f7       	brne	.-14     	; 0xb2e <__fixunssfsi+0x14>
 b3c:	14 c0       	rjmp	.+40     	; 0xb66 <__fixunssfsi+0x4c>
 b3e:	b1 30       	cpi	r27, 0x01	; 1
 b40:	91 f0       	breq	.+36     	; 0xb66 <__fixunssfsi+0x4c>
 b42:	0e 94 67 06 	call	0xcce	; 0xcce <__fp_zero>
 b46:	b1 e0       	ldi	r27, 0x01	; 1
 b48:	08 95       	ret
 b4a:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_zero>
 b4e:	67 2f       	mov	r22, r23
 b50:	78 2f       	mov	r23, r24
 b52:	88 27       	eor	r24, r24
 b54:	b8 5f       	subi	r27, 0xF8	; 248
 b56:	39 f0       	breq	.+14     	; 0xb66 <__fixunssfsi+0x4c>
 b58:	b9 3f       	cpi	r27, 0xF9	; 249
 b5a:	cc f3       	brlt	.-14     	; 0xb4e <__fixunssfsi+0x34>
 b5c:	86 95       	lsr	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	b3 95       	inc	r27
 b64:	d9 f7       	brne	.-10     	; 0xb5c <__fixunssfsi+0x42>
 b66:	3e f4       	brtc	.+14     	; 0xb76 <__fixunssfsi+0x5c>
 b68:	90 95       	com	r25
 b6a:	80 95       	com	r24
 b6c:	70 95       	com	r23
 b6e:	61 95       	neg	r22
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	08 95       	ret

00000b78 <__floatunsisf>:
 b78:	e8 94       	clt
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <__floatsisf+0x12>

00000b7c <__floatsisf>:
 b7c:	97 fb       	bst	r25, 7
 b7e:	3e f4       	brtc	.+14     	; 0xb8e <__floatsisf+0x12>
 b80:	90 95       	com	r25
 b82:	80 95       	com	r24
 b84:	70 95       	com	r23
 b86:	61 95       	neg	r22
 b88:	7f 4f       	sbci	r23, 0xFF	; 255
 b8a:	8f 4f       	sbci	r24, 0xFF	; 255
 b8c:	9f 4f       	sbci	r25, 0xFF	; 255
 b8e:	99 23       	and	r25, r25
 b90:	a9 f0       	breq	.+42     	; 0xbbc <__floatsisf+0x40>
 b92:	f9 2f       	mov	r31, r25
 b94:	96 e9       	ldi	r25, 0x96	; 150
 b96:	bb 27       	eor	r27, r27
 b98:	93 95       	inc	r25
 b9a:	f6 95       	lsr	r31
 b9c:	87 95       	ror	r24
 b9e:	77 95       	ror	r23
 ba0:	67 95       	ror	r22
 ba2:	b7 95       	ror	r27
 ba4:	f1 11       	cpse	r31, r1
 ba6:	f8 cf       	rjmp	.-16     	; 0xb98 <__floatsisf+0x1c>
 ba8:	fa f4       	brpl	.+62     	; 0xbe8 <__floatsisf+0x6c>
 baa:	bb 0f       	add	r27, r27
 bac:	11 f4       	brne	.+4      	; 0xbb2 <__floatsisf+0x36>
 bae:	60 ff       	sbrs	r22, 0
 bb0:	1b c0       	rjmp	.+54     	; 0xbe8 <__floatsisf+0x6c>
 bb2:	6f 5f       	subi	r22, 0xFF	; 255
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	8f 4f       	sbci	r24, 0xFF	; 255
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	16 c0       	rjmp	.+44     	; 0xbe8 <__floatsisf+0x6c>
 bbc:	88 23       	and	r24, r24
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <__floatsisf+0x48>
 bc0:	96 e9       	ldi	r25, 0x96	; 150
 bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <__floatsisf+0x6a>
 bc4:	77 23       	and	r23, r23
 bc6:	21 f0       	breq	.+8      	; 0xbd0 <__floatsisf+0x54>
 bc8:	9e e8       	ldi	r25, 0x8E	; 142
 bca:	87 2f       	mov	r24, r23
 bcc:	76 2f       	mov	r23, r22
 bce:	05 c0       	rjmp	.+10     	; 0xbda <__floatsisf+0x5e>
 bd0:	66 23       	and	r22, r22
 bd2:	71 f0       	breq	.+28     	; 0xbf0 <__floatsisf+0x74>
 bd4:	96 e8       	ldi	r25, 0x86	; 134
 bd6:	86 2f       	mov	r24, r22
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	2a f0       	brmi	.+10     	; 0xbe8 <__floatsisf+0x6c>
 bde:	9a 95       	dec	r25
 be0:	66 0f       	add	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	da f7       	brpl	.-10     	; 0xbde <__floatsisf+0x62>
 be8:	88 0f       	add	r24, r24
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret

00000bf2 <__fp_cmp>:
 bf2:	99 0f       	add	r25, r25
 bf4:	00 08       	sbc	r0, r0
 bf6:	55 0f       	add	r21, r21
 bf8:	aa 0b       	sbc	r26, r26
 bfa:	e0 e8       	ldi	r30, 0x80	; 128
 bfc:	fe ef       	ldi	r31, 0xFE	; 254
 bfe:	16 16       	cp	r1, r22
 c00:	17 06       	cpc	r1, r23
 c02:	e8 07       	cpc	r30, r24
 c04:	f9 07       	cpc	r31, r25
 c06:	c0 f0       	brcs	.+48     	; 0xc38 <__fp_cmp+0x46>
 c08:	12 16       	cp	r1, r18
 c0a:	13 06       	cpc	r1, r19
 c0c:	e4 07       	cpc	r30, r20
 c0e:	f5 07       	cpc	r31, r21
 c10:	98 f0       	brcs	.+38     	; 0xc38 <__fp_cmp+0x46>
 c12:	62 1b       	sub	r22, r18
 c14:	73 0b       	sbc	r23, r19
 c16:	84 0b       	sbc	r24, r20
 c18:	95 0b       	sbc	r25, r21
 c1a:	39 f4       	brne	.+14     	; 0xc2a <__fp_cmp+0x38>
 c1c:	0a 26       	eor	r0, r26
 c1e:	61 f0       	breq	.+24     	; 0xc38 <__fp_cmp+0x46>
 c20:	23 2b       	or	r18, r19
 c22:	24 2b       	or	r18, r20
 c24:	25 2b       	or	r18, r21
 c26:	21 f4       	brne	.+8      	; 0xc30 <__fp_cmp+0x3e>
 c28:	08 95       	ret
 c2a:	0a 26       	eor	r0, r26
 c2c:	09 f4       	brne	.+2      	; 0xc30 <__fp_cmp+0x3e>
 c2e:	a1 40       	sbci	r26, 0x01	; 1
 c30:	a6 95       	lsr	r26
 c32:	8f ef       	ldi	r24, 0xFF	; 255
 c34:	81 1d       	adc	r24, r1
 c36:	81 1d       	adc	r24, r1
 c38:	08 95       	ret

00000c3a <__fp_inf>:
 c3a:	97 f9       	bld	r25, 7
 c3c:	9f 67       	ori	r25, 0x7F	; 127
 c3e:	80 e8       	ldi	r24, 0x80	; 128
 c40:	70 e0       	ldi	r23, 0x00	; 0
 c42:	60 e0       	ldi	r22, 0x00	; 0
 c44:	08 95       	ret

00000c46 <__fp_nan>:
 c46:	9f ef       	ldi	r25, 0xFF	; 255
 c48:	80 ec       	ldi	r24, 0xC0	; 192
 c4a:	08 95       	ret

00000c4c <__fp_pscA>:
 c4c:	00 24       	eor	r0, r0
 c4e:	0a 94       	dec	r0
 c50:	16 16       	cp	r1, r22
 c52:	17 06       	cpc	r1, r23
 c54:	18 06       	cpc	r1, r24
 c56:	09 06       	cpc	r0, r25
 c58:	08 95       	ret

00000c5a <__fp_pscB>:
 c5a:	00 24       	eor	r0, r0
 c5c:	0a 94       	dec	r0
 c5e:	12 16       	cp	r1, r18
 c60:	13 06       	cpc	r1, r19
 c62:	14 06       	cpc	r1, r20
 c64:	05 06       	cpc	r0, r21
 c66:	08 95       	ret

00000c68 <__fp_round>:
 c68:	09 2e       	mov	r0, r25
 c6a:	03 94       	inc	r0
 c6c:	00 0c       	add	r0, r0
 c6e:	11 f4       	brne	.+4      	; 0xc74 <__fp_round+0xc>
 c70:	88 23       	and	r24, r24
 c72:	52 f0       	brmi	.+20     	; 0xc88 <__fp_round+0x20>
 c74:	bb 0f       	add	r27, r27
 c76:	40 f4       	brcc	.+16     	; 0xc88 <__fp_round+0x20>
 c78:	bf 2b       	or	r27, r31
 c7a:	11 f4       	brne	.+4      	; 0xc80 <__fp_round+0x18>
 c7c:	60 ff       	sbrs	r22, 0
 c7e:	04 c0       	rjmp	.+8      	; 0xc88 <__fp_round+0x20>
 c80:	6f 5f       	subi	r22, 0xFF	; 255
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	08 95       	ret

00000c8a <__fp_split3>:
 c8a:	57 fd       	sbrc	r21, 7
 c8c:	90 58       	subi	r25, 0x80	; 128
 c8e:	44 0f       	add	r20, r20
 c90:	55 1f       	adc	r21, r21
 c92:	59 f0       	breq	.+22     	; 0xcaa <__fp_splitA+0x10>
 c94:	5f 3f       	cpi	r21, 0xFF	; 255
 c96:	71 f0       	breq	.+28     	; 0xcb4 <__fp_splitA+0x1a>
 c98:	47 95       	ror	r20

00000c9a <__fp_splitA>:
 c9a:	88 0f       	add	r24, r24
 c9c:	97 fb       	bst	r25, 7
 c9e:	99 1f       	adc	r25, r25
 ca0:	61 f0       	breq	.+24     	; 0xcba <__fp_splitA+0x20>
 ca2:	9f 3f       	cpi	r25, 0xFF	; 255
 ca4:	79 f0       	breq	.+30     	; 0xcc4 <__fp_splitA+0x2a>
 ca6:	87 95       	ror	r24
 ca8:	08 95       	ret
 caa:	12 16       	cp	r1, r18
 cac:	13 06       	cpc	r1, r19
 cae:	14 06       	cpc	r1, r20
 cb0:	55 1f       	adc	r21, r21
 cb2:	f2 cf       	rjmp	.-28     	; 0xc98 <__fp_split3+0xe>
 cb4:	46 95       	lsr	r20
 cb6:	f1 df       	rcall	.-30     	; 0xc9a <__fp_splitA>
 cb8:	08 c0       	rjmp	.+16     	; 0xcca <__fp_splitA+0x30>
 cba:	16 16       	cp	r1, r22
 cbc:	17 06       	cpc	r1, r23
 cbe:	18 06       	cpc	r1, r24
 cc0:	99 1f       	adc	r25, r25
 cc2:	f1 cf       	rjmp	.-30     	; 0xca6 <__fp_splitA+0xc>
 cc4:	86 95       	lsr	r24
 cc6:	71 05       	cpc	r23, r1
 cc8:	61 05       	cpc	r22, r1
 cca:	08 94       	sec
 ccc:	08 95       	ret

00000cce <__fp_zero>:
 cce:	e8 94       	clt

00000cd0 <__fp_szero>:
 cd0:	bb 27       	eor	r27, r27
 cd2:	66 27       	eor	r22, r22
 cd4:	77 27       	eor	r23, r23
 cd6:	cb 01       	movw	r24, r22
 cd8:	97 f9       	bld	r25, 7
 cda:	08 95       	ret

00000cdc <__gesf2>:
 cdc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_cmp>
 ce0:	08 f4       	brcc	.+2      	; 0xce4 <__gesf2+0x8>
 ce2:	8f ef       	ldi	r24, 0xFF	; 255
 ce4:	08 95       	ret

00000ce6 <__mulsf3>:
 ce6:	0e 94 86 06 	call	0xd0c	; 0xd0c <__mulsf3x>
 cea:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_round>
 cee:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_pscA>
 cf2:	38 f0       	brcs	.+14     	; 0xd02 <__mulsf3+0x1c>
 cf4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__fp_pscB>
 cf8:	20 f0       	brcs	.+8      	; 0xd02 <__mulsf3+0x1c>
 cfa:	95 23       	and	r25, r21
 cfc:	11 f0       	breq	.+4      	; 0xd02 <__mulsf3+0x1c>
 cfe:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__fp_inf>
 d02:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_nan>
 d06:	11 24       	eor	r1, r1
 d08:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_szero>

00000d0c <__mulsf3x>:
 d0c:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_split3>
 d10:	70 f3       	brcs	.-36     	; 0xcee <__mulsf3+0x8>

00000d12 <__mulsf3_pse>:
 d12:	95 9f       	mul	r25, r21
 d14:	c1 f3       	breq	.-16     	; 0xd06 <__mulsf3+0x20>
 d16:	95 0f       	add	r25, r21
 d18:	50 e0       	ldi	r21, 0x00	; 0
 d1a:	55 1f       	adc	r21, r21
 d1c:	62 9f       	mul	r22, r18
 d1e:	f0 01       	movw	r30, r0
 d20:	72 9f       	mul	r23, r18
 d22:	bb 27       	eor	r27, r27
 d24:	f0 0d       	add	r31, r0
 d26:	b1 1d       	adc	r27, r1
 d28:	63 9f       	mul	r22, r19
 d2a:	aa 27       	eor	r26, r26
 d2c:	f0 0d       	add	r31, r0
 d2e:	b1 1d       	adc	r27, r1
 d30:	aa 1f       	adc	r26, r26
 d32:	64 9f       	mul	r22, r20
 d34:	66 27       	eor	r22, r22
 d36:	b0 0d       	add	r27, r0
 d38:	a1 1d       	adc	r26, r1
 d3a:	66 1f       	adc	r22, r22
 d3c:	82 9f       	mul	r24, r18
 d3e:	22 27       	eor	r18, r18
 d40:	b0 0d       	add	r27, r0
 d42:	a1 1d       	adc	r26, r1
 d44:	62 1f       	adc	r22, r18
 d46:	73 9f       	mul	r23, r19
 d48:	b0 0d       	add	r27, r0
 d4a:	a1 1d       	adc	r26, r1
 d4c:	62 1f       	adc	r22, r18
 d4e:	83 9f       	mul	r24, r19
 d50:	a0 0d       	add	r26, r0
 d52:	61 1d       	adc	r22, r1
 d54:	22 1f       	adc	r18, r18
 d56:	74 9f       	mul	r23, r20
 d58:	33 27       	eor	r19, r19
 d5a:	a0 0d       	add	r26, r0
 d5c:	61 1d       	adc	r22, r1
 d5e:	23 1f       	adc	r18, r19
 d60:	84 9f       	mul	r24, r20
 d62:	60 0d       	add	r22, r0
 d64:	21 1d       	adc	r18, r1
 d66:	82 2f       	mov	r24, r18
 d68:	76 2f       	mov	r23, r22
 d6a:	6a 2f       	mov	r22, r26
 d6c:	11 24       	eor	r1, r1
 d6e:	9f 57       	subi	r25, 0x7F	; 127
 d70:	50 40       	sbci	r21, 0x00	; 0
 d72:	9a f0       	brmi	.+38     	; 0xd9a <__mulsf3_pse+0x88>
 d74:	f1 f0       	breq	.+60     	; 0xdb2 <__mulsf3_pse+0xa0>
 d76:	88 23       	and	r24, r24
 d78:	4a f0       	brmi	.+18     	; 0xd8c <__mulsf3_pse+0x7a>
 d7a:	ee 0f       	add	r30, r30
 d7c:	ff 1f       	adc	r31, r31
 d7e:	bb 1f       	adc	r27, r27
 d80:	66 1f       	adc	r22, r22
 d82:	77 1f       	adc	r23, r23
 d84:	88 1f       	adc	r24, r24
 d86:	91 50       	subi	r25, 0x01	; 1
 d88:	50 40       	sbci	r21, 0x00	; 0
 d8a:	a9 f7       	brne	.-22     	; 0xd76 <__mulsf3_pse+0x64>
 d8c:	9e 3f       	cpi	r25, 0xFE	; 254
 d8e:	51 05       	cpc	r21, r1
 d90:	80 f0       	brcs	.+32     	; 0xdb2 <__mulsf3_pse+0xa0>
 d92:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__fp_inf>
 d96:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_szero>
 d9a:	5f 3f       	cpi	r21, 0xFF	; 255
 d9c:	e4 f3       	brlt	.-8      	; 0xd96 <__mulsf3_pse+0x84>
 d9e:	98 3e       	cpi	r25, 0xE8	; 232
 da0:	d4 f3       	brlt	.-12     	; 0xd96 <__mulsf3_pse+0x84>
 da2:	86 95       	lsr	r24
 da4:	77 95       	ror	r23
 da6:	67 95       	ror	r22
 da8:	b7 95       	ror	r27
 daa:	f7 95       	ror	r31
 dac:	e7 95       	ror	r30
 dae:	9f 5f       	subi	r25, 0xFF	; 255
 db0:	c1 f7       	brne	.-16     	; 0xda2 <__mulsf3_pse+0x90>
 db2:	fe 2b       	or	r31, r30
 db4:	88 0f       	add	r24, r24
 db6:	91 1d       	adc	r25, r1
 db8:	96 95       	lsr	r25
 dba:	87 95       	ror	r24
 dbc:	97 f9       	bld	r25, 7
 dbe:	08 95       	ret
 dc0:	19 f4       	brne	.+6      	; 0xdc8 <__mulsf3_pse+0xb6>
 dc2:	16 f4       	brtc	.+4      	; 0xdc8 <__mulsf3_pse+0xb6>
 dc4:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_nan>
 dc8:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_mpack>

00000dcc <sqrt>:
 dcc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__fp_splitA>
 dd0:	b8 f3       	brcs	.-18     	; 0xdc0 <__mulsf3_pse+0xae>
 dd2:	99 23       	and	r25, r25
 dd4:	c9 f3       	breq	.-14     	; 0xdc8 <__mulsf3_pse+0xb6>
 dd6:	b6 f3       	brts	.-20     	; 0xdc4 <__mulsf3_pse+0xb2>
 dd8:	9f 57       	subi	r25, 0x7F	; 127
 dda:	55 0b       	sbc	r21, r21
 ddc:	87 ff       	sbrs	r24, 7
 dde:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_norm2>
 de2:	00 24       	eor	r0, r0
 de4:	a0 e6       	ldi	r26, 0x60	; 96
 de6:	40 ea       	ldi	r20, 0xA0	; 160
 de8:	90 01       	movw	r18, r0
 dea:	80 58       	subi	r24, 0x80	; 128
 dec:	56 95       	lsr	r21
 dee:	97 95       	ror	r25
 df0:	28 f4       	brcc	.+10     	; 0xdfc <sqrt+0x30>
 df2:	80 5c       	subi	r24, 0xC0	; 192
 df4:	66 0f       	add	r22, r22
 df6:	77 1f       	adc	r23, r23
 df8:	88 1f       	adc	r24, r24
 dfa:	20 f0       	brcs	.+8      	; 0xe04 <sqrt+0x38>
 dfc:	26 17       	cp	r18, r22
 dfe:	37 07       	cpc	r19, r23
 e00:	48 07       	cpc	r20, r24
 e02:	30 f4       	brcc	.+12     	; 0xe10 <sqrt+0x44>
 e04:	62 1b       	sub	r22, r18
 e06:	73 0b       	sbc	r23, r19
 e08:	84 0b       	sbc	r24, r20
 e0a:	20 29       	or	r18, r0
 e0c:	31 29       	or	r19, r1
 e0e:	4a 2b       	or	r20, r26
 e10:	a6 95       	lsr	r26
 e12:	17 94       	ror	r1
 e14:	07 94       	ror	r0
 e16:	20 25       	eor	r18, r0
 e18:	31 25       	eor	r19, r1
 e1a:	4a 27       	eor	r20, r26
 e1c:	58 f7       	brcc	.-42     	; 0xdf4 <sqrt+0x28>
 e1e:	66 0f       	add	r22, r22
 e20:	77 1f       	adc	r23, r23
 e22:	88 1f       	adc	r24, r24
 e24:	20 f0       	brcs	.+8      	; 0xe2e <sqrt+0x62>
 e26:	26 17       	cp	r18, r22
 e28:	37 07       	cpc	r19, r23
 e2a:	48 07       	cpc	r20, r24
 e2c:	30 f4       	brcc	.+12     	; 0xe3a <sqrt+0x6e>
 e2e:	62 0b       	sbc	r22, r18
 e30:	73 0b       	sbc	r23, r19
 e32:	84 0b       	sbc	r24, r20
 e34:	20 0d       	add	r18, r0
 e36:	31 1d       	adc	r19, r1
 e38:	41 1d       	adc	r20, r1
 e3a:	a0 95       	com	r26
 e3c:	81 f7       	brne	.-32     	; 0xe1e <sqrt+0x52>
 e3e:	b9 01       	movw	r22, r18
 e40:	84 2f       	mov	r24, r20
 e42:	91 58       	subi	r25, 0x81	; 129
 e44:	88 0f       	add	r24, r24
 e46:	96 95       	lsr	r25
 e48:	87 95       	ror	r24
 e4a:	08 95       	ret

00000e4c <__fp_mpack>:
 e4c:	9f 3f       	cpi	r25, 0xFF	; 255
 e4e:	31 f0       	breq	.+12     	; 0xe5c <__fp_mpack_finite+0xc>

00000e50 <__fp_mpack_finite>:
 e50:	91 50       	subi	r25, 0x01	; 1
 e52:	20 f4       	brcc	.+8      	; 0xe5c <__fp_mpack_finite+0xc>
 e54:	87 95       	ror	r24
 e56:	77 95       	ror	r23
 e58:	67 95       	ror	r22
 e5a:	b7 95       	ror	r27
 e5c:	88 0f       	add	r24, r24
 e5e:	91 1d       	adc	r25, r1
 e60:	96 95       	lsr	r25
 e62:	87 95       	ror	r24
 e64:	97 f9       	bld	r25, 7
 e66:	08 95       	ret

00000e68 <__fp_norm2>:
 e68:	91 50       	subi	r25, 0x01	; 1
 e6a:	50 40       	sbci	r21, 0x00	; 0
 e6c:	66 0f       	add	r22, r22
 e6e:	77 1f       	adc	r23, r23
 e70:	88 1f       	adc	r24, r24
 e72:	d2 f7       	brpl	.-12     	; 0xe68 <__fp_norm2>
 e74:	08 95       	ret

00000e76 <__divmodhi4>:
 e76:	97 fb       	bst	r25, 7
 e78:	07 2e       	mov	r0, r23
 e7a:	16 f4       	brtc	.+4      	; 0xe80 <__divmodhi4+0xa>
 e7c:	00 94       	com	r0
 e7e:	07 d0       	rcall	.+14     	; 0xe8e <__divmodhi4_neg1>
 e80:	77 fd       	sbrc	r23, 7
 e82:	09 d0       	rcall	.+18     	; 0xe96 <__divmodhi4_neg2>
 e84:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__udivmodhi4>
 e88:	07 fc       	sbrc	r0, 7
 e8a:	05 d0       	rcall	.+10     	; 0xe96 <__divmodhi4_neg2>
 e8c:	3e f4       	brtc	.+14     	; 0xe9c <__divmodhi4_exit>

00000e8e <__divmodhi4_neg1>:
 e8e:	90 95       	com	r25
 e90:	81 95       	neg	r24
 e92:	9f 4f       	sbci	r25, 0xFF	; 255
 e94:	08 95       	ret

00000e96 <__divmodhi4_neg2>:
 e96:	70 95       	com	r23
 e98:	61 95       	neg	r22
 e9a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e9c <__divmodhi4_exit>:
 e9c:	08 95       	ret

00000e9e <__udivmodhi4>:
 e9e:	aa 1b       	sub	r26, r26
 ea0:	bb 1b       	sub	r27, r27
 ea2:	51 e1       	ldi	r21, 0x11	; 17
 ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <__udivmodhi4_ep>

00000ea6 <__udivmodhi4_loop>:
 ea6:	aa 1f       	adc	r26, r26
 ea8:	bb 1f       	adc	r27, r27
 eaa:	a6 17       	cp	r26, r22
 eac:	b7 07       	cpc	r27, r23
 eae:	10 f0       	brcs	.+4      	; 0xeb4 <__udivmodhi4_ep>
 eb0:	a6 1b       	sub	r26, r22
 eb2:	b7 0b       	sbc	r27, r23

00000eb4 <__udivmodhi4_ep>:
 eb4:	88 1f       	adc	r24, r24
 eb6:	99 1f       	adc	r25, r25
 eb8:	5a 95       	dec	r21
 eba:	a9 f7       	brne	.-22     	; 0xea6 <__udivmodhi4_loop>
 ebc:	80 95       	com	r24
 ebe:	90 95       	com	r25
 ec0:	bc 01       	movw	r22, r24
 ec2:	cd 01       	movw	r24, r26
 ec4:	08 95       	ret

00000ec6 <_exit>:
 ec6:	f8 94       	cli

00000ec8 <__stop_program>:
 ec8:	ff cf       	rjmp	.-2      	; 0xec8 <__stop_program>
