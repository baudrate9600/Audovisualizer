
bruh.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00000d74  00000e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012a  00800298  00800298  00000fa0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f5  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b98  00000000  00000000  00002635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab3  00000000  00000000  000031cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00003c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000613  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015df  00000000  00000000  000047df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005dbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 39       	cpi	r26, 0x98	; 152
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a8 e9       	ldi	r26, 0x98	; 152
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3c       	cpi	r26, 0xC2	; 194
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 03 	call	0x790	; 0x790 <main>
  9e:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <magnitude>:
float magnitude(scomplex x){
	return sqrt( x.real*x.real + x.imag*x.imag);
}
int imagnitude(scomplex x){
	return (int) sqrt(x.real*x.real + x.imag*x.imag);
}
  a6:	4f 92       	push	r4
  a8:	5f 92       	push	r5
  aa:	6f 92       	push	r6
  ac:	7f 92       	push	r7
  ae:	8f 92       	push	r8
  b0:	9f 92       	push	r9
  b2:	af 92       	push	r10
  b4:	bf 92       	push	r11
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	28 97       	sbiw	r28, 0x08	; 8
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	29 83       	std	Y+1, r18	; 0x01
  d4:	3a 83       	std	Y+2, r19	; 0x02
  d6:	4b 83       	std	Y+3, r20	; 0x03
  d8:	5c 83       	std	Y+4, r21	; 0x04
  da:	6d 83       	std	Y+5, r22	; 0x05
  dc:	7e 83       	std	Y+6, r23	; 0x06
  de:	8f 83       	std	Y+7, r24	; 0x07
  e0:	98 87       	std	Y+8, r25	; 0x08
  e2:	89 80       	ldd	r8, Y+1	; 0x01
  e4:	9a 80       	ldd	r9, Y+2	; 0x02
  e6:	ab 80       	ldd	r10, Y+3	; 0x03
  e8:	bc 80       	ldd	r11, Y+4	; 0x04
  ea:	cd 80       	ldd	r12, Y+5	; 0x05
  ec:	de 80       	ldd	r13, Y+6	; 0x06
  ee:	ef 80       	ldd	r14, Y+7	; 0x07
  f0:	f8 84       	ldd	r15, Y+8	; 0x08
  f2:	a5 01       	movw	r20, r10
  f4:	94 01       	movw	r18, r8
  f6:	c5 01       	movw	r24, r10
  f8:	b4 01       	movw	r22, r8
  fa:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
  fe:	4b 01       	movw	r8, r22
 100:	5c 01       	movw	r10, r24
 102:	a7 01       	movw	r20, r14
 104:	96 01       	movw	r18, r12
 106:	c7 01       	movw	r24, r14
 108:	b6 01       	movw	r22, r12
 10a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 10e:	9b 01       	movw	r18, r22
 110:	ac 01       	movw	r20, r24
 112:	c5 01       	movw	r24, r10
 114:	b4 01       	movw	r22, r8
 116:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3>
 11a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <sqrt>
 11e:	28 96       	adiw	r28, 0x08	; 8
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	cf 90       	pop	r12
 136:	bf 90       	pop	r11
 138:	af 90       	pop	r10
 13a:	9f 90       	pop	r9
 13c:	8f 90       	pop	r8
 13e:	7f 90       	pop	r7
 140:	6f 90       	pop	r6
 142:	5f 90       	pop	r5
 144:	4f 90       	pop	r4
 146:	08 95       	ret

00000148 <fft>:


int odd,even;
scomplex cmplxPart;	
int val;
void fft(scomplex * samples){
 148:	2f 92       	push	r2
 14a:	3f 92       	push	r3
 14c:	4f 92       	push	r4
 14e:	5f 92       	push	r5
 150:	6f 92       	push	r6
 152:	7f 92       	push	r7
 154:	8f 92       	push	r8
 156:	9f 92       	push	r9
 158:	af 92       	push	r10
 15a:	bf 92       	push	r11
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	66 97       	sbiw	r28, 0x16	; 22
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	3c 01       	movw	r6, r24
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
			if(counter == line){
				counter = 0;
 17e:	25 e0       	ldi	r18, 0x05	; 5
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	3c 8b       	std	Y+20, r19	; 0x14
 184:	2b 8b       	std	Y+19, r18	; 0x13
	//number of stages 
	//        N
	// X[k] = Î£ x_k W_n
	//       n=0 
	
	int stride = 0;
 186:	1a 8a       	std	Y+18, r1	; 0x12
 188:	19 8a       	std	Y+17, r1	; 0x11
scomplex cmplxPart;	
int val;
void fft(scomplex * samples){
	int counter = 0;
	//determines the offset between odd and even 
	int line = 1;
 18a:	44 24       	eor	r4, r4
 18c:	43 94       	inc	r4
 18e:	51 2c       	mov	r5, r1
 190:	31 c1       	rjmp	.+610    	; 0x3f4 <fft+0x2ac>
	int stride = 0;
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
			if(counter == line){
 192:	42 14       	cp	r4, r2
 194:	53 04       	cpc	r5, r3
 196:	41 f4       	brne	.+16     	; 0x1a8 <fft+0x60>
				counter = 0;
				offset += line;
 198:	8f 85       	ldd	r24, Y+15	; 0x0f
 19a:	98 89       	ldd	r25, Y+16	; 0x10
 19c:	84 0d       	add	r24, r4
 19e:	95 1d       	adc	r25, r5
 1a0:	98 8b       	std	Y+16, r25	; 0x10
 1a2:	8f 87       	std	Y+15, r24	; 0x0f
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
			if(counter == line){
				counter = 0;
 1a4:	21 2c       	mov	r2, r1
 1a6:	31 2c       	mov	r3, r1
				offset += line;
			}	
			val = stride + counter;
 1a8:	89 89       	ldd	r24, Y+17	; 0x11
 1aa:	9a 89       	ldd	r25, Y+18	; 0x12
 1ac:	82 0d       	add	r24, r2
 1ae:	93 1d       	adc	r25, r3
 1b0:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <val+0x1>
 1b4:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <val>
			cmplxPart.real = lut_cos[val];
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	fc 01       	movw	r30, r24
 1c2:	e4 5e       	subi	r30, 0xE4	; 228
 1c4:	fd 4f       	sbci	r31, 0xFD	; 253
 1c6:	80 80       	ld	r8, Z
 1c8:	91 80       	ldd	r9, Z+1	; 0x01
 1ca:	a2 80       	ldd	r10, Z+2	; 0x02
 1cc:	b3 80       	ldd	r11, Z+3	; 0x03
 1ce:	af e9       	ldi	r26, 0x9F	; 159
 1d0:	b2 e0       	ldi	r27, 0x02	; 2
 1d2:	8d 92       	st	X+, r8
 1d4:	9d 92       	st	X+, r9
 1d6:	ad 92       	st	X+, r10
 1d8:	bc 92       	st	X, r11
 1da:	13 97       	sbiw	r26, 0x03	; 3
			cmplxPart.imag = lut_sin[val];
 1dc:	fc 01       	movw	r30, r24
 1de:	e0 56       	subi	r30, 0x60	; 96
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	c0 80       	ld	r12, Z
 1e4:	d1 80       	ldd	r13, Z+1	; 0x01
 1e6:	e2 80       	ldd	r14, Z+2	; 0x02
 1e8:	f3 80       	ldd	r15, Z+3	; 0x03
 1ea:	c0 92 a3 02 	sts	0x02A3, r12	; 0x8002a3 <cmplxPart+0x4>
 1ee:	d0 92 a4 02 	sts	0x02A4, r13	; 0x8002a4 <cmplxPart+0x5>
 1f2:	e0 92 a5 02 	sts	0x02A5, r14	; 0x8002a5 <cmplxPart+0x6>
 1f6:	f0 92 a6 02 	sts	0x02A6, r15	; 0x8002a6 <cmplxPart+0x7>

			even = j+offset;
 1fa:	ef 85       	ldd	r30, Y+15	; 0x0f
 1fc:	f8 89       	ldd	r31, Y+16	; 0x10
 1fe:	2d 81       	ldd	r18, Y+5	; 0x05
 200:	3e 81       	ldd	r19, Y+6	; 0x06
 202:	e2 0f       	add	r30, r18
 204:	f3 1f       	adc	r31, r19
 206:	fe 8b       	std	Y+22, r31	; 0x16
 208:	ed 8b       	std	Y+21, r30	; 0x15
 20a:	f0 93 9e 02 	sts	0x029E, r31	; 0x80029e <even+0x1>
 20e:	e0 93 9d 02 	sts	0x029D, r30	; 0x80029d <even>
			odd = even + line;
 212:	8f 01       	movw	r16, r30
 214:	04 0d       	add	r16, r4
 216:	15 1d       	adc	r17, r5
 218:	10 93 9c 02 	sts	0x029C, r17	; 0x80029c <odd+0x1>
 21c:	00 93 9b 02 	sts	0x029B, r16	; 0x80029b <odd>

			cmplxPart = multiply(samples[odd],cmplxPart);
 220:	00 0f       	add	r16, r16
 222:	11 1f       	adc	r17, r17
 224:	00 0f       	add	r16, r16
 226:	11 1f       	adc	r17, r17
 228:	00 0f       	add	r16, r16
 22a:	11 1f       	adc	r17, r17
 22c:	06 0d       	add	r16, r6
 22e:	17 1d       	adc	r17, r7
 230:	d8 01       	movw	r26, r16
 232:	8d 91       	ld	r24, X+
 234:	9d 91       	ld	r25, X+
 236:	0d 90       	ld	r0, X+
 238:	bc 91       	ld	r27, X
 23a:	a0 2d       	mov	r26, r0
 23c:	8b 87       	std	Y+11, r24	; 0x0b
 23e:	9c 87       	std	Y+12, r25	; 0x0c
 240:	ad 87       	std	Y+13, r26	; 0x0d
 242:	be 87       	std	Y+14, r27	; 0x0e
 244:	d8 01       	movw	r26, r16
 246:	14 96       	adiw	r26, 0x04	; 4
 248:	8d 91       	ld	r24, X+
 24a:	9d 91       	ld	r25, X+
 24c:	0d 90       	ld	r0, X+
 24e:	bc 91       	ld	r27, X
 250:	a0 2d       	mov	r26, r0
 252:	8f 83       	std	Y+7, r24	; 0x07
 254:	98 87       	std	Y+8, r25	; 0x08
 256:	a9 87       	std	Y+9, r26	; 0x09
 258:	ba 87       	std	Y+10, r27	; 0x0a
    return num;
}

scomplex multiply(scomplex x, scomplex y){
	scomplex mult;
	mult.real = x.real * y.real -(x.imag*y.imag);
 25a:	2b 85       	ldd	r18, Y+11	; 0x0b
 25c:	3c 85       	ldd	r19, Y+12	; 0x0c
 25e:	4d 85       	ldd	r20, Y+13	; 0x0d
 260:	5e 85       	ldd	r21, Y+14	; 0x0e
 262:	c5 01       	movw	r24, r10
 264:	b4 01       	movw	r22, r8
 266:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 26a:	69 83       	std	Y+1, r22	; 0x01
 26c:	7a 83       	std	Y+2, r23	; 0x02
 26e:	8b 83       	std	Y+3, r24	; 0x03
 270:	9c 83       	std	Y+4, r25	; 0x04
 272:	2f 81       	ldd	r18, Y+7	; 0x07
 274:	38 85       	ldd	r19, Y+8	; 0x08
 276:	49 85       	ldd	r20, Y+9	; 0x09
 278:	5a 85       	ldd	r21, Y+10	; 0x0a
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 282:	9b 01       	movw	r18, r22
 284:	ac 01       	movw	r20, r24
 286:	69 81       	ldd	r22, Y+1	; 0x01
 288:	7a 81       	ldd	r23, Y+2	; 0x02
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	9c 81       	ldd	r25, Y+4	; 0x04
 28e:	0e 94 9d 04 	call	0x93a	; 0x93a <__subsf3>
 292:	69 83       	std	Y+1, r22	; 0x01
 294:	7a 83       	std	Y+2, r23	; 0x02
 296:	8b 83       	std	Y+3, r24	; 0x03
 298:	9c 83       	std	Y+4, r25	; 0x04
	mult.imag = x.real * y.imag + x.imag *y.real;
 29a:	2b 85       	ldd	r18, Y+11	; 0x0b
 29c:	3c 85       	ldd	r19, Y+12	; 0x0c
 29e:	4d 85       	ldd	r20, Y+13	; 0x0d
 2a0:	5e 85       	ldd	r21, Y+14	; 0x0e
 2a2:	c7 01       	movw	r24, r14
 2a4:	b6 01       	movw	r22, r12
 2a6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 2aa:	6b 01       	movw	r12, r22
 2ac:	7c 01       	movw	r14, r24
 2ae:	2f 81       	ldd	r18, Y+7	; 0x07
 2b0:	38 85       	ldd	r19, Y+8	; 0x08
 2b2:	49 85       	ldd	r20, Y+9	; 0x09
 2b4:	5a 85       	ldd	r21, Y+10	; 0x0a
 2b6:	c5 01       	movw	r24, r10
 2b8:	b4 01       	movw	r22, r8
 2ba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 2be:	9b 01       	movw	r18, r22
 2c0:	ac 01       	movw	r20, r24
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3>
 2ca:	9b 01       	movw	r18, r22
 2cc:	ac 01       	movw	r20, r24
			cmplxPart.imag = lut_sin[val];

			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	9a 81       	ldd	r25, Y+2	; 0x02
 2d2:	ab 81       	ldd	r26, Y+3	; 0x03
 2d4:	bc 81       	ldd	r27, Y+4	; 0x04
 2d6:	ef e9       	ldi	r30, 0x9F	; 159
 2d8:	f2 e0       	ldi	r31, 0x02	; 2
 2da:	80 83       	st	Z, r24
 2dc:	91 83       	std	Z+1, r25	; 0x01
 2de:	a2 83       	std	Z+2, r26	; 0x02
 2e0:	b3 83       	std	Z+3, r27	; 0x03
 2e2:	20 93 a3 02 	sts	0x02A3, r18	; 0x8002a3 <cmplxPart+0x4>
 2e6:	30 93 a4 02 	sts	0x02A4, r19	; 0x8002a4 <cmplxPart+0x5>
 2ea:	40 93 a5 02 	sts	0x02A5, r20	; 0x8002a5 <cmplxPart+0x6>
 2ee:	50 93 a6 02 	sts	0x02A6, r21	; 0x8002a6 <cmplxPart+0x7>
			samples[odd] = subtract(samples[even],cmplxPart);
 2f2:	8d 89       	ldd	r24, Y+21	; 0x15
 2f4:	9e 89       	ldd	r25, Y+22	; 0x16
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	86 0d       	add	r24, r6
 304:	97 1d       	adc	r25, r7
 306:	98 87       	std	Y+8, r25	; 0x08
 308:	8f 83       	std	Y+7, r24	; 0x07
	return ad;
}
scomplex subtract(scomplex x, scomplex y){
	scomplex sub; 
	sub.real = x.real - y.real; 
	sub.imag = x.imag - y.imag;
 30a:	dc 01       	movw	r26, r24
 30c:	14 96       	adiw	r26, 0x04	; 4
 30e:	6d 91       	ld	r22, X+
 310:	7d 91       	ld	r23, X+
 312:	8d 91       	ld	r24, X+
 314:	9c 91       	ld	r25, X
 316:	17 97       	sbiw	r26, 0x07	; 7
 318:	0e 94 9d 04 	call	0x93a	; 0x93a <__subsf3>
 31c:	6b 01       	movw	r12, r22
 31e:	7c 01       	movw	r14, r24

			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
 320:	29 81       	ldd	r18, Y+1	; 0x01
 322:	3a 81       	ldd	r19, Y+2	; 0x02
 324:	4b 81       	ldd	r20, Y+3	; 0x03
 326:	5c 81       	ldd	r21, Y+4	; 0x04
 328:	ef 81       	ldd	r30, Y+7	; 0x07
 32a:	f8 85       	ldd	r31, Y+8	; 0x08
 32c:	60 81       	ld	r22, Z
 32e:	71 81       	ldd	r23, Z+1	; 0x01
 330:	82 81       	ldd	r24, Z+2	; 0x02
 332:	93 81       	ldd	r25, Z+3	; 0x03
 334:	0e 94 9d 04 	call	0x93a	; 0x93a <__subsf3>
 338:	d8 01       	movw	r26, r16
 33a:	6d 93       	st	X+, r22
 33c:	7d 93       	st	X+, r23
 33e:	8d 93       	st	X+, r24
 340:	9c 93       	st	X, r25
 342:	13 97       	sbiw	r26, 0x03	; 3
 344:	f8 01       	movw	r30, r16
 346:	c4 82       	std	Z+4, r12	; 0x04
 348:	d5 82       	std	Z+5, r13	; 0x05
 34a:	e6 82       	std	Z+6, r14	; 0x06
 34c:	f7 82       	std	Z+7, r15	; 0x07
			samples[even] = add(samples[even], cmplxPart);
 34e:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <even>
 352:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <even+0x1>
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	26 0d       	add	r18, r6
 364:	37 1d       	adc	r19, r7
 366:	3a 83       	std	Y+2, r19	; 0x02
 368:	29 83       	std	Y+1, r18	; 0x01
	return mult;
}
scomplex add(scomplex x, scomplex y){
	scomplex ad; 
	ad.real = x.real + y.real; 
	ad.imag = x.imag + y.imag;
 36a:	d9 01       	movw	r26, r18
 36c:	14 96       	adiw	r26, 0x04	; 4
 36e:	2d 91       	ld	r18, X+
 370:	3d 91       	ld	r19, X+
 372:	4d 91       	ld	r20, X+
 374:	5c 91       	ld	r21, X
 376:	17 97       	sbiw	r26, 0x07	; 7
 378:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <cmplxPart+0x4>
 37c:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <cmplxPart+0x5>
 380:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <cmplxPart+0x6>
 384:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <cmplxPart+0x7>
 388:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3>
 38c:	6b 01       	movw	r12, r22
 38e:	7c 01       	movw	r14, r24
			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
			samples[even] = add(samples[even], cmplxPart);
 390:	ef e9       	ldi	r30, 0x9F	; 159
 392:	f2 e0       	ldi	r31, 0x02	; 2
 394:	20 81       	ld	r18, Z
 396:	31 81       	ldd	r19, Z+1	; 0x01
 398:	42 81       	ldd	r20, Z+2	; 0x02
 39a:	53 81       	ldd	r21, Z+3	; 0x03
 39c:	a9 81       	ldd	r26, Y+1	; 0x01
 39e:	ba 81       	ldd	r27, Y+2	; 0x02
 3a0:	6d 91       	ld	r22, X+
 3a2:	7d 91       	ld	r23, X+
 3a4:	8d 91       	ld	r24, X+
 3a6:	9c 91       	ld	r25, X
 3a8:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3>
 3ac:	e9 81       	ldd	r30, Y+1	; 0x01
 3ae:	fa 81       	ldd	r31, Y+2	; 0x02
 3b0:	60 83       	st	Z, r22
 3b2:	71 83       	std	Z+1, r23	; 0x01
 3b4:	82 83       	std	Z+2, r24	; 0x02
 3b6:	93 83       	std	Z+3, r25	; 0x03
 3b8:	c4 82       	std	Z+4, r12	; 0x04
 3ba:	d5 82       	std	Z+5, r13	; 0x05
 3bc:	e6 82       	std	Z+6, r14	; 0x06
 3be:	f7 82       	std	Z+7, r15	; 0x07
			counter ++;
 3c0:	bf ef       	ldi	r27, 0xFF	; 255
 3c2:	2b 1a       	sub	r2, r27
 3c4:	3b 0a       	sbc	r3, r27
	
	int stride = 0;
	for (int i = 0; i < OUTER_LOOP; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < INNER_LOOP; j++){
 3c6:	ed 81       	ldd	r30, Y+5	; 0x05
 3c8:	fe 81       	ldd	r31, Y+6	; 0x06
 3ca:	31 96       	adiw	r30, 0x01	; 1
 3cc:	fe 83       	std	Y+6, r31	; 0x06
 3ce:	ed 83       	std	Y+5, r30	; 0x05
 3d0:	70 97       	sbiw	r30, 0x10	; 16
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <fft+0x28e>
 3d4:	de ce       	rjmp	.-580    	; 0x192 <fft+0x4a>
			samples[odd] = subtract(samples[even],cmplxPart);
			samples[even] = add(samples[even], cmplxPart);
			counter ++;

		}
		stride = stride + line; 
 3d6:	29 89       	ldd	r18, Y+17	; 0x11
 3d8:	3a 89       	ldd	r19, Y+18	; 0x12
 3da:	24 0d       	add	r18, r4
 3dc:	35 1d       	adc	r19, r5
 3de:	3a 8b       	std	Y+18, r19	; 0x12
 3e0:	29 8b       	std	Y+17, r18	; 0x11
		line = line * 2;
 3e2:	44 0c       	add	r4, r4
 3e4:	55 1c       	adc	r5, r5
 3e6:	8b 89       	ldd	r24, Y+19	; 0x13
 3e8:	9c 89       	ldd	r25, Y+20	; 0x14
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	9c 8b       	std	Y+20, r25	; 0x14
 3ee:	8b 8b       	std	Y+19, r24	; 0x13
	//        N
	// X[k] = Î£ x_k W_n
	//       n=0 
	
	int stride = 0;
	for (int i = 0; i < OUTER_LOOP; i++){
 3f0:	89 2b       	or	r24, r25
 3f2:	39 f0       	breq	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>


int odd,even;
scomplex cmplxPart;	
int val;
void fft(scomplex * samples){
 3f4:	1e 82       	std	Y+6, r1	; 0x06
 3f6:	1d 82       	std	Y+5, r1	; 0x05
 3f8:	18 8a       	std	Y+16, r1	; 0x10
 3fa:	1f 86       	std	Y+15, r1	; 0x0f
 3fc:	21 2c       	mov	r2, r1
 3fe:	31 2c       	mov	r3, r1
 400:	c8 ce       	rjmp	.-624    	; 0x192 <fft+0x4a>
		}
		stride = stride + line; 
		line = line * 2;
	}

}
 402:	66 96       	adiw	r28, 0x16	; 22
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	bf 90       	pop	r11
 420:	af 90       	pop	r10
 422:	9f 90       	pop	r9
 424:	8f 90       	pop	r8
 426:	7f 90       	pop	r7
 428:	6f 90       	pop	r6
 42a:	5f 90       	pop	r5
 42c:	4f 90       	pop	r4
 42e:	3f 90       	pop	r3
 430:	2f 90       	pop	r2
 432:	08 95       	ret

00000434 <initSerial>:
		return (int)val; 
	}
}
void decay_columns(uint16_t decay_speed){
	if((general_timer % decay_speed) == 0){
		for(int i = 0; i < 16; i++){
 434:	88 e9       	ldi	r24, 0x98	; 152
 436:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 440:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 444:	87 e6       	ldi	r24, 0x67	; 103
 446:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 44a:	08 95       	ret

0000044c <spi>:
 44c:	8c b5       	in	r24, 0x2c	; 44
 44e:	80 61       	ori	r24, 0x10	; 16
 450:	8c bd       	out	0x2c, r24	; 44
 452:	8d b5       	in	r24, 0x2d	; 45
 454:	81 60       	ori	r24, 0x01	; 1
 456:	8d bd       	out	0x2d, r24	; 45
 458:	8c b5       	in	r24, 0x2c	; 44
 45a:	80 64       	ori	r24, 0x40	; 64
 45c:	8c bd       	out	0x2c, r24	; 44
 45e:	08 95       	ret

00000460 <send>:
 460:	5e 98       	cbi	0x0b, 6	; 11
 462:	8e bd       	out	0x2e, r24	; 46
 464:	0d b4       	in	r0, 0x2d	; 45
 466:	07 fe       	sbrs	r0, 7
 468:	fd cf       	rjmp	.-6      	; 0x464 <send+0x4>
 46a:	7e bd       	out	0x2e, r23	; 46
 46c:	0d b4       	in	r0, 0x2d	; 45
 46e:	07 fe       	sbrs	r0, 7
 470:	fd cf       	rjmp	.-6      	; 0x46c <send+0xc>
 472:	6e bd       	out	0x2e, r22	; 46
 474:	0d b4       	in	r0, 0x2d	; 45
 476:	07 fe       	sbrs	r0, 7
 478:	fd cf       	rjmp	.-6      	; 0x474 <send+0x14>
 47a:	5e 9a       	sbi	0x0b, 6	; 11
 47c:	08 95       	ret

0000047e <timer1>:
 47e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 482:	e1 e8       	ldi	r30, 0x81	; 129
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	10 82       	st	Z, r1
 488:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 48c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 490:	88 e1       	ldi	r24, 0x18	; 24
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 498:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 49c:	80 81       	ld	r24, Z
 49e:	88 60       	ori	r24, 0x08	; 8
 4a0:	80 83       	st	Z, r24
 4a2:	80 81       	ld	r24, Z
 4a4:	83 60       	ori	r24, 0x03	; 3
 4a6:	80 83       	st	Z, r24
 4a8:	ef e6       	ldi	r30, 0x6F	; 111
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	82 60       	ori	r24, 0x02	; 2
 4b0:	80 83       	st	Z, r24
 4b2:	08 95       	ret

000004b4 <timer2>:
 4b4:	a0 eb       	ldi	r26, 0xB0	; 176
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	1c 92       	st	X, r1
 4ba:	e1 eb       	ldi	r30, 0xB1	; 177
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	10 82       	st	Z, r1
 4c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 4c4:	88 e1       	ldi	r24, 0x18	; 24
 4c6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 4ca:	8c 91       	ld	r24, X
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	8c 93       	st	X, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	83 60       	ori	r24, 0x03	; 3
 4d4:	80 83       	st	Z, r24
 4d6:	e0 e7       	ldi	r30, 0x70	; 112
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	82 60       	ori	r24, 0x02	; 2
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret

000004e2 <timer2_stop>:
 4e2:	e0 e7       	ldi	r30, 0x70	; 112
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	8d 7f       	andi	r24, 0xFD	; 253
 4ea:	80 83       	st	Z, r24
 4ec:	08 95       	ret

000004ee <timer2_start>:
 4ee:	e0 e7       	ldi	r30, 0x70	; 112
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	82 60       	ori	r24, 0x02	; 2
 4f6:	80 83       	st	Z, r24
 4f8:	08 95       	ret

000004fa <__vector_7>:
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sample_done>
 524:	81 11       	cpse	r24, r1
 526:	73 c0       	rjmp	.+230    	; 0x60e <__vector_7+0x114>
 528:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <sample_counter>
 52c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <sample_counter+0x1>
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	79 f4       	brne	.+30     	; 0x552 <__vector_7+0x58>
 534:	ea e7       	ldi	r30, 0x7A	; 122
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	80 64       	ori	r24, 0x40	; 64
 53c:	80 83       	st	Z, r24
 53e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <sample_counter>
 542:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <sample_counter+0x1>
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <sample_counter+0x1>
 54c:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <sample_counter>
 550:	5e c0       	rjmp	.+188    	; 0x60e <__vector_7+0x114>
 552:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <sample_counter>
 556:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <sample_counter+0x1>
 55a:	4f 97       	sbiw	r24, 0x1f	; 31
 55c:	59 f5       	brne	.+86     	; 0x5b4 <__vector_7+0xba>
 55e:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <sample_counter>
 562:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <sample_counter+0x1>
 566:	e0 50       	subi	r30, 0x00	; 0
 568:	ff 4f       	sbci	r31, 0xFF	; 255
 56a:	c0 81       	ld	r28, Z
 56c:	d0 e0       	ldi	r29, 0x00	; 0
 56e:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	60 58       	subi	r22, 0x80	; 128
 576:	71 09       	sbc	r23, r1
 578:	07 2e       	mov	r0, r23
 57a:	00 0c       	add	r0, r0
 57c:	88 0b       	sbc	r24, r24
 57e:	99 0b       	sbc	r25, r25
 580:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
 584:	cc 0f       	add	r28, r28
 586:	dd 1f       	adc	r29, r29
 588:	cc 0f       	add	r28, r28
 58a:	dd 1f       	adc	r29, r29
 58c:	cc 0f       	add	r28, r28
 58e:	dd 1f       	adc	r29, r29
 590:	ce 53       	subi	r28, 0x3E	; 62
 592:	dd 4f       	sbci	r29, 0xFD	; 253
 594:	68 83       	st	Y, r22
 596:	79 83       	std	Y+1, r23	; 0x01
 598:	8a 83       	std	Y+2, r24	; 0x02
 59a:	9b 83       	std	Y+3, r25	; 0x03
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <sample_done>
 5a2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <timer2_stop>
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	9f ef       	ldi	r25, 0xFF	; 255
 5aa:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <sample_counter+0x1>
 5ae:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <sample_counter>
 5b2:	2d c0       	rjmp	.+90     	; 0x60e <__vector_7+0x114>
 5b4:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <sample_counter>
 5b8:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <sample_counter+0x1>
 5bc:	e0 50       	subi	r30, 0x00	; 0
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	c0 81       	ld	r28, Z
 5c2:	d0 e0       	ldi	r29, 0x00	; 0
 5c4:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	60 58       	subi	r22, 0x80	; 128
 5cc:	71 09       	sbc	r23, r1
 5ce:	07 2e       	mov	r0, r23
 5d0:	00 0c       	add	r0, r0
 5d2:	88 0b       	sbc	r24, r24
 5d4:	99 0b       	sbc	r25, r25
 5d6:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
 5da:	cc 0f       	add	r28, r28
 5dc:	dd 1f       	adc	r29, r29
 5de:	cc 0f       	add	r28, r28
 5e0:	dd 1f       	adc	r29, r29
 5e2:	cc 0f       	add	r28, r28
 5e4:	dd 1f       	adc	r29, r29
 5e6:	ce 53       	subi	r28, 0x3E	; 62
 5e8:	dd 4f       	sbci	r29, 0xFD	; 253
 5ea:	68 83       	st	Y, r22
 5ec:	79 83       	std	Y+1, r23	; 0x01
 5ee:	8a 83       	std	Y+2, r24	; 0x02
 5f0:	9b 83       	std	Y+3, r25	; 0x03
 5f2:	ea e7       	ldi	r30, 0x7A	; 122
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	80 64       	ori	r24, 0x40	; 64
 5fa:	80 83       	st	Z, r24
 5fc:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <sample_counter>
 600:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <sample_counter+0x1>
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <sample_counter+0x1>
 60a:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <sample_counter>
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <render>:
 634:	cf 93       	push	r28
 636:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <render_timer>
 63a:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <render_timer+0x1>
 63e:	28 17       	cp	r18, r24
 640:	39 07       	cpc	r19, r25
 642:	10 f1       	brcs	.+68     	; 0x688 <render+0x54>
 644:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <render_timer+0x1>
 648:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <render_timer>
 64c:	c0 91 98 02 	lds	r28, 0x0298	; 0x800298 <__data_end>
 650:	c0 31       	cpi	r28, 0x10	; 16
 652:	41 f4       	brne	.+16     	; 0x664 <render+0x30>
 654:	6f ef       	ldi	r22, 0xFF	; 255
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	0e 94 30 02 	call	0x460	; 0x460 <send>
 65e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__data_end>
 662:	12 c0       	rjmp	.+36     	; 0x688 <render+0x54>
 664:	ec 2f       	mov	r30, r28
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	0c 2e       	mov	r0, r28
 66e:	02 c0       	rjmp	.+4      	; 0x674 <render+0x40>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	0a 94       	dec	r0
 676:	e2 f7       	brpl	.-8      	; 0x670 <render+0x3c>
 678:	ee 54       	subi	r30, 0x4E	; 78
 67a:	fd 4f       	sbci	r31, 0xFD	; 253
 67c:	80 81       	ld	r24, Z
 67e:	0e 94 30 02 	call	0x460	; 0x460 <send>
 682:	cf 5f       	subi	r28, 0xFF	; 255
 684:	c0 93 98 02 	sts	0x0298, r28	; 0x800298 <__data_end>
 688:	cf 91       	pop	r28
 68a:	08 95       	ret

0000068c <__vector_11>:
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	2f 93       	push	r18
 698:	3f 93       	push	r19
 69a:	4f 93       	push	r20
 69c:	5f 93       	push	r21
 69e:	6f 93       	push	r22
 6a0:	7f 93       	push	r23
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	ef 93       	push	r30
 6ac:	ff 93       	push	r31
 6ae:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <render_timer>
 6b2:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <render_timer+0x1>
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <render_timer+0x1>
 6bc:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <render_timer>
 6c0:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <general_timer>
 6c4:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <general_timer+0x1>
 6c8:	a0 91 aa 02 	lds	r26, 0x02AA	; 0x8002aa <general_timer+0x2>
 6cc:	b0 91 ab 02 	lds	r27, 0x02AB	; 0x8002ab <general_timer+0x3>
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	a1 1d       	adc	r26, r1
 6d4:	b1 1d       	adc	r27, r1
 6d6:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <general_timer>
 6da:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <general_timer+0x1>
 6de:	a0 93 aa 02 	sts	0x02AA, r26	; 0x8002aa <general_timer+0x2>
 6e2:	b0 93 ab 02 	sts	0x02AB, r27	; 0x8002ab <general_timer+0x3>
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 1a 03 	call	0x634	; 0x634 <render>
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	9f 91       	pop	r25
 6f8:	8f 91       	pop	r24
 6fa:	7f 91       	pop	r23
 6fc:	6f 91       	pop	r22
 6fe:	5f 91       	pop	r21
 700:	4f 91       	pop	r20
 702:	3f 91       	pop	r19
 704:	2f 91       	pop	r18
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <demo>:
 710:	e2 eb       	ldi	r30, 0xB2	; 178
 712:	f2 e0       	ldi	r31, 0x02	; 2
 714:	9f ef       	ldi	r25, 0xFF	; 255
 716:	97 87       	std	Z+15, r25	; 0x0f
 718:	80 e9       	ldi	r24, 0x90	; 144
 71a:	86 87       	std	Z+14, r24	; 0x0e
 71c:	85 87       	std	Z+13, r24	; 0x0d
 71e:	84 87       	std	Z+12, r24	; 0x0c
 720:	92 87       	std	Z+10, r25	; 0x0a
 722:	81 87       	std	Z+9, r24	; 0x09
 724:	80 87       	std	Z+8, r24	; 0x08
 726:	87 83       	std	Z+7, r24	; 0x07
 728:	80 e8       	ldi	r24, 0x80	; 128
 72a:	85 83       	std	Z+5, r24	; 0x05
 72c:	84 83       	std	Z+4, r24	; 0x04
 72e:	93 83       	std	Z+3, r25	; 0x03
 730:	82 83       	std	Z+2, r24	; 0x02
 732:	81 83       	std	Z+1, r24	; 0x01
 734:	08 95       	ret

00000736 <init_adc>:
 736:	aa e7       	ldi	r26, 0x7A	; 122
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	8c 91       	ld	r24, X
 73c:	85 68       	ori	r24, 0x85	; 133
 73e:	8c 93       	st	X, r24
 740:	ec e7       	ldi	r30, 0x7C	; 124
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	90 81       	ld	r25, Z
 748:	80 7f       	andi	r24, 0xF0	; 240
 74a:	89 2b       	or	r24, r25
 74c:	80 83       	st	Z, r24
 74e:	80 81       	ld	r24, Z
 750:	80 62       	ori	r24, 0x20	; 32
 752:	80 83       	st	Z, r24
 754:	8c 91       	ld	r24, X
 756:	80 64       	ori	r24, 0x40	; 64
 758:	8c 93       	st	X, r24
 75a:	ea e7       	ldi	r30, 0x7A	; 122
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	86 fd       	sbrc	r24, 6
 762:	fd cf       	rjmp	.-6      	; 0x75e <init_adc+0x28>
 764:	08 95       	ret

00000766 <columns>:
 766:	dc 01       	movw	r26, r24
 768:	50 96       	adiw	r26, 0x10	; 16
 76a:	e2 eb       	ldi	r30, 0xB2	; 178
 76c:	f2 e0       	ldi	r31, 0x02	; 2
 76e:	42 ec       	ldi	r20, 0xC2	; 194
 770:	52 e0       	ldi	r21, 0x02	; 2
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	9c 01       	movw	r18, r24
 778:	0e 90       	ld	r0, -X
 77a:	02 c0       	rjmp	.+4      	; 0x780 <columns+0x1a>
 77c:	22 0f       	add	r18, r18
 77e:	33 1f       	adc	r19, r19
 780:	0a 94       	dec	r0
 782:	e2 f7       	brpl	.-8      	; 0x77c <columns+0x16>
 784:	21 50       	subi	r18, 0x01	; 1
 786:	21 93       	st	Z+, r18
 788:	e4 17       	cp	r30, r20
 78a:	f5 07       	cpc	r31, r21
 78c:	a1 f7       	brne	.-24     	; 0x776 <columns+0x10>
 78e:	08 95       	ret

00000790 <main>:
			frame[i] = frame[i] >> 1; 
		}
	}
}
int main(){
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	a0 97       	sbiw	r28, 0x20	; 32
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	f8 94       	cli
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	cd bf       	out	0x3d, r28	; 61
	/*Variable initialization */
	sample_counter = -1; 	
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	9f ef       	ldi	r25, 0xFF	; 255
 7a8:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <sample_counter+0x1>
 7ac:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <sample_counter>
	
	/* Pin initialization */ 
    DDRB |= (1 << PB3) | (1 << PB5);
 7b0:	84 b1       	in	r24, 0x04	; 4
 7b2:	88 62       	ori	r24, 0x28	; 40
 7b4:	84 b9       	out	0x04, r24	; 4
    DDRB |= ( 1 << PB2 );
 7b6:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1 << PB2);
 7b8:	2a 98       	cbi	0x05, 2	; 5
    DDRD |=  (1 << DRCLK ) ;
 7ba:	56 9a       	sbi	0x0a, 6	; 10
    spi();
 7bc:	0e 94 26 02 	call	0x44c	; 0x44c <spi>
	
		/* Render Cycle */
	demo();	
 7c0:	0e 94 88 03 	call	0x710	; 0x710 <demo>
	uint8_t column_vec[16] ;
	uint8_t old_column[16] ;
	columns(column_vec);
 7c4:	ce 01       	movw	r24, r28
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	0e 94 b3 03 	call	0x766	; 0x766 <columns>
	init_adc();
 7cc:	0e 94 9b 03 	call	0x736	; 0x736 <init_adc>
	initSerial();
 7d0:	0e 94 1a 02 	call	0x434	; 0x434 <initSerial>
	sei();
 7d4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d6:	8f e9       	ldi	r24, 0x9F	; 159
 7d8:	9f e0       	ldi	r25, 0x0F	; 15
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <main+0x4a>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <main+0x50>
 7e0:	00 00       	nop
	char buffer[20];
	_delay_ms(1);
	timer1();
 7e2:	0e 94 3f 02 	call	0x47e	; 0x47e <timer1>
	timer2();
 7e6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <timer2>

				
			for(uint16_t i = 1; i < N_SAMPLES/2; i++){
					float val = magnitude(sample_vec[i]);
					if(val < max ){
						val = 0; 
 7ea:	31 2c       	mov	r3, r1
 7ec:	21 2c       	mov	r2, r1
	float smoothing; 
	float delta; 
	float c_smooth = 0.8; 
	float max = 2;
    while(1){
			if(sample_done == 1){
 7ee:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sample_done>
 7f2:	81 30       	cpi	r24, 0x01	; 1
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x5e>
 7f6:	0f 2e       	mov	r0, r31
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	cf 2e       	mov	r12, r31
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
 7fe:	df 2e       	mov	r13, r31
 800:	f0 2d       	mov	r31, r0
 802:	e1 2c       	mov	r14, r1
 804:	f1 2c       	mov	r15, r1
			for(int i = 0; i < N_SAMPLES; i++){
				int k = reversed[i];
 806:	d6 01       	movw	r26, r12
 808:	ed 91       	ld	r30, X+
 80a:	6d 01       	movw	r12, r26
				sample_vec[i].real = hanning[k] * sample_vec[i].real;
 80c:	87 01       	movw	r16, r14
 80e:	00 0f       	add	r16, r16
 810:	11 1f       	adc	r17, r17
 812:	00 0f       	add	r16, r16
 814:	11 1f       	adc	r17, r17
 816:	00 0f       	add	r16, r16
 818:	11 1f       	adc	r17, r17
 81a:	0e 53       	subi	r16, 0x3E	; 62
 81c:	1d 4f       	sbci	r17, 0xFD	; 253
 81e:	d8 01       	movw	r26, r16
 820:	6d 91       	ld	r22, X+
 822:	7d 91       	ld	r23, X+
 824:	8d 91       	ld	r24, X+
 826:	9c 91       	ld	r25, X
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	ee 0f       	add	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	e0 5e       	subi	r30, 0xE0	; 224
 834:	fe 4f       	sbci	r31, 0xFE	; 254
 836:	20 81       	ld	r18, Z
 838:	31 81       	ldd	r19, Z+1	; 0x01
 83a:	42 81       	ldd	r20, Z+2	; 0x02
 83c:	53 81       	ldd	r21, Z+3	; 0x03
 83e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 842:	f8 01       	movw	r30, r16
 844:	60 83       	st	Z, r22
 846:	71 83       	std	Z+1, r23	; 0x01
 848:	82 83       	std	Z+2, r24	; 0x02
 84a:	93 83       	std	Z+3, r25	; 0x03
				sample_vec[i].imag = 0; 
 84c:	14 82       	std	Z+4, r1	; 0x04
 84e:	15 82       	std	Z+5, r1	; 0x05
 850:	16 82       	std	Z+6, r1	; 0x06
 852:	17 82       	std	Z+7, r1	; 0x07
	float delta; 
	float c_smooth = 0.8; 
	float max = 2;
    while(1){
			if(sample_done == 1){
			for(int i = 0; i < N_SAMPLES; i++){
 854:	bf ef       	ldi	r27, 0xFF	; 255
 856:	eb 1a       	sub	r14, r27
 858:	fb 0a       	sbc	r15, r27
 85a:	e0 e2       	ldi	r30, 0x20	; 32
 85c:	ee 16       	cp	r14, r30
 85e:	f1 04       	cpc	r15, r1
 860:	91 f6       	brne	.-92     	; 0x806 <main+0x76>
				int k = reversed[i];
				sample_vec[i].real = hanning[k] * sample_vec[i].real;
				sample_vec[i].imag = 0; 
			}
		
		    fft(sample_vec);
 862:	82 ec       	ldi	r24, 0xC2	; 194
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	0e 94 a4 00 	call	0x148	; 0x148 <fft>
 86a:	3e 01       	movw	r6, r28
 86c:	f2 e1       	ldi	r31, 0x12	; 18
 86e:	6f 0e       	add	r6, r31
 870:	71 1c       	adc	r7, r1
 872:	2e 01       	movw	r4, r28
 874:	82 e0       	ldi	r24, 0x02	; 2
 876:	48 0e       	add	r4, r24
 878:	51 1c       	adc	r5, r1

				
			for(uint16_t i = 1; i < N_SAMPLES/2; i++){
 87a:	01 e0       	ldi	r16, 0x01	; 1
 87c:	10 e0       	ldi	r17, 0x00	; 0
					float val = magnitude(sample_vec[i]);
 87e:	f8 01       	movw	r30, r16
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	ee 0f       	add	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	ee 53       	subi	r30, 0x3E	; 62
 88e:	fd 4f       	sbci	r31, 0xFD	; 253
 890:	20 81       	ld	r18, Z
 892:	31 81       	ldd	r19, Z+1	; 0x01
 894:	42 81       	ldd	r20, Z+2	; 0x02
 896:	53 81       	ldd	r21, Z+3	; 0x03
 898:	64 81       	ldd	r22, Z+4	; 0x04
 89a:	75 81       	ldd	r23, Z+5	; 0x05
 89c:	86 81       	ldd	r24, Z+6	; 0x06
 89e:	97 81       	ldd	r25, Z+7	; 0x07
 8a0:	0e 94 53 00 	call	0xa6	; 0xa6 <magnitude>
 8a4:	c6 2e       	mov	r12, r22
 8a6:	d7 2e       	mov	r13, r23
 8a8:	e8 2e       	mov	r14, r24
 8aa:	f9 2e       	mov	r15, r25
					if(val < max ){
 8ac:	20 e0       	ldi	r18, 0x00	; 0
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	40 e0       	ldi	r20, 0x00	; 0
 8b2:	50 e4       	ldi	r21, 0x40	; 64
 8b4:	0e 94 0a 05 	call	0xa14	; 0xa14 <__cmpsf2>
 8b8:	88 23       	and	r24, r24
 8ba:	24 f4       	brge	.+8      	; 0x8c4 <main+0x134>
						val = 0; 
 8bc:	c3 2c       	mov	r12, r3
 8be:	d2 2c       	mov	r13, r2
 8c0:	e1 2c       	mov	r14, r1
 8c2:	f1 2c       	mov	r15, r1
					}
					smoothing =c_smooth*old_column[i] + (1-c_smooth)* val;
 8c4:	d3 01       	movw	r26, r6
 8c6:	6c 91       	ld	r22, X
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
 8d2:	2d ec       	ldi	r18, 0xCD	; 205
 8d4:	3c ec       	ldi	r19, 0xCC	; 204
 8d6:	4c e4       	ldi	r20, 0x4C	; 76
 8d8:	5f e3       	ldi	r21, 0x3F	; 63
 8da:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 8de:	4b 01       	movw	r8, r22
 8e0:	5c 01       	movw	r10, r24
 8e2:	2c ec       	ldi	r18, 0xCC	; 204
 8e4:	3c ec       	ldi	r19, 0xCC	; 204
 8e6:	4c e4       	ldi	r20, 0x4C	; 76
 8e8:	5e e3       	ldi	r21, 0x3E	; 62
 8ea:	6c 2d       	mov	r22, r12
 8ec:	7d 2d       	mov	r23, r13
 8ee:	8e 2d       	mov	r24, r14
 8f0:	9f 2d       	mov	r25, r15
 8f2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 8f6:	9b 01       	movw	r18, r22
 8f8:	ac 01       	movw	r20, r24
 8fa:	c5 01       	movw	r24, r10
 8fc:	b4 01       	movw	r22, r8
 8fe:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3>
					old_column[i]  = column_vec[i];
 902:	f2 01       	movw	r30, r4
 904:	20 81       	ld	r18, Z
 906:	d3 01       	movw	r26, r6
 908:	2d 93       	st	X+, r18
 90a:	3d 01       	movw	r6, r26
					column_vec[i] = smoothing;
 90c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
 910:	f2 01       	movw	r30, r4
 912:	61 93       	st	Z+, r22
 914:	2f 01       	movw	r4, r30
			}
		
		    fft(sample_vec);

				
			for(uint16_t i = 1; i < N_SAMPLES/2; i++){
 916:	0f 5f       	subi	r16, 0xFF	; 255
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	00 31       	cpi	r16, 0x10	; 16
 91c:	11 05       	cpc	r17, r1
 91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0x23>
 920:	ae cf       	rjmp	.-164    	; 0x87e <main+0xee>
					}
					smoothing =c_smooth*old_column[i] + (1-c_smooth)* val;
					old_column[i]  = column_vec[i];
					column_vec[i] = smoothing;
			}
			column_vec[1] = column_vec[1]/2;
 922:	8a 81       	ldd	r24, Y+2	; 0x02
 924:	86 95       	lsr	r24
 926:	8a 83       	std	Y+2, r24	; 0x02
			columns(column_vec);
 928:	ce 01       	movw	r24, r28
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	0e 94 b3 03 	call	0x766	; 0x766 <columns>
			sample_done = 0; 
 930:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <sample_done>
			timer2_start();	
 934:	0e 94 77 02 	call	0x4ee	; 0x4ee <timer2_start>
 938:	5a cf       	rjmp	.-332    	; 0x7ee <main+0x5e>

0000093a <__subsf3>:
 93a:	50 58       	subi	r21, 0x80	; 128

0000093c <__addsf3>:
 93c:	bb 27       	eor	r27, r27
 93e:	aa 27       	eor	r26, r26
 940:	0e 94 b5 04 	call	0x96a	; 0x96a <__addsf3x>
 944:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_round>
 948:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscA>
 94c:	38 f0       	brcs	.+14     	; 0x95c <__addsf3+0x20>
 94e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_pscB>
 952:	20 f0       	brcs	.+8      	; 0x95c <__addsf3+0x20>
 954:	39 f4       	brne	.+14     	; 0x964 <__addsf3+0x28>
 956:	9f 3f       	cpi	r25, 0xFF	; 255
 958:	19 f4       	brne	.+6      	; 0x960 <__addsf3+0x24>
 95a:	26 f4       	brtc	.+8      	; 0x964 <__addsf3+0x28>
 95c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>
 960:	0e f4       	brtc	.+2      	; 0x964 <__addsf3+0x28>
 962:	e0 95       	com	r30
 964:	e7 fb       	bst	r30, 7
 966:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>

0000096a <__addsf3x>:
 96a:	e9 2f       	mov	r30, r25
 96c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_split3>
 970:	58 f3       	brcs	.-42     	; 0x948 <__addsf3+0xc>
 972:	ba 17       	cp	r27, r26
 974:	62 07       	cpc	r22, r18
 976:	73 07       	cpc	r23, r19
 978:	84 07       	cpc	r24, r20
 97a:	95 07       	cpc	r25, r21
 97c:	20 f0       	brcs	.+8      	; 0x986 <__addsf3x+0x1c>
 97e:	79 f4       	brne	.+30     	; 0x99e <__addsf3x+0x34>
 980:	a6 f5       	brtc	.+104    	; 0x9ea <__addsf3x+0x80>
 982:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_zero>
 986:	0e f4       	brtc	.+2      	; 0x98a <__addsf3x+0x20>
 988:	e0 95       	com	r30
 98a:	0b 2e       	mov	r0, r27
 98c:	ba 2f       	mov	r27, r26
 98e:	a0 2d       	mov	r26, r0
 990:	0b 01       	movw	r0, r22
 992:	b9 01       	movw	r22, r18
 994:	90 01       	movw	r18, r0
 996:	0c 01       	movw	r0, r24
 998:	ca 01       	movw	r24, r20
 99a:	a0 01       	movw	r20, r0
 99c:	11 24       	eor	r1, r1
 99e:	ff 27       	eor	r31, r31
 9a0:	59 1b       	sub	r21, r25
 9a2:	99 f0       	breq	.+38     	; 0x9ca <__addsf3x+0x60>
 9a4:	59 3f       	cpi	r21, 0xF9	; 249
 9a6:	50 f4       	brcc	.+20     	; 0x9bc <__addsf3x+0x52>
 9a8:	50 3e       	cpi	r21, 0xE0	; 224
 9aa:	68 f1       	brcs	.+90     	; 0xa06 <__addsf3x+0x9c>
 9ac:	1a 16       	cp	r1, r26
 9ae:	f0 40       	sbci	r31, 0x00	; 0
 9b0:	a2 2f       	mov	r26, r18
 9b2:	23 2f       	mov	r18, r19
 9b4:	34 2f       	mov	r19, r20
 9b6:	44 27       	eor	r20, r20
 9b8:	58 5f       	subi	r21, 0xF8	; 248
 9ba:	f3 cf       	rjmp	.-26     	; 0x9a2 <__addsf3x+0x38>
 9bc:	46 95       	lsr	r20
 9be:	37 95       	ror	r19
 9c0:	27 95       	ror	r18
 9c2:	a7 95       	ror	r26
 9c4:	f0 40       	sbci	r31, 0x00	; 0
 9c6:	53 95       	inc	r21
 9c8:	c9 f7       	brne	.-14     	; 0x9bc <__addsf3x+0x52>
 9ca:	7e f4       	brtc	.+30     	; 0x9ea <__addsf3x+0x80>
 9cc:	1f 16       	cp	r1, r31
 9ce:	ba 0b       	sbc	r27, r26
 9d0:	62 0b       	sbc	r22, r18
 9d2:	73 0b       	sbc	r23, r19
 9d4:	84 0b       	sbc	r24, r20
 9d6:	ba f0       	brmi	.+46     	; 0xa06 <__addsf3x+0x9c>
 9d8:	91 50       	subi	r25, 0x01	; 1
 9da:	a1 f0       	breq	.+40     	; 0xa04 <__addsf3x+0x9a>
 9dc:	ff 0f       	add	r31, r31
 9de:	bb 1f       	adc	r27, r27
 9e0:	66 1f       	adc	r22, r22
 9e2:	77 1f       	adc	r23, r23
 9e4:	88 1f       	adc	r24, r24
 9e6:	c2 f7       	brpl	.-16     	; 0x9d8 <__addsf3x+0x6e>
 9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__addsf3x+0x9c>
 9ea:	ba 0f       	add	r27, r26
 9ec:	62 1f       	adc	r22, r18
 9ee:	73 1f       	adc	r23, r19
 9f0:	84 1f       	adc	r24, r20
 9f2:	48 f4       	brcc	.+18     	; 0xa06 <__addsf3x+0x9c>
 9f4:	87 95       	ror	r24
 9f6:	77 95       	ror	r23
 9f8:	67 95       	ror	r22
 9fa:	b7 95       	ror	r27
 9fc:	f7 95       	ror	r31
 9fe:	9e 3f       	cpi	r25, 0xFE	; 254
 a00:	08 f0       	brcs	.+2      	; 0xa04 <__addsf3x+0x9a>
 a02:	b0 cf       	rjmp	.-160    	; 0x964 <__addsf3+0x28>
 a04:	93 95       	inc	r25
 a06:	88 0f       	add	r24, r24
 a08:	08 f0       	brcs	.+2      	; 0xa0c <__addsf3x+0xa2>
 a0a:	99 27       	eor	r25, r25
 a0c:	ee 0f       	add	r30, r30
 a0e:	97 95       	ror	r25
 a10:	87 95       	ror	r24
 a12:	08 95       	ret

00000a14 <__cmpsf2>:
 a14:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__fp_cmp>
 a18:	08 f4       	brcc	.+2      	; 0xa1c <__cmpsf2+0x8>
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	08 95       	ret

00000a1e <__fixunssfsi>:
 a1e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_splitA>
 a22:	88 f0       	brcs	.+34     	; 0xa46 <__fixunssfsi+0x28>
 a24:	9f 57       	subi	r25, 0x7F	; 127
 a26:	98 f0       	brcs	.+38     	; 0xa4e <__fixunssfsi+0x30>
 a28:	b9 2f       	mov	r27, r25
 a2a:	99 27       	eor	r25, r25
 a2c:	b7 51       	subi	r27, 0x17	; 23
 a2e:	b0 f0       	brcs	.+44     	; 0xa5c <__fixunssfsi+0x3e>
 a30:	e1 f0       	breq	.+56     	; 0xa6a <__fixunssfsi+0x4c>
 a32:	66 0f       	add	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	1a f0       	brmi	.+6      	; 0xa42 <__fixunssfsi+0x24>
 a3c:	ba 95       	dec	r27
 a3e:	c9 f7       	brne	.-14     	; 0xa32 <__fixunssfsi+0x14>
 a40:	14 c0       	rjmp	.+40     	; 0xa6a <__fixunssfsi+0x4c>
 a42:	b1 30       	cpi	r27, 0x01	; 1
 a44:	91 f0       	breq	.+36     	; 0xa6a <__fixunssfsi+0x4c>
 a46:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_zero>
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	08 95       	ret
 a4e:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_zero>
 a52:	67 2f       	mov	r22, r23
 a54:	78 2f       	mov	r23, r24
 a56:	88 27       	eor	r24, r24
 a58:	b8 5f       	subi	r27, 0xF8	; 248
 a5a:	39 f0       	breq	.+14     	; 0xa6a <__fixunssfsi+0x4c>
 a5c:	b9 3f       	cpi	r27, 0xF9	; 249
 a5e:	cc f3       	brlt	.-14     	; 0xa52 <__fixunssfsi+0x34>
 a60:	86 95       	lsr	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b3 95       	inc	r27
 a68:	d9 f7       	brne	.-10     	; 0xa60 <__fixunssfsi+0x42>
 a6a:	3e f4       	brtc	.+14     	; 0xa7a <__fixunssfsi+0x5c>
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	08 95       	ret

00000a7c <__floatunsisf>:
 a7c:	e8 94       	clt
 a7e:	09 c0       	rjmp	.+18     	; 0xa92 <__floatsisf+0x12>

00000a80 <__floatsisf>:
 a80:	97 fb       	bst	r25, 7
 a82:	3e f4       	brtc	.+14     	; 0xa92 <__floatsisf+0x12>
 a84:	90 95       	com	r25
 a86:	80 95       	com	r24
 a88:	70 95       	com	r23
 a8a:	61 95       	neg	r22
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	99 23       	and	r25, r25
 a94:	a9 f0       	breq	.+42     	; 0xac0 <__floatsisf+0x40>
 a96:	f9 2f       	mov	r31, r25
 a98:	96 e9       	ldi	r25, 0x96	; 150
 a9a:	bb 27       	eor	r27, r27
 a9c:	93 95       	inc	r25
 a9e:	f6 95       	lsr	r31
 aa0:	87 95       	ror	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f1 11       	cpse	r31, r1
 aaa:	f8 cf       	rjmp	.-16     	; 0xa9c <__floatsisf+0x1c>
 aac:	fa f4       	brpl	.+62     	; 0xaec <__floatsisf+0x6c>
 aae:	bb 0f       	add	r27, r27
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__floatsisf+0x36>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	1b c0       	rjmp	.+54     	; 0xaec <__floatsisf+0x6c>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	16 c0       	rjmp	.+44     	; 0xaec <__floatsisf+0x6c>
 ac0:	88 23       	and	r24, r24
 ac2:	11 f0       	breq	.+4      	; 0xac8 <__floatsisf+0x48>
 ac4:	96 e9       	ldi	r25, 0x96	; 150
 ac6:	11 c0       	rjmp	.+34     	; 0xaea <__floatsisf+0x6a>
 ac8:	77 23       	and	r23, r23
 aca:	21 f0       	breq	.+8      	; 0xad4 <__floatsisf+0x54>
 acc:	9e e8       	ldi	r25, 0x8E	; 142
 ace:	87 2f       	mov	r24, r23
 ad0:	76 2f       	mov	r23, r22
 ad2:	05 c0       	rjmp	.+10     	; 0xade <__floatsisf+0x5e>
 ad4:	66 23       	and	r22, r22
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <__floatsisf+0x74>
 ad8:	96 e8       	ldi	r25, 0x86	; 134
 ada:	86 2f       	mov	r24, r22
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	2a f0       	brmi	.+10     	; 0xaec <__floatsisf+0x6c>
 ae2:	9a 95       	dec	r25
 ae4:	66 0f       	add	r22, r22
 ae6:	77 1f       	adc	r23, r23
 ae8:	88 1f       	adc	r24, r24
 aea:	da f7       	brpl	.-10     	; 0xae2 <__floatsisf+0x62>
 aec:	88 0f       	add	r24, r24
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__fp_cmp>:
 af6:	99 0f       	add	r25, r25
 af8:	00 08       	sbc	r0, r0
 afa:	55 0f       	add	r21, r21
 afc:	aa 0b       	sbc	r26, r26
 afe:	e0 e8       	ldi	r30, 0x80	; 128
 b00:	fe ef       	ldi	r31, 0xFE	; 254
 b02:	16 16       	cp	r1, r22
 b04:	17 06       	cpc	r1, r23
 b06:	e8 07       	cpc	r30, r24
 b08:	f9 07       	cpc	r31, r25
 b0a:	c0 f0       	brcs	.+48     	; 0xb3c <__fp_cmp+0x46>
 b0c:	12 16       	cp	r1, r18
 b0e:	13 06       	cpc	r1, r19
 b10:	e4 07       	cpc	r30, r20
 b12:	f5 07       	cpc	r31, r21
 b14:	98 f0       	brcs	.+38     	; 0xb3c <__fp_cmp+0x46>
 b16:	62 1b       	sub	r22, r18
 b18:	73 0b       	sbc	r23, r19
 b1a:	84 0b       	sbc	r24, r20
 b1c:	95 0b       	sbc	r25, r21
 b1e:	39 f4       	brne	.+14     	; 0xb2e <__fp_cmp+0x38>
 b20:	0a 26       	eor	r0, r26
 b22:	61 f0       	breq	.+24     	; 0xb3c <__fp_cmp+0x46>
 b24:	23 2b       	or	r18, r19
 b26:	24 2b       	or	r18, r20
 b28:	25 2b       	or	r18, r21
 b2a:	21 f4       	brne	.+8      	; 0xb34 <__fp_cmp+0x3e>
 b2c:	08 95       	ret
 b2e:	0a 26       	eor	r0, r26
 b30:	09 f4       	brne	.+2      	; 0xb34 <__fp_cmp+0x3e>
 b32:	a1 40       	sbci	r26, 0x01	; 1
 b34:	a6 95       	lsr	r26
 b36:	8f ef       	ldi	r24, 0xFF	; 255
 b38:	81 1d       	adc	r24, r1
 b3a:	81 1d       	adc	r24, r1
 b3c:	08 95       	ret

00000b3e <__fp_inf>:
 b3e:	97 f9       	bld	r25, 7
 b40:	9f 67       	ori	r25, 0x7F	; 127
 b42:	80 e8       	ldi	r24, 0x80	; 128
 b44:	70 e0       	ldi	r23, 0x00	; 0
 b46:	60 e0       	ldi	r22, 0x00	; 0
 b48:	08 95       	ret

00000b4a <__fp_nan>:
 b4a:	9f ef       	ldi	r25, 0xFF	; 255
 b4c:	80 ec       	ldi	r24, 0xC0	; 192
 b4e:	08 95       	ret

00000b50 <__fp_pscA>:
 b50:	00 24       	eor	r0, r0
 b52:	0a 94       	dec	r0
 b54:	16 16       	cp	r1, r22
 b56:	17 06       	cpc	r1, r23
 b58:	18 06       	cpc	r1, r24
 b5a:	09 06       	cpc	r0, r25
 b5c:	08 95       	ret

00000b5e <__fp_pscB>:
 b5e:	00 24       	eor	r0, r0
 b60:	0a 94       	dec	r0
 b62:	12 16       	cp	r1, r18
 b64:	13 06       	cpc	r1, r19
 b66:	14 06       	cpc	r1, r20
 b68:	05 06       	cpc	r0, r21
 b6a:	08 95       	ret

00000b6c <__fp_round>:
 b6c:	09 2e       	mov	r0, r25
 b6e:	03 94       	inc	r0
 b70:	00 0c       	add	r0, r0
 b72:	11 f4       	brne	.+4      	; 0xb78 <__fp_round+0xc>
 b74:	88 23       	and	r24, r24
 b76:	52 f0       	brmi	.+20     	; 0xb8c <__fp_round+0x20>
 b78:	bb 0f       	add	r27, r27
 b7a:	40 f4       	brcc	.+16     	; 0xb8c <__fp_round+0x20>
 b7c:	bf 2b       	or	r27, r31
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__fp_round+0x18>
 b80:	60 ff       	sbrs	r22, 0
 b82:	04 c0       	rjmp	.+8      	; 0xb8c <__fp_round+0x20>
 b84:	6f 5f       	subi	r22, 0xFF	; 255
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	08 95       	ret

00000b8e <__fp_split3>:
 b8e:	57 fd       	sbrc	r21, 7
 b90:	90 58       	subi	r25, 0x80	; 128
 b92:	44 0f       	add	r20, r20
 b94:	55 1f       	adc	r21, r21
 b96:	59 f0       	breq	.+22     	; 0xbae <__fp_splitA+0x10>
 b98:	5f 3f       	cpi	r21, 0xFF	; 255
 b9a:	71 f0       	breq	.+28     	; 0xbb8 <__fp_splitA+0x1a>
 b9c:	47 95       	ror	r20

00000b9e <__fp_splitA>:
 b9e:	88 0f       	add	r24, r24
 ba0:	97 fb       	bst	r25, 7
 ba2:	99 1f       	adc	r25, r25
 ba4:	61 f0       	breq	.+24     	; 0xbbe <__fp_splitA+0x20>
 ba6:	9f 3f       	cpi	r25, 0xFF	; 255
 ba8:	79 f0       	breq	.+30     	; 0xbc8 <__fp_splitA+0x2a>
 baa:	87 95       	ror	r24
 bac:	08 95       	ret
 bae:	12 16       	cp	r1, r18
 bb0:	13 06       	cpc	r1, r19
 bb2:	14 06       	cpc	r1, r20
 bb4:	55 1f       	adc	r21, r21
 bb6:	f2 cf       	rjmp	.-28     	; 0xb9c <__fp_split3+0xe>
 bb8:	46 95       	lsr	r20
 bba:	f1 df       	rcall	.-30     	; 0xb9e <__fp_splitA>
 bbc:	08 c0       	rjmp	.+16     	; 0xbce <__fp_splitA+0x30>
 bbe:	16 16       	cp	r1, r22
 bc0:	17 06       	cpc	r1, r23
 bc2:	18 06       	cpc	r1, r24
 bc4:	99 1f       	adc	r25, r25
 bc6:	f1 cf       	rjmp	.-30     	; 0xbaa <__fp_splitA+0xc>
 bc8:	86 95       	lsr	r24
 bca:	71 05       	cpc	r23, r1
 bcc:	61 05       	cpc	r22, r1
 bce:	08 94       	sec
 bd0:	08 95       	ret

00000bd2 <__fp_zero>:
 bd2:	e8 94       	clt

00000bd4 <__fp_szero>:
 bd4:	bb 27       	eor	r27, r27
 bd6:	66 27       	eor	r22, r22
 bd8:	77 27       	eor	r23, r23
 bda:	cb 01       	movw	r24, r22
 bdc:	97 f9       	bld	r25, 7
 bde:	08 95       	ret

00000be0 <__mulsf3>:
 be0:	0e 94 03 06 	call	0xc06	; 0xc06 <__mulsf3x>
 be4:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_round>
 be8:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscA>
 bec:	38 f0       	brcs	.+14     	; 0xbfc <__mulsf3+0x1c>
 bee:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_pscB>
 bf2:	20 f0       	brcs	.+8      	; 0xbfc <__mulsf3+0x1c>
 bf4:	95 23       	and	r25, r21
 bf6:	11 f0       	breq	.+4      	; 0xbfc <__mulsf3+0x1c>
 bf8:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 bfc:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>
 c00:	11 24       	eor	r1, r1
 c02:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>

00000c06 <__mulsf3x>:
 c06:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_split3>
 c0a:	70 f3       	brcs	.-36     	; 0xbe8 <__mulsf3+0x8>

00000c0c <__mulsf3_pse>:
 c0c:	95 9f       	mul	r25, r21
 c0e:	c1 f3       	breq	.-16     	; 0xc00 <__mulsf3+0x20>
 c10:	95 0f       	add	r25, r21
 c12:	50 e0       	ldi	r21, 0x00	; 0
 c14:	55 1f       	adc	r21, r21
 c16:	62 9f       	mul	r22, r18
 c18:	f0 01       	movw	r30, r0
 c1a:	72 9f       	mul	r23, r18
 c1c:	bb 27       	eor	r27, r27
 c1e:	f0 0d       	add	r31, r0
 c20:	b1 1d       	adc	r27, r1
 c22:	63 9f       	mul	r22, r19
 c24:	aa 27       	eor	r26, r26
 c26:	f0 0d       	add	r31, r0
 c28:	b1 1d       	adc	r27, r1
 c2a:	aa 1f       	adc	r26, r26
 c2c:	64 9f       	mul	r22, r20
 c2e:	66 27       	eor	r22, r22
 c30:	b0 0d       	add	r27, r0
 c32:	a1 1d       	adc	r26, r1
 c34:	66 1f       	adc	r22, r22
 c36:	82 9f       	mul	r24, r18
 c38:	22 27       	eor	r18, r18
 c3a:	b0 0d       	add	r27, r0
 c3c:	a1 1d       	adc	r26, r1
 c3e:	62 1f       	adc	r22, r18
 c40:	73 9f       	mul	r23, r19
 c42:	b0 0d       	add	r27, r0
 c44:	a1 1d       	adc	r26, r1
 c46:	62 1f       	adc	r22, r18
 c48:	83 9f       	mul	r24, r19
 c4a:	a0 0d       	add	r26, r0
 c4c:	61 1d       	adc	r22, r1
 c4e:	22 1f       	adc	r18, r18
 c50:	74 9f       	mul	r23, r20
 c52:	33 27       	eor	r19, r19
 c54:	a0 0d       	add	r26, r0
 c56:	61 1d       	adc	r22, r1
 c58:	23 1f       	adc	r18, r19
 c5a:	84 9f       	mul	r24, r20
 c5c:	60 0d       	add	r22, r0
 c5e:	21 1d       	adc	r18, r1
 c60:	82 2f       	mov	r24, r18
 c62:	76 2f       	mov	r23, r22
 c64:	6a 2f       	mov	r22, r26
 c66:	11 24       	eor	r1, r1
 c68:	9f 57       	subi	r25, 0x7F	; 127
 c6a:	50 40       	sbci	r21, 0x00	; 0
 c6c:	9a f0       	brmi	.+38     	; 0xc94 <__mulsf3_pse+0x88>
 c6e:	f1 f0       	breq	.+60     	; 0xcac <__mulsf3_pse+0xa0>
 c70:	88 23       	and	r24, r24
 c72:	4a f0       	brmi	.+18     	; 0xc86 <__mulsf3_pse+0x7a>
 c74:	ee 0f       	add	r30, r30
 c76:	ff 1f       	adc	r31, r31
 c78:	bb 1f       	adc	r27, r27
 c7a:	66 1f       	adc	r22, r22
 c7c:	77 1f       	adc	r23, r23
 c7e:	88 1f       	adc	r24, r24
 c80:	91 50       	subi	r25, 0x01	; 1
 c82:	50 40       	sbci	r21, 0x00	; 0
 c84:	a9 f7       	brne	.-22     	; 0xc70 <__mulsf3_pse+0x64>
 c86:	9e 3f       	cpi	r25, 0xFE	; 254
 c88:	51 05       	cpc	r21, r1
 c8a:	80 f0       	brcs	.+32     	; 0xcac <__mulsf3_pse+0xa0>
 c8c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 c90:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 c94:	5f 3f       	cpi	r21, 0xFF	; 255
 c96:	e4 f3       	brlt	.-8      	; 0xc90 <__mulsf3_pse+0x84>
 c98:	98 3e       	cpi	r25, 0xE8	; 232
 c9a:	d4 f3       	brlt	.-12     	; 0xc90 <__mulsf3_pse+0x84>
 c9c:	86 95       	lsr	r24
 c9e:	77 95       	ror	r23
 ca0:	67 95       	ror	r22
 ca2:	b7 95       	ror	r27
 ca4:	f7 95       	ror	r31
 ca6:	e7 95       	ror	r30
 ca8:	9f 5f       	subi	r25, 0xFF	; 255
 caa:	c1 f7       	brne	.-16     	; 0xc9c <__mulsf3_pse+0x90>
 cac:	fe 2b       	or	r31, r30
 cae:	88 0f       	add	r24, r24
 cb0:	91 1d       	adc	r25, r1
 cb2:	96 95       	lsr	r25
 cb4:	87 95       	ror	r24
 cb6:	97 f9       	bld	r25, 7
 cb8:	08 95       	ret
 cba:	19 f4       	brne	.+6      	; 0xcc2 <__mulsf3_pse+0xb6>
 cbc:	16 f4       	brtc	.+4      	; 0xcc2 <__mulsf3_pse+0xb6>
 cbe:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>
 cc2:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_mpack>

00000cc6 <sqrt>:
 cc6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_splitA>
 cca:	b8 f3       	brcs	.-18     	; 0xcba <__mulsf3_pse+0xae>
 ccc:	99 23       	and	r25, r25
 cce:	c9 f3       	breq	.-14     	; 0xcc2 <__mulsf3_pse+0xb6>
 cd0:	b6 f3       	brts	.-20     	; 0xcbe <__mulsf3_pse+0xb2>
 cd2:	9f 57       	subi	r25, 0x7F	; 127
 cd4:	55 0b       	sbc	r21, r21
 cd6:	87 ff       	sbrs	r24, 7
 cd8:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_norm2>
 cdc:	00 24       	eor	r0, r0
 cde:	a0 e6       	ldi	r26, 0x60	; 96
 ce0:	40 ea       	ldi	r20, 0xA0	; 160
 ce2:	90 01       	movw	r18, r0
 ce4:	80 58       	subi	r24, 0x80	; 128
 ce6:	56 95       	lsr	r21
 ce8:	97 95       	ror	r25
 cea:	28 f4       	brcc	.+10     	; 0xcf6 <sqrt+0x30>
 cec:	80 5c       	subi	r24, 0xC0	; 192
 cee:	66 0f       	add	r22, r22
 cf0:	77 1f       	adc	r23, r23
 cf2:	88 1f       	adc	r24, r24
 cf4:	20 f0       	brcs	.+8      	; 0xcfe <sqrt+0x38>
 cf6:	26 17       	cp	r18, r22
 cf8:	37 07       	cpc	r19, r23
 cfa:	48 07       	cpc	r20, r24
 cfc:	30 f4       	brcc	.+12     	; 0xd0a <sqrt+0x44>
 cfe:	62 1b       	sub	r22, r18
 d00:	73 0b       	sbc	r23, r19
 d02:	84 0b       	sbc	r24, r20
 d04:	20 29       	or	r18, r0
 d06:	31 29       	or	r19, r1
 d08:	4a 2b       	or	r20, r26
 d0a:	a6 95       	lsr	r26
 d0c:	17 94       	ror	r1
 d0e:	07 94       	ror	r0
 d10:	20 25       	eor	r18, r0
 d12:	31 25       	eor	r19, r1
 d14:	4a 27       	eor	r20, r26
 d16:	58 f7       	brcc	.-42     	; 0xcee <sqrt+0x28>
 d18:	66 0f       	add	r22, r22
 d1a:	77 1f       	adc	r23, r23
 d1c:	88 1f       	adc	r24, r24
 d1e:	20 f0       	brcs	.+8      	; 0xd28 <sqrt+0x62>
 d20:	26 17       	cp	r18, r22
 d22:	37 07       	cpc	r19, r23
 d24:	48 07       	cpc	r20, r24
 d26:	30 f4       	brcc	.+12     	; 0xd34 <sqrt+0x6e>
 d28:	62 0b       	sbc	r22, r18
 d2a:	73 0b       	sbc	r23, r19
 d2c:	84 0b       	sbc	r24, r20
 d2e:	20 0d       	add	r18, r0
 d30:	31 1d       	adc	r19, r1
 d32:	41 1d       	adc	r20, r1
 d34:	a0 95       	com	r26
 d36:	81 f7       	brne	.-32     	; 0xd18 <sqrt+0x52>
 d38:	b9 01       	movw	r22, r18
 d3a:	84 2f       	mov	r24, r20
 d3c:	91 58       	subi	r25, 0x81	; 129
 d3e:	88 0f       	add	r24, r24
 d40:	96 95       	lsr	r25
 d42:	87 95       	ror	r24
 d44:	08 95       	ret

00000d46 <__fp_mpack>:
 d46:	9f 3f       	cpi	r25, 0xFF	; 255
 d48:	31 f0       	breq	.+12     	; 0xd56 <__fp_mpack_finite+0xc>

00000d4a <__fp_mpack_finite>:
 d4a:	91 50       	subi	r25, 0x01	; 1
 d4c:	20 f4       	brcc	.+8      	; 0xd56 <__fp_mpack_finite+0xc>
 d4e:	87 95       	ror	r24
 d50:	77 95       	ror	r23
 d52:	67 95       	ror	r22
 d54:	b7 95       	ror	r27
 d56:	88 0f       	add	r24, r24
 d58:	91 1d       	adc	r25, r1
 d5a:	96 95       	lsr	r25
 d5c:	87 95       	ror	r24
 d5e:	97 f9       	bld	r25, 7
 d60:	08 95       	ret

00000d62 <__fp_norm2>:
 d62:	91 50       	subi	r25, 0x01	; 1
 d64:	50 40       	sbci	r21, 0x00	; 0
 d66:	66 0f       	add	r22, r22
 d68:	77 1f       	adc	r23, r23
 d6a:	88 1f       	adc	r24, r24
 d6c:	d2 f7       	brpl	.-12     	; 0xd62 <__fp_norm2>
 d6e:	08 95       	ret

00000d70 <_exit>:
 d70:	f8 94       	cli

00000d72 <__stop_program>:
 d72:	ff cf       	rjmp	.-2      	; 0xd72 <__stop_program>
