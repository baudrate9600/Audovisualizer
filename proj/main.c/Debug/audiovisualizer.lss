
audiovisualizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000320  00800100  00000e14  00000ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011c  00800420  00800420  000011c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b3  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  0000281b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4f  00000000  00000000  0000337f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00003dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  0000431c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001531  00000000  00000000  0000491b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_7>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_11>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <main+0x11e>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	14 e0       	ldi	r17, 0x04	; 4
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e4 e1       	ldi	r30, 0x14	; 20
  d6:	fe e0       	ldi	r31, 0x0E	; 14
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a0 32       	cpi	r26, 0x20	; 32
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	a0 e2       	ldi	r26, 0x20	; 32
  e8:	b4 e0       	ldi	r27, 0x04	; 4
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ac 33       	cpi	r26, 0x3C	; 60
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
  f8:	0c 94 08 07 	jmp	0xe10	; 0xe10 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <magnitude>:
float magnitude(scomplex x){
	return sqrt( x.real*x.real + x.imag*x.imag);
}
int imagnitude(scomplex x){
	return (int) sqrt(x.real*x.real + x.imag*x.imag);
}
 100:	4f 92       	push	r4
 102:	5f 92       	push	r5
 104:	6f 92       	push	r6
 106:	7f 92       	push	r7
 108:	8f 92       	push	r8
 10a:	9f 92       	push	r9
 10c:	af 92       	push	r10
 10e:	bf 92       	push	r11
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	28 97       	sbiw	r28, 0x08	; 8
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	29 83       	std	Y+1, r18	; 0x01
 12e:	3a 83       	std	Y+2, r19	; 0x02
 130:	4b 83       	std	Y+3, r20	; 0x03
 132:	5c 83       	std	Y+4, r21	; 0x04
 134:	6d 83       	std	Y+5, r22	; 0x05
 136:	7e 83       	std	Y+6, r23	; 0x06
 138:	8f 83       	std	Y+7, r24	; 0x07
 13a:	98 87       	std	Y+8, r25	; 0x08
 13c:	89 80       	ldd	r8, Y+1	; 0x01
 13e:	9a 80       	ldd	r9, Y+2	; 0x02
 140:	ab 80       	ldd	r10, Y+3	; 0x03
 142:	bc 80       	ldd	r11, Y+4	; 0x04
 144:	cd 80       	ldd	r12, Y+5	; 0x05
 146:	de 80       	ldd	r13, Y+6	; 0x06
 148:	ef 80       	ldd	r14, Y+7	; 0x07
 14a:	f8 84       	ldd	r15, Y+8	; 0x08
 14c:	a5 01       	movw	r20, r10
 14e:	94 01       	movw	r18, r8
 150:	c5 01       	movw	r24, r10
 152:	b4 01       	movw	r22, r8
 154:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3>
 158:	4b 01       	movw	r8, r22
 15a:	5c 01       	movw	r10, r24
 15c:	a7 01       	movw	r20, r14
 15e:	96 01       	movw	r18, r12
 160:	c7 01       	movw	r24, r14
 162:	b6 01       	movw	r22, r12
 164:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3>
 168:	9b 01       	movw	r18, r22
 16a:	ac 01       	movw	r20, r24
 16c:	c5 01       	movw	r24, r10
 16e:	b4 01       	movw	r22, r8
 170:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3>
 174:	0e 94 8c 06 	call	0xd18	; 0xd18 <sqrt>
 178:	28 96       	adiw	r28, 0x08	; 8
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	bf 90       	pop	r11
 192:	af 90       	pop	r10
 194:	9f 90       	pop	r9
 196:	8f 90       	pop	r8
 198:	7f 90       	pop	r7
 19a:	6f 90       	pop	r6
 19c:	5f 90       	pop	r5
 19e:	4f 90       	pop	r4
 1a0:	08 95       	ret

000001a2 <fft>:


void fft(scomplex * samples){
 1a2:	2f 92       	push	r2
 1a4:	3f 92       	push	r3
 1a6:	4f 92       	push	r4
 1a8:	5f 92       	push	r5
 1aa:	6f 92       	push	r6
 1ac:	7f 92       	push	r7
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	6a 97       	sbiw	r28, 0x1a	; 26
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	2c 01       	movw	r4, r24
 1d8:	80 ee       	ldi	r24, 0xE0	; 224
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	9e 8b       	std	Y+22, r25	; 0x16
 1de:	8d 8b       	std	Y+21, r24	; 0x15
 1e0:	a0 ea       	ldi	r26, 0xA0	; 160
 1e2:	b1 e0       	ldi	r27, 0x01	; 1
 1e4:	b8 8f       	std	Y+24, r27	; 0x18
 1e6:	af 8b       	std	Y+23, r26	; 0x17
	int counter = 0;
	//determines the offset between odd and even 
	int line = 1;
 1e8:	66 24       	eor	r6, r6
 1ea:	63 94       	inc	r6
 1ec:	71 2c       	mov	r7, r1
 1ee:	e7 c0       	rjmp	.+462    	; 0x3be <fft+0x21c>
	int odd,even;
	for (int i = 0; i < 5; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < 16; j++){
			if(counter == line){
 1f0:	ed 81       	ldd	r30, Y+5	; 0x05
 1f2:	fe 81       	ldd	r31, Y+6	; 0x06
 1f4:	e6 15       	cp	r30, r6
 1f6:	f7 05       	cpc	r31, r7
 1f8:	41 f4       	brne	.+16     	; 0x20a <fft+0x68>
				counter = 0;
				offset += line;
 1fa:	8b 89       	ldd	r24, Y+19	; 0x13
 1fc:	9c 89       	ldd	r25, Y+20	; 0x14
 1fe:	86 0d       	add	r24, r6
 200:	97 1d       	adc	r25, r7
 202:	9c 8b       	std	Y+20, r25	; 0x14
 204:	8b 8b       	std	Y+19, r24	; 0x13
	for (int i = 0; i < 5; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < 16; j++){
			if(counter == line){
				counter = 0;
 206:	1e 82       	std	Y+6, r1	; 0x06
 208:	1d 82       	std	Y+5, r1	; 0x05
				offset += line;
			}	
			cmplxPart.real = cos_lut[i][j];
 20a:	ef 85       	ldd	r30, Y+15	; 0x0f
 20c:	f8 89       	ldd	r31, Y+16	; 0x10
 20e:	81 91       	ld	r24, Z+
 210:	91 91       	ld	r25, Z+
 212:	a1 91       	ld	r26, Z+
 214:	b1 91       	ld	r27, Z+
 216:	f8 8b       	std	Y+16, r31	; 0x10
 218:	ef 87       	std	Y+15, r30	; 0x0f
 21a:	8f 83       	std	Y+7, r24	; 0x07
 21c:	98 87       	std	Y+8, r25	; 0x08
 21e:	a9 87       	std	Y+9, r26	; 0x09
 220:	ba 87       	std	Y+10, r27	; 0x0a
			cmplxPart.imag = sin_lut[i][j];
 222:	e9 89       	ldd	r30, Y+17	; 0x11
 224:	fa 89       	ldd	r31, Y+18	; 0x12
 226:	81 91       	ld	r24, Z+
 228:	91 91       	ld	r25, Z+
 22a:	a1 91       	ld	r26, Z+
 22c:	b1 91       	ld	r27, Z+
 22e:	fa 8b       	std	Y+18, r31	; 0x12
 230:	e9 8b       	std	Y+17, r30	; 0x11
 232:	8b 87       	std	Y+11, r24	; 0x0b
 234:	9c 87       	std	Y+12, r25	; 0x0c
 236:	ad 87       	std	Y+13, r26	; 0x0d
 238:	be 87       	std	Y+14, r27	; 0x0e

			even = j+offset;
 23a:	8b 89       	ldd	r24, Y+19	; 0x13
 23c:	9c 89       	ldd	r25, Y+20	; 0x14
 23e:	82 0d       	add	r24, r2
 240:	93 1d       	adc	r25, r3
 242:	9a 8f       	std	Y+26, r25	; 0x1a
 244:	89 8f       	std	Y+25, r24	; 0x19
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
 246:	8c 01       	movw	r16, r24
 248:	06 0d       	add	r16, r6
 24a:	17 1d       	adc	r17, r7
 24c:	00 0f       	add	r16, r16
 24e:	11 1f       	adc	r17, r17
 250:	00 0f       	add	r16, r16
 252:	11 1f       	adc	r17, r17
 254:	00 0f       	add	r16, r16
 256:	11 1f       	adc	r17, r17
 258:	04 0d       	add	r16, r4
 25a:	15 1d       	adc	r17, r5
 25c:	d8 01       	movw	r26, r16
 25e:	8d 90       	ld	r8, X+
 260:	9d 90       	ld	r9, X+
 262:	ad 90       	ld	r10, X+
 264:	bc 90       	ld	r11, X
 266:	13 97       	sbiw	r26, 0x03	; 3
 268:	14 96       	adiw	r26, 0x04	; 4
 26a:	cd 90       	ld	r12, X+
 26c:	dd 90       	ld	r13, X+
 26e:	ed 90       	ld	r14, X+
 270:	fc 90       	ld	r15, X
 272:	17 97       	sbiw	r26, 0x07	; 7
    return num;
}

scomplex multiply(scomplex x, scomplex y){
	scomplex mult;
	mult.real = x.real * y.real -(x.imag*y.imag);
 274:	a5 01       	movw	r20, r10
 276:	94 01       	movw	r18, r8
 278:	6f 81       	ldd	r22, Y+7	; 0x07
 27a:	78 85       	ldd	r23, Y+8	; 0x08
 27c:	89 85       	ldd	r24, Y+9	; 0x09
 27e:	9a 85       	ldd	r25, Y+10	; 0x0a
 280:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3>
 284:	69 83       	std	Y+1, r22	; 0x01
 286:	7a 83       	std	Y+2, r23	; 0x02
 288:	8b 83       	std	Y+3, r24	; 0x03
 28a:	9c 83       	std	Y+4, r25	; 0x04
 28c:	a7 01       	movw	r20, r14
 28e:	96 01       	movw	r18, r12
 290:	6b 85       	ldd	r22, Y+11	; 0x0b
 292:	7c 85       	ldd	r23, Y+12	; 0x0c
 294:	8d 85       	ldd	r24, Y+13	; 0x0d
 296:	9e 85       	ldd	r25, Y+14	; 0x0e
 298:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3>
 29c:	9b 01       	movw	r18, r22
 29e:	ac 01       	movw	r20, r24
 2a0:	69 81       	ldd	r22, Y+1	; 0x01
 2a2:	7a 81       	ldd	r23, Y+2	; 0x02
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	9c 81       	ldd	r25, Y+4	; 0x04
 2a8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__subsf3>
 2ac:	69 83       	std	Y+1, r22	; 0x01
 2ae:	7a 83       	std	Y+2, r23	; 0x02
 2b0:	8b 83       	std	Y+3, r24	; 0x03
 2b2:	9c 83       	std	Y+4, r25	; 0x04
	mult.imag = x.real * y.imag + x.imag *y.real;
 2b4:	a5 01       	movw	r20, r10
 2b6:	94 01       	movw	r18, r8
 2b8:	6b 85       	ldd	r22, Y+11	; 0x0b
 2ba:	7c 85       	ldd	r23, Y+12	; 0x0c
 2bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 2be:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c0:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3>
 2c4:	4b 01       	movw	r8, r22
 2c6:	5c 01       	movw	r10, r24
 2c8:	a7 01       	movw	r20, r14
 2ca:	96 01       	movw	r18, r12
 2cc:	6f 81       	ldd	r22, Y+7	; 0x07
 2ce:	78 85       	ldd	r23, Y+8	; 0x08
 2d0:	89 85       	ldd	r24, Y+9	; 0x09
 2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2d4:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3>
 2d8:	9b 01       	movw	r18, r22
 2da:	ac 01       	movw	r20, r24
 2dc:	c5 01       	movw	r24, r10
 2de:	b4 01       	movw	r22, r8
 2e0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3>
 2e4:	6b 01       	movw	r12, r22
 2e6:	7c 01       	movw	r14, r24

			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
 2e8:	e9 8d       	ldd	r30, Y+25	; 0x19
 2ea:	fa 8d       	ldd	r31, Y+26	; 0x1a
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e4 0d       	add	r30, r4
 2fa:	f5 1d       	adc	r31, r5
 2fc:	f8 87       	std	Y+8, r31	; 0x08
 2fe:	ef 83       	std	Y+7, r30	; 0x07
	return ad;
}
scomplex subtract(scomplex x, scomplex y){
	scomplex sub; 
	sub.real = x.real - y.real; 
	sub.imag = x.imag - y.imag;
 300:	9b 01       	movw	r18, r22
 302:	ac 01       	movw	r20, r24
 304:	64 81       	ldd	r22, Z+4	; 0x04
 306:	75 81       	ldd	r23, Z+5	; 0x05
 308:	86 81       	ldd	r24, Z+6	; 0x06
 30a:	97 81       	ldd	r25, Z+7	; 0x07
 30c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__subsf3>
 310:	4b 01       	movw	r8, r22
 312:	5c 01       	movw	r10, r24

			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	3a 81       	ldd	r19, Y+2	; 0x02
 318:	4b 81       	ldd	r20, Y+3	; 0x03
 31a:	5c 81       	ldd	r21, Y+4	; 0x04
 31c:	af 81       	ldd	r26, Y+7	; 0x07
 31e:	b8 85       	ldd	r27, Y+8	; 0x08
 320:	6d 91       	ld	r22, X+
 322:	7d 91       	ld	r23, X+
 324:	8d 91       	ld	r24, X+
 326:	9c 91       	ld	r25, X
 328:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__subsf3>
 32c:	f8 01       	movw	r30, r16
 32e:	60 83       	st	Z, r22
 330:	71 83       	std	Z+1, r23	; 0x01
 332:	82 83       	std	Z+2, r24	; 0x02
 334:	93 83       	std	Z+3, r25	; 0x03
 336:	84 82       	std	Z+4, r8	; 0x04
 338:	95 82       	std	Z+5, r9	; 0x05
 33a:	a6 82       	std	Z+6, r10	; 0x06
 33c:	b7 82       	std	Z+7, r11	; 0x07
	return mult;
}
scomplex add(scomplex x, scomplex y){
	scomplex ad; 
	ad.real = x.real + y.real; 
	ad.imag = x.imag + y.imag;
 33e:	ef 81       	ldd	r30, Y+7	; 0x07
 340:	f8 85       	ldd	r31, Y+8	; 0x08
 342:	24 81       	ldd	r18, Z+4	; 0x04
 344:	35 81       	ldd	r19, Z+5	; 0x05
 346:	46 81       	ldd	r20, Z+6	; 0x06
 348:	57 81       	ldd	r21, Z+7	; 0x07
 34a:	c7 01       	movw	r24, r14
 34c:	b6 01       	movw	r22, r12
 34e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3>
 352:	6b 01       	movw	r12, r22
 354:	7c 01       	movw	r14, r24
			even = j+offset;
			odd = even + line;

			cmplxPart = multiply(samples[odd],cmplxPart);
			samples[odd] = subtract(samples[even],cmplxPart);
			samples[even] = add(samples[even], cmplxPart);
 356:	29 81       	ldd	r18, Y+1	; 0x01
 358:	3a 81       	ldd	r19, Y+2	; 0x02
 35a:	4b 81       	ldd	r20, Y+3	; 0x03
 35c:	5c 81       	ldd	r21, Y+4	; 0x04
 35e:	af 81       	ldd	r26, Y+7	; 0x07
 360:	b8 85       	ldd	r27, Y+8	; 0x08
 362:	6d 91       	ld	r22, X+
 364:	7d 91       	ld	r23, X+
 366:	8d 91       	ld	r24, X+
 368:	9c 91       	ld	r25, X
 36a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3>
 36e:	ef 81       	ldd	r30, Y+7	; 0x07
 370:	f8 85       	ldd	r31, Y+8	; 0x08
 372:	60 83       	st	Z, r22
 374:	71 83       	std	Z+1, r23	; 0x01
 376:	82 83       	std	Z+2, r24	; 0x02
 378:	93 83       	std	Z+3, r25	; 0x03
 37a:	c4 82       	std	Z+4, r12	; 0x04
 37c:	d5 82       	std	Z+5, r13	; 0x05
 37e:	e6 82       	std	Z+6, r14	; 0x06
 380:	f7 82       	std	Z+7, r15	; 0x07
			counter ++;
 382:	ed 81       	ldd	r30, Y+5	; 0x05
 384:	fe 81       	ldd	r31, Y+6	; 0x06
 386:	31 96       	adiw	r30, 0x01	; 1
 388:	fe 83       	std	Y+6, r31	; 0x06
 38a:	ed 83       	std	Y+5, r30	; 0x05
	
	int odd,even;
	for (int i = 0; i < 5; i++){
		counter = 0;
		int offset = 0; 
		for(int j = 0; j < 16; j++){
 38c:	ff ef       	ldi	r31, 0xFF	; 255
 38e:	2f 1a       	sub	r2, r31
 390:	3f 0a       	sbc	r3, r31
 392:	20 e1       	ldi	r18, 0x10	; 16
 394:	22 16       	cp	r2, r18
 396:	31 04       	cpc	r3, r1
 398:	09 f0       	breq	.+2      	; 0x39c <fft+0x1fa>
 39a:	2a cf       	rjmp	.-428    	; 0x1f0 <fft+0x4e>
			samples[odd] = subtract(samples[even],cmplxPart);
			samples[even] = add(samples[even], cmplxPart);
			counter ++;

		}
		line = line * 2;
 39c:	66 0c       	add	r6, r6
 39e:	77 1c       	adc	r7, r7
 3a0:	8d 89       	ldd	r24, Y+21	; 0x15
 3a2:	9e 89       	ldd	r25, Y+22	; 0x16
 3a4:	80 5c       	subi	r24, 0xC0	; 192
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	9e 8b       	std	Y+22, r25	; 0x16
 3aa:	8d 8b       	std	Y+21, r24	; 0x15
 3ac:	af 89       	ldd	r26, Y+23	; 0x17
 3ae:	b8 8d       	ldd	r27, Y+24	; 0x18
 3b0:	a0 5c       	subi	r26, 0xC0	; 192
 3b2:	bf 4f       	sbci	r27, 0xFF	; 255
 3b4:	b8 8f       	std	Y+24, r27	; 0x18
 3b6:	af 8b       	std	Y+23, r26	; 0x17
	// X[k] = Σ x_k W_n
	//       n=0 
	scomplex cmplxPart;	
	
	int odd,even;
	for (int i = 0; i < 5; i++){
 3b8:	80 52       	subi	r24, 0x20	; 32
 3ba:	94 40       	sbci	r25, 0x04	; 4
 3bc:	79 f0       	breq	.+30     	; 0x3dc <fft+0x23a>
int imagnitude(scomplex x){
	return (int) sqrt(x.real*x.real + x.imag*x.imag);
}


void fft(scomplex * samples){
 3be:	ef 89       	ldd	r30, Y+23	; 0x17
 3c0:	f8 8d       	ldd	r31, Y+24	; 0x18
 3c2:	fa 8b       	std	Y+18, r31	; 0x12
 3c4:	e9 8b       	std	Y+17, r30	; 0x11
 3c6:	8d 89       	ldd	r24, Y+21	; 0x15
 3c8:	9e 89       	ldd	r25, Y+22	; 0x16
 3ca:	98 8b       	std	Y+16, r25	; 0x10
 3cc:	8f 87       	std	Y+15, r24	; 0x0f
 3ce:	21 2c       	mov	r2, r1
 3d0:	31 2c       	mov	r3, r1
 3d2:	1c 8a       	std	Y+20, r1	; 0x14
 3d4:	1b 8a       	std	Y+19, r1	; 0x13
 3d6:	1e 82       	std	Y+6, r1	; 0x06
 3d8:	1d 82       	std	Y+5, r1	; 0x05
 3da:	0a cf       	rjmp	.-492    	; 0x1f0 <fft+0x4e>

		}
		line = line * 2;
	}

}
 3dc:	6a 96       	adiw	r28, 0x1a	; 26
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	bf 90       	pop	r11
 3fa:	af 90       	pop	r10
 3fc:	9f 90       	pop	r9
 3fe:	8f 90       	pop	r8
 400:	7f 90       	pop	r7
 402:	6f 90       	pop	r6
 404:	5f 90       	pop	r5
 406:	4f 90       	pop	r4
 408:	3f 90       	pop	r3
 40a:	2f 90       	pop	r2
 40c:	08 95       	ret

0000040e <spi>:
		return (int)val; 
	}
}
void decay_columns(uint16_t decay_speed){
	if((general_timer % decay_speed) == 0){
		for(int i = 0; i < 16; i++){
 40e:	8c b5       	in	r24, 0x2c	; 44
 410:	80 61       	ori	r24, 0x10	; 16
 412:	8c bd       	out	0x2c, r24	; 44
 414:	8d b5       	in	r24, 0x2d	; 45
 416:	81 60       	ori	r24, 0x01	; 1
 418:	8d bd       	out	0x2d, r24	; 45
 41a:	8c b5       	in	r24, 0x2c	; 44
 41c:	80 64       	ori	r24, 0x40	; 64
 41e:	8c bd       	out	0x2c, r24	; 44
 420:	08 95       	ret

00000422 <send>:
 422:	5e 98       	cbi	0x0b, 6	; 11
 424:	8e bd       	out	0x2e, r24	; 46
 426:	0d b4       	in	r0, 0x2d	; 45
 428:	07 fe       	sbrs	r0, 7
 42a:	fd cf       	rjmp	.-6      	; 0x426 <send+0x4>
 42c:	7e bd       	out	0x2e, r23	; 46
 42e:	0d b4       	in	r0, 0x2d	; 45
 430:	07 fe       	sbrs	r0, 7
 432:	fd cf       	rjmp	.-6      	; 0x42e <send+0xc>
 434:	6e bd       	out	0x2e, r22	; 46
 436:	0d b4       	in	r0, 0x2d	; 45
 438:	07 fe       	sbrs	r0, 7
 43a:	fd cf       	rjmp	.-6      	; 0x436 <send+0x14>
 43c:	5e 9a       	sbi	0x0b, 6	; 11
 43e:	08 95       	ret

00000440 <timer1>:
 440:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 444:	e1 e8       	ldi	r30, 0x81	; 129
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	10 82       	st	Z, r1
 44a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 44e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 452:	88 e1       	ldi	r24, 0x18	; 24
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 45a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 45e:	80 81       	ld	r24, Z
 460:	88 60       	ori	r24, 0x08	; 8
 462:	80 83       	st	Z, r24
 464:	80 81       	ld	r24, Z
 466:	83 60       	ori	r24, 0x03	; 3
 468:	80 83       	st	Z, r24
 46a:	ef e6       	ldi	r30, 0x6F	; 111
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	82 60       	ori	r24, 0x02	; 2
 472:	80 83       	st	Z, r24
 474:	08 95       	ret

00000476 <timer2>:
 476:	a0 eb       	ldi	r26, 0xB0	; 176
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	1c 92       	st	X, r1
 47c:	e1 eb       	ldi	r30, 0xB1	; 177
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	10 82       	st	Z, r1
 482:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 486:	88 e1       	ldi	r24, 0x18	; 24
 488:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 48c:	8c 91       	ld	r24, X
 48e:	82 60       	ori	r24, 0x02	; 2
 490:	8c 93       	st	X, r24
 492:	80 81       	ld	r24, Z
 494:	83 60       	ori	r24, 0x03	; 3
 496:	80 83       	st	Z, r24
 498:	e0 e7       	ldi	r30, 0x70	; 112
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	80 83       	st	Z, r24
 4a2:	08 95       	ret

000004a4 <timer2_stop>:
 4a4:	e0 e7       	ldi	r30, 0x70	; 112
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	8d 7f       	andi	r24, 0xFD	; 253
 4ac:	80 83       	st	Z, r24
 4ae:	08 95       	ret

000004b0 <timer2_start>:
 4b0:	e0 e7       	ldi	r30, 0x70	; 112
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	82 60       	ori	r24, 0x02	; 2
 4b8:	80 83       	st	Z, r24
 4ba:	08 95       	ret

000004bc <__vector_7>:
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
 4e2:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <sample_done>
 4e6:	81 11       	cpse	r24, r1
 4e8:	73 c0       	rjmp	.+230    	; 0x5d0 <__vector_7+0x114>
 4ea:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <sample_counter>
 4ee:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <sample_counter+0x1>
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	79 f4       	brne	.+30     	; 0x514 <__vector_7+0x58>
 4f6:	ea e7       	ldi	r30, 0x7A	; 122
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	80 64       	ori	r24, 0x40	; 64
 4fe:	80 83       	st	Z, r24
 500:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <sample_counter>
 504:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <sample_counter+0x1>
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <sample_counter+0x1>
 50e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <sample_counter>
 512:	5e c0       	rjmp	.+188    	; 0x5d0 <__vector_7+0x114>
 514:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <sample_counter>
 518:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <sample_counter+0x1>
 51c:	4f 97       	sbiw	r24, 0x1f	; 31
 51e:	59 f5       	brne	.+86     	; 0x576 <__vector_7+0xba>
 520:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <sample_counter>
 524:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <sample_counter+0x1>
 528:	e0 50       	subi	r30, 0x00	; 0
 52a:	ff 4f       	sbci	r31, 0xFF	; 255
 52c:	c0 81       	ld	r28, Z
 52e:	d0 e0       	ldi	r29, 0x00	; 0
 530:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	60 58       	subi	r22, 0x80	; 128
 538:	71 09       	sbc	r23, r1
 53a:	07 2e       	mov	r0, r23
 53c:	00 0c       	add	r0, r0
 53e:	88 0b       	sbc	r24, r24
 540:	99 0b       	sbc	r25, r25
 542:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
 546:	cc 0f       	add	r28, r28
 548:	dd 1f       	adc	r29, r29
 54a:	cc 0f       	add	r28, r28
 54c:	dd 1f       	adc	r29, r29
 54e:	cc 0f       	add	r28, r28
 550:	dd 1f       	adc	r29, r29
 552:	c4 5c       	subi	r28, 0xC4	; 196
 554:	db 4f       	sbci	r29, 0xFB	; 251
 556:	68 83       	st	Y, r22
 558:	79 83       	std	Y+1, r23	; 0x01
 55a:	8a 83       	std	Y+2, r24	; 0x02
 55c:	9b 83       	std	Y+3, r25	; 0x03
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <sample_done>
 564:	0e 94 52 02 	call	0x4a4	; 0x4a4 <timer2_stop>
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	9f ef       	ldi	r25, 0xFF	; 255
 56c:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <sample_counter+0x1>
 570:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <sample_counter>
 574:	2d c0       	rjmp	.+90     	; 0x5d0 <__vector_7+0x114>
 576:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <sample_counter>
 57a:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <sample_counter+0x1>
 57e:	e0 50       	subi	r30, 0x00	; 0
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	c0 81       	ld	r28, Z
 584:	d0 e0       	ldi	r29, 0x00	; 0
 586:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 58       	subi	r22, 0x80	; 128
 58e:	71 09       	sbc	r23, r1
 590:	07 2e       	mov	r0, r23
 592:	00 0c       	add	r0, r0
 594:	88 0b       	sbc	r24, r24
 596:	99 0b       	sbc	r25, r25
 598:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
 59c:	cc 0f       	add	r28, r28
 59e:	dd 1f       	adc	r29, r29
 5a0:	cc 0f       	add	r28, r28
 5a2:	dd 1f       	adc	r29, r29
 5a4:	cc 0f       	add	r28, r28
 5a6:	dd 1f       	adc	r29, r29
 5a8:	c4 5c       	subi	r28, 0xC4	; 196
 5aa:	db 4f       	sbci	r29, 0xFB	; 251
 5ac:	68 83       	st	Y, r22
 5ae:	79 83       	std	Y+1, r23	; 0x01
 5b0:	8a 83       	std	Y+2, r24	; 0x02
 5b2:	9b 83       	std	Y+3, r25	; 0x03
 5b4:	ea e7       	ldi	r30, 0x7A	; 122
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 64       	ori	r24, 0x40	; 64
 5bc:	80 83       	st	Z, r24
 5be:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <sample_counter>
 5c2:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <sample_counter+0x1>
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <sample_counter+0x1>
 5cc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <sample_counter>
 5d0:	ff 91       	pop	r31
 5d2:	ef 91       	pop	r30
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <render>:
 5f6:	cf 93       	push	r28
 5f8:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <render_timer>
 5fc:	30 91 29 04 	lds	r19, 0x0429	; 0x800429 <render_timer+0x1>
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	10 f1       	brcs	.+68     	; 0x64a <render+0x54>
 606:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <render_timer+0x1>
 60a:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <render_timer>
 60e:	c0 91 20 04 	lds	r28, 0x0420	; 0x800420 <__data_end>
 612:	c0 31       	cpi	r28, 0x10	; 16
 614:	41 f4       	brne	.+16     	; 0x626 <render+0x30>
 616:	6f ef       	ldi	r22, 0xFF	; 255
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 11 02 	call	0x422	; 0x422 <send>
 620:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__data_end>
 624:	12 c0       	rjmp	.+36     	; 0x64a <render+0x54>
 626:	ec 2f       	mov	r30, r28
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	0c 2e       	mov	r0, r28
 630:	02 c0       	rjmp	.+4      	; 0x636 <render+0x40>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	0a 94       	dec	r0
 638:	e2 f7       	brpl	.-8      	; 0x632 <render+0x3c>
 63a:	e4 5d       	subi	r30, 0xD4	; 212
 63c:	fb 4f       	sbci	r31, 0xFB	; 251
 63e:	80 81       	ld	r24, Z
 640:	0e 94 11 02 	call	0x422	; 0x422 <send>
 644:	cf 5f       	subi	r28, 0xFF	; 255
 646:	c0 93 20 04 	sts	0x0420, r28	; 0x800420 <__data_end>
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <__vector_11>:
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	4f 93       	push	r20
 65e:	5f 93       	push	r21
 660:	6f 93       	push	r22
 662:	7f 93       	push	r23
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
 670:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <render_timer>
 674:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <render_timer+0x1>
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <render_timer+0x1>
 67e:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <render_timer>
 682:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <general_timer>
 686:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <general_timer+0x1>
 68a:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <general_timer+0x2>
 68e:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <general_timer+0x3>
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	a1 1d       	adc	r26, r1
 696:	b1 1d       	adc	r27, r1
 698:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <general_timer>
 69c:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <general_timer+0x1>
 6a0:	a0 93 24 04 	sts	0x0424, r26	; 0x800424 <general_timer+0x2>
 6a4:	b0 93 25 04 	sts	0x0425, r27	; 0x800425 <general_timer+0x3>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <render>
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	bf 91       	pop	r27
 6b6:	af 91       	pop	r26
 6b8:	9f 91       	pop	r25
 6ba:	8f 91       	pop	r24
 6bc:	7f 91       	pop	r23
 6be:	6f 91       	pop	r22
 6c0:	5f 91       	pop	r21
 6c2:	4f 91       	pop	r20
 6c4:	3f 91       	pop	r19
 6c6:	2f 91       	pop	r18
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <demo>:
 6d2:	ec e2       	ldi	r30, 0x2C	; 44
 6d4:	f4 e0       	ldi	r31, 0x04	; 4
 6d6:	9f ef       	ldi	r25, 0xFF	; 255
 6d8:	97 87       	std	Z+15, r25	; 0x0f
 6da:	80 e9       	ldi	r24, 0x90	; 144
 6dc:	86 87       	std	Z+14, r24	; 0x0e
 6de:	85 87       	std	Z+13, r24	; 0x0d
 6e0:	84 87       	std	Z+12, r24	; 0x0c
 6e2:	92 87       	std	Z+10, r25	; 0x0a
 6e4:	81 87       	std	Z+9, r24	; 0x09
 6e6:	80 87       	std	Z+8, r24	; 0x08
 6e8:	87 83       	std	Z+7, r24	; 0x07
 6ea:	80 e8       	ldi	r24, 0x80	; 128
 6ec:	85 83       	std	Z+5, r24	; 0x05
 6ee:	84 83       	std	Z+4, r24	; 0x04
 6f0:	93 83       	std	Z+3, r25	; 0x03
 6f2:	82 83       	std	Z+2, r24	; 0x02
 6f4:	81 83       	std	Z+1, r24	; 0x01
 6f6:	08 95       	ret

000006f8 <init_adc>:
 6f8:	aa e7       	ldi	r26, 0x7A	; 122
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	8c 91       	ld	r24, X
 6fe:	85 68       	ori	r24, 0x85	; 133
 700:	8c 93       	st	X, r24
 702:	ec e7       	ldi	r30, 0x7C	; 124
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	90 81       	ld	r25, Z
 70a:	80 7f       	andi	r24, 0xF0	; 240
 70c:	89 2b       	or	r24, r25
 70e:	80 83       	st	Z, r24
 710:	80 81       	ld	r24, Z
 712:	80 62       	ori	r24, 0x20	; 32
 714:	80 83       	st	Z, r24
 716:	8c 91       	ld	r24, X
 718:	80 64       	ori	r24, 0x40	; 64
 71a:	8c 93       	st	X, r24
 71c:	ea e7       	ldi	r30, 0x7A	; 122
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	86 fd       	sbrc	r24, 6
 724:	fd cf       	rjmp	.-6      	; 0x720 <init_adc+0x28>
 726:	08 95       	ret

00000728 <columns>:
 728:	dc 01       	movw	r26, r24
 72a:	ec e2       	ldi	r30, 0x2C	; 44
 72c:	f4 e0       	ldi	r31, 0x04	; 4
 72e:	4c e3       	ldi	r20, 0x3C	; 60
 730:	54 e0       	ldi	r21, 0x04	; 4
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	9c 01       	movw	r18, r24
 738:	0d 90       	ld	r0, X+
 73a:	02 c0       	rjmp	.+4      	; 0x740 <columns+0x18>
 73c:	22 0f       	add	r18, r18
 73e:	33 1f       	adc	r19, r19
 740:	0a 94       	dec	r0
 742:	e2 f7       	brpl	.-8      	; 0x73c <columns+0x14>
 744:	21 50       	subi	r18, 0x01	; 1
 746:	21 93       	st	Z+, r18
 748:	e4 17       	cp	r30, r20
 74a:	f5 07       	cpc	r31, r21
 74c:	a1 f7       	brne	.-24     	; 0x736 <columns+0xe>
 74e:	08 95       	ret

00000750 <clamp>:
 750:	cf 92       	push	r12
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	6b 01       	movw	r12, r22
 75a:	7c 01       	movw	r14, r24
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	40 ee       	ldi	r20, 0xE0	; 224
 762:	50 e4       	ldi	r21, 0x40	; 64
 764:	0e 94 c4 05 	call	0xb88	; 0xb88 <__gesf2>
 768:	18 16       	cp	r1, r24
 76a:	7c f0       	brlt	.+30     	; 0x78a <clamp+0x3a>
 76c:	20 e0       	ldi	r18, 0x00	; 0
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	a9 01       	movw	r20, r18
 772:	c7 01       	movw	r24, r14
 774:	b6 01       	movw	r22, r12
 776:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__cmpsf2>
 77a:	88 23       	and	r24, r24
 77c:	4c f0       	brlt	.+18     	; 0x790 <clamp+0x40>
 77e:	c7 01       	movw	r24, r14
 780:	b6 01       	movw	r22, r12
 782:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixsfsi>
 786:	cb 01       	movw	r24, r22
 788:	05 c0       	rjmp	.+10     	; 0x794 <clamp+0x44>
 78a:	88 e0       	ldi	r24, 0x08	; 8
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <clamp+0x44>
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	08 95       	ret

0000079e <main>:
			frame[i] = frame[i] >> 1; 
		}
	}
}
int main(){
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62
 7a6:	60 97       	sbiw	r28, 0x10	; 16
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
 7ac:	de bf       	out	0x3e, r29	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	cd bf       	out	0x3d, r28	; 61
	/*Variable initialization */
	sample_counter = -1; 	
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	9f ef       	ldi	r25, 0xFF	; 255
 7b6:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <sample_counter+0x1>
 7ba:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <sample_counter>
	
	/* Pin initialization */ 
    DDRB |= (1 << PB3) | (1 << PB5);
 7be:	84 b1       	in	r24, 0x04	; 4
 7c0:	88 62       	ori	r24, 0x28	; 40
 7c2:	84 b9       	out	0x04, r24	; 4
    DDRB |= ( 1 << PB2 );
 7c4:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1 << PB2);
 7c6:	2a 98       	cbi	0x05, 2	; 5
    DDRD |=  (1 << DRCLK ) ;
 7c8:	56 9a       	sbi	0x0a, 6	; 10
    spi();
 7ca:	0e 94 07 02 	call	0x40e	; 0x40e <spi>
	
		/* Render Cycle */
	demo();	
 7ce:	0e 94 69 03 	call	0x6d2	; 0x6d2 <demo>
	uint8_t column_vec[16] ;
	columns(column_vec);
 7d2:	ce 01       	movw	r24, r28
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	0e 94 94 03 	call	0x728	; 0x728 <columns>
	init_adc();
 7da:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init_adc>
//	initSerial();
	sei();
 7de:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e0:	8f e9       	ldi	r24, 0x9F	; 159
 7e2:	9f e0       	ldi	r25, 0x0F	; 15
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	f1 f7       	brne	.-4      	; 0x7e4 <main+0x46>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <main+0x4c>
 7ea:	00 00       	nop
	char buffer[20];
	_delay_ms(1);
	timer1();
 7ec:	0e 94 20 02 	call	0x440	; 0x440 <timer1>
	timer2();
 7f0:	0e 94 3b 02 	call	0x476	; 0x476 <timer2>
	float smoothing; 
	float delta; 
    while(1){
			if(sample_done == 1){
 7f4:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <sample_done>
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	e1 f7       	brne	.-8      	; 0x7f4 <main+0x56>
 7fc:	0f 2e       	mov	r0, r31
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	cf 2e       	mov	r12, r31
 802:	f1 e0       	ldi	r31, 0x01	; 1
 804:	df 2e       	mov	r13, r31
 806:	f0 2d       	mov	r31, r0
 808:	e1 2c       	mov	r14, r1
 80a:	f1 2c       	mov	r15, r1
			for(int i = 0; i < 32; i++){
				int k = reversed[i];
 80c:	d6 01       	movw	r26, r12
 80e:	ed 91       	ld	r30, X+
 810:	6d 01       	movw	r12, r26
				sample_vec[i].real = hanning[k] * sample_vec[i].real;
 812:	87 01       	movw	r16, r14
 814:	00 0f       	add	r16, r16
 816:	11 1f       	adc	r17, r17
 818:	00 0f       	add	r16, r16
 81a:	11 1f       	adc	r17, r17
 81c:	00 0f       	add	r16, r16
 81e:	11 1f       	adc	r17, r17
 820:	04 5c       	subi	r16, 0xC4	; 196
 822:	1b 4f       	sbci	r17, 0xFB	; 251
 824:	d8 01       	movw	r26, r16
 826:	6d 91       	ld	r22, X+
 828:	7d 91       	ld	r23, X+
 82a:	8d 91       	ld	r24, X+
 82c:	9c 91       	ld	r25, X
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	ee 0f       	add	r30, r30
 832:	ff 1f       	adc	r31, r31
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	e0 5e       	subi	r30, 0xE0	; 224
 83a:	fe 4f       	sbci	r31, 0xFE	; 254
 83c:	20 81       	ld	r18, Z
 83e:	31 81       	ldd	r19, Z+1	; 0x01
 840:	42 81       	ldd	r20, Z+2	; 0x02
 842:	53 81       	ldd	r21, Z+3	; 0x03
 844:	0e 94 19 06 	call	0xc32	; 0xc32 <__mulsf3>
 848:	f8 01       	movw	r30, r16
 84a:	60 83       	st	Z, r22
 84c:	71 83       	std	Z+1, r23	; 0x01
 84e:	82 83       	std	Z+2, r24	; 0x02
 850:	93 83       	std	Z+3, r25	; 0x03
				sample_vec[i].imag = 0; 
 852:	14 82       	std	Z+4, r1	; 0x04
 854:	15 82       	std	Z+5, r1	; 0x05
 856:	16 82       	std	Z+6, r1	; 0x06
 858:	17 82       	std	Z+7, r1	; 0x07
	timer2();
	float smoothing; 
	float delta; 
    while(1){
			if(sample_done == 1){
			for(int i = 0; i < 32; i++){
 85a:	bf ef       	ldi	r27, 0xFF	; 255
 85c:	eb 1a       	sub	r14, r27
 85e:	fb 0a       	sbc	r15, r27
 860:	e0 e2       	ldi	r30, 0x20	; 32
 862:	ee 16       	cp	r14, r30
 864:	f1 04       	cpc	r15, r1
 866:	91 f6       	brne	.-92     	; 0x80c <main+0x6e>
				int k = reversed[i];
				sample_vec[i].real = hanning[k] * sample_vec[i].real;
				sample_vec[i].imag = 0; 
			}
		
		    fft(sample_vec);
 868:	8c e3       	ldi	r24, 0x3C	; 60
 86a:	94 e0       	ldi	r25, 0x04	; 4
 86c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <fft>
 870:	7e 01       	movw	r14, r28
 872:	f2 e0       	ldi	r31, 0x02	; 2
 874:	ef 0e       	add	r14, r31
 876:	f1 1c       	adc	r15, r1
			for(uint16_t i = 1; i < 16; i++){
 878:	01 e0       	ldi	r16, 0x01	; 1
 87a:	10 e0       	ldi	r17, 0x00	; 0
				smoothing =  2*log(magnitude(sample_vec[i]));
 87c:	f8 01       	movw	r30, r16
 87e:	ee 0f       	add	r30, r30
 880:	ff 1f       	adc	r31, r31
 882:	ee 0f       	add	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	e4 5c       	subi	r30, 0xC4	; 196
 88c:	fb 4f       	sbci	r31, 0xFB	; 251
 88e:	20 81       	ld	r18, Z
 890:	31 81       	ldd	r19, Z+1	; 0x01
 892:	42 81       	ldd	r20, Z+2	; 0x02
 894:	53 81       	ldd	r21, Z+3	; 0x03
 896:	64 81       	ldd	r22, Z+4	; 0x04
 898:	75 81       	ldd	r23, Z+5	; 0x05
 89a:	86 81       	ldd	r24, Z+6	; 0x06
 89c:	97 81       	ldd	r25, Z+7	; 0x07
 89e:	0e 94 80 00 	call	0x100	; 0x100 <magnitude>
 8a2:	0e 94 d1 05 	call	0xba2	; 0xba2 <log>
				column_vec[i]  = clamp(smoothing);
 8a6:	9b 01       	movw	r18, r22
 8a8:	ac 01       	movw	r20, r24
 8aa:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3>
 8ae:	0e 94 a8 03 	call	0x750	; 0x750 <clamp>
 8b2:	d7 01       	movw	r26, r14
 8b4:	8d 93       	st	X+, r24
 8b6:	7d 01       	movw	r14, r26
				sample_vec[i].real = hanning[k] * sample_vec[i].real;
				sample_vec[i].imag = 0; 
			}
		
		    fft(sample_vec);
			for(uint16_t i = 1; i < 16; i++){
 8b8:	0f 5f       	subi	r16, 0xFF	; 255
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	00 31       	cpi	r16, 0x10	; 16
 8be:	11 05       	cpc	r17, r1
 8c0:	e9 f6       	brne	.-70     	; 0x87c <main+0xde>
				smoothing =  2*log(magnitude(sample_vec[i]));
				column_vec[i]  = clamp(smoothing);
			}
			columns(column_vec);
 8c2:	ce 01       	movw	r24, r28
 8c4:	01 96       	adiw	r24, 0x01	; 1
 8c6:	0e 94 94 03 	call	0x728	; 0x728 <columns>
			sample_done = 0; 
 8ca:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <sample_done>
			timer2_start();	
 8ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <timer2_start>
 8d2:	90 cf       	rjmp	.-224    	; 0x7f4 <main+0x56>

000008d4 <__subsf3>:
 8d4:	50 58       	subi	r21, 0x80	; 128

000008d6 <__addsf3>:
 8d6:	bb 27       	eor	r27, r27
 8d8:	aa 27       	eor	r26, r26
 8da:	0e 94 82 04 	call	0x904	; 0x904 <__addsf3x>
 8de:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
 8e2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
 8e6:	38 f0       	brcs	.+14     	; 0x8f6 <__addsf3+0x20>
 8e8:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__addsf3+0x20>
 8ee:	39 f4       	brne	.+14     	; 0x8fe <__addsf3+0x28>
 8f0:	9f 3f       	cpi	r25, 0xFF	; 255
 8f2:	19 f4       	brne	.+6      	; 0x8fa <__addsf3+0x24>
 8f4:	26 f4       	brtc	.+8      	; 0x8fe <__addsf3+0x28>
 8f6:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 8fa:	0e f4       	brtc	.+2      	; 0x8fe <__addsf3+0x28>
 8fc:	e0 95       	com	r30
 8fe:	e7 fb       	bst	r30, 7
 900:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>

00000904 <__addsf3x>:
 904:	e9 2f       	mov	r30, r25
 906:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
 90a:	58 f3       	brcs	.-42     	; 0x8e2 <__addsf3+0xc>
 90c:	ba 17       	cp	r27, r26
 90e:	62 07       	cpc	r22, r18
 910:	73 07       	cpc	r23, r19
 912:	84 07       	cpc	r24, r20
 914:	95 07       	cpc	r25, r21
 916:	20 f0       	brcs	.+8      	; 0x920 <__addsf3x+0x1c>
 918:	79 f4       	brne	.+30     	; 0x938 <__addsf3x+0x34>
 91a:	a6 f5       	brtc	.+104    	; 0x984 <__addsf3x+0x80>
 91c:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
 920:	0e f4       	brtc	.+2      	; 0x924 <__addsf3x+0x20>
 922:	e0 95       	com	r30
 924:	0b 2e       	mov	r0, r27
 926:	ba 2f       	mov	r27, r26
 928:	a0 2d       	mov	r26, r0
 92a:	0b 01       	movw	r0, r22
 92c:	b9 01       	movw	r22, r18
 92e:	90 01       	movw	r18, r0
 930:	0c 01       	movw	r0, r24
 932:	ca 01       	movw	r24, r20
 934:	a0 01       	movw	r20, r0
 936:	11 24       	eor	r1, r1
 938:	ff 27       	eor	r31, r31
 93a:	59 1b       	sub	r21, r25
 93c:	99 f0       	breq	.+38     	; 0x964 <__addsf3x+0x60>
 93e:	59 3f       	cpi	r21, 0xF9	; 249
 940:	50 f4       	brcc	.+20     	; 0x956 <__addsf3x+0x52>
 942:	50 3e       	cpi	r21, 0xE0	; 224
 944:	68 f1       	brcs	.+90     	; 0x9a0 <__addsf3x+0x9c>
 946:	1a 16       	cp	r1, r26
 948:	f0 40       	sbci	r31, 0x00	; 0
 94a:	a2 2f       	mov	r26, r18
 94c:	23 2f       	mov	r18, r19
 94e:	34 2f       	mov	r19, r20
 950:	44 27       	eor	r20, r20
 952:	58 5f       	subi	r21, 0xF8	; 248
 954:	f3 cf       	rjmp	.-26     	; 0x93c <__addsf3x+0x38>
 956:	46 95       	lsr	r20
 958:	37 95       	ror	r19
 95a:	27 95       	ror	r18
 95c:	a7 95       	ror	r26
 95e:	f0 40       	sbci	r31, 0x00	; 0
 960:	53 95       	inc	r21
 962:	c9 f7       	brne	.-14     	; 0x956 <__addsf3x+0x52>
 964:	7e f4       	brtc	.+30     	; 0x984 <__addsf3x+0x80>
 966:	1f 16       	cp	r1, r31
 968:	ba 0b       	sbc	r27, r26
 96a:	62 0b       	sbc	r22, r18
 96c:	73 0b       	sbc	r23, r19
 96e:	84 0b       	sbc	r24, r20
 970:	ba f0       	brmi	.+46     	; 0x9a0 <__addsf3x+0x9c>
 972:	91 50       	subi	r25, 0x01	; 1
 974:	a1 f0       	breq	.+40     	; 0x99e <__addsf3x+0x9a>
 976:	ff 0f       	add	r31, r31
 978:	bb 1f       	adc	r27, r27
 97a:	66 1f       	adc	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	c2 f7       	brpl	.-16     	; 0x972 <__addsf3x+0x6e>
 982:	0e c0       	rjmp	.+28     	; 0x9a0 <__addsf3x+0x9c>
 984:	ba 0f       	add	r27, r26
 986:	62 1f       	adc	r22, r18
 988:	73 1f       	adc	r23, r19
 98a:	84 1f       	adc	r24, r20
 98c:	48 f4       	brcc	.+18     	; 0x9a0 <__addsf3x+0x9c>
 98e:	87 95       	ror	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	b7 95       	ror	r27
 996:	f7 95       	ror	r31
 998:	9e 3f       	cpi	r25, 0xFE	; 254
 99a:	08 f0       	brcs	.+2      	; 0x99e <__addsf3x+0x9a>
 99c:	b0 cf       	rjmp	.-160    	; 0x8fe <__addsf3+0x28>
 99e:	93 95       	inc	r25
 9a0:	88 0f       	add	r24, r24
 9a2:	08 f0       	brcs	.+2      	; 0x9a6 <__addsf3x+0xa2>
 9a4:	99 27       	eor	r25, r25
 9a6:	ee 0f       	add	r30, r30
 9a8:	97 95       	ror	r25
 9aa:	87 95       	ror	r24
 9ac:	08 95       	ret

000009ae <__cmpsf2>:
 9ae:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_cmp>
 9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__cmpsf2+0x8>
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	08 95       	ret

000009b8 <__fixsfsi>:
 9b8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixunssfsi>
 9bc:	68 94       	set
 9be:	b1 11       	cpse	r27, r1
 9c0:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
 9c4:	08 95       	ret

000009c6 <__fixunssfsi>:
 9c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_splitA>
 9ca:	88 f0       	brcs	.+34     	; 0x9ee <__fixunssfsi+0x28>
 9cc:	9f 57       	subi	r25, 0x7F	; 127
 9ce:	98 f0       	brcs	.+38     	; 0x9f6 <__fixunssfsi+0x30>
 9d0:	b9 2f       	mov	r27, r25
 9d2:	99 27       	eor	r25, r25
 9d4:	b7 51       	subi	r27, 0x17	; 23
 9d6:	b0 f0       	brcs	.+44     	; 0xa04 <__fixunssfsi+0x3e>
 9d8:	e1 f0       	breq	.+56     	; 0xa12 <__fixunssfsi+0x4c>
 9da:	66 0f       	add	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	1a f0       	brmi	.+6      	; 0x9ea <__fixunssfsi+0x24>
 9e4:	ba 95       	dec	r27
 9e6:	c9 f7       	brne	.-14     	; 0x9da <__fixunssfsi+0x14>
 9e8:	14 c0       	rjmp	.+40     	; 0xa12 <__fixunssfsi+0x4c>
 9ea:	b1 30       	cpi	r27, 0x01	; 1
 9ec:	91 f0       	breq	.+36     	; 0xa12 <__fixunssfsi+0x4c>
 9ee:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_zero>
 9f2:	b1 e0       	ldi	r27, 0x01	; 1
 9f4:	08 95       	ret
 9f6:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
 9fa:	67 2f       	mov	r22, r23
 9fc:	78 2f       	mov	r23, r24
 9fe:	88 27       	eor	r24, r24
 a00:	b8 5f       	subi	r27, 0xF8	; 248
 a02:	39 f0       	breq	.+14     	; 0xa12 <__fixunssfsi+0x4c>
 a04:	b9 3f       	cpi	r27, 0xF9	; 249
 a06:	cc f3       	brlt	.-14     	; 0x9fa <__fixunssfsi+0x34>
 a08:	86 95       	lsr	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b3 95       	inc	r27
 a10:	d9 f7       	brne	.-10     	; 0xa08 <__fixunssfsi+0x42>
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__fixunssfsi+0x5c>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__floatunsisf>:
 a24:	e8 94       	clt
 a26:	09 c0       	rjmp	.+18     	; 0xa3a <__floatsisf+0x12>

00000a28 <__floatsisf>:
 a28:	97 fb       	bst	r25, 7
 a2a:	3e f4       	brtc	.+14     	; 0xa3a <__floatsisf+0x12>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	99 23       	and	r25, r25
 a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x40>
 a3e:	f9 2f       	mov	r31, r25
 a40:	96 e9       	ldi	r25, 0x96	; 150
 a42:	bb 27       	eor	r27, r27
 a44:	93 95       	inc	r25
 a46:	f6 95       	lsr	r31
 a48:	87 95       	ror	r24
 a4a:	77 95       	ror	r23
 a4c:	67 95       	ror	r22
 a4e:	b7 95       	ror	r27
 a50:	f1 11       	cpse	r31, r1
 a52:	f8 cf       	rjmp	.-16     	; 0xa44 <__floatsisf+0x1c>
 a54:	fa f4       	brpl	.+62     	; 0xa94 <__floatsisf+0x6c>
 a56:	bb 0f       	add	r27, r27
 a58:	11 f4       	brne	.+4      	; 0xa5e <__floatsisf+0x36>
 a5a:	60 ff       	sbrs	r22, 0
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__floatsisf+0x6c>
 a5e:	6f 5f       	subi	r22, 0xFF	; 255
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	16 c0       	rjmp	.+44     	; 0xa94 <__floatsisf+0x6c>
 a68:	88 23       	and	r24, r24
 a6a:	11 f0       	breq	.+4      	; 0xa70 <__floatsisf+0x48>
 a6c:	96 e9       	ldi	r25, 0x96	; 150
 a6e:	11 c0       	rjmp	.+34     	; 0xa92 <__floatsisf+0x6a>
 a70:	77 23       	and	r23, r23
 a72:	21 f0       	breq	.+8      	; 0xa7c <__floatsisf+0x54>
 a74:	9e e8       	ldi	r25, 0x8E	; 142
 a76:	87 2f       	mov	r24, r23
 a78:	76 2f       	mov	r23, r22
 a7a:	05 c0       	rjmp	.+10     	; 0xa86 <__floatsisf+0x5e>
 a7c:	66 23       	and	r22, r22
 a7e:	71 f0       	breq	.+28     	; 0xa9c <__floatsisf+0x74>
 a80:	96 e8       	ldi	r25, 0x86	; 134
 a82:	86 2f       	mov	r24, r22
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	2a f0       	brmi	.+10     	; 0xa94 <__floatsisf+0x6c>
 a8a:	9a 95       	dec	r25
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	da f7       	brpl	.-10     	; 0xa8a <__floatsisf+0x62>
 a94:	88 0f       	add	r24, r24
 a96:	96 95       	lsr	r25
 a98:	87 95       	ror	r24
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__fp_cmp>:
 a9e:	99 0f       	add	r25, r25
 aa0:	00 08       	sbc	r0, r0
 aa2:	55 0f       	add	r21, r21
 aa4:	aa 0b       	sbc	r26, r26
 aa6:	e0 e8       	ldi	r30, 0x80	; 128
 aa8:	fe ef       	ldi	r31, 0xFE	; 254
 aaa:	16 16       	cp	r1, r22
 aac:	17 06       	cpc	r1, r23
 aae:	e8 07       	cpc	r30, r24
 ab0:	f9 07       	cpc	r31, r25
 ab2:	c0 f0       	brcs	.+48     	; 0xae4 <__fp_cmp+0x46>
 ab4:	12 16       	cp	r1, r18
 ab6:	13 06       	cpc	r1, r19
 ab8:	e4 07       	cpc	r30, r20
 aba:	f5 07       	cpc	r31, r21
 abc:	98 f0       	brcs	.+38     	; 0xae4 <__fp_cmp+0x46>
 abe:	62 1b       	sub	r22, r18
 ac0:	73 0b       	sbc	r23, r19
 ac2:	84 0b       	sbc	r24, r20
 ac4:	95 0b       	sbc	r25, r21
 ac6:	39 f4       	brne	.+14     	; 0xad6 <__fp_cmp+0x38>
 ac8:	0a 26       	eor	r0, r26
 aca:	61 f0       	breq	.+24     	; 0xae4 <__fp_cmp+0x46>
 acc:	23 2b       	or	r18, r19
 ace:	24 2b       	or	r18, r20
 ad0:	25 2b       	or	r18, r21
 ad2:	21 f4       	brne	.+8      	; 0xadc <__fp_cmp+0x3e>
 ad4:	08 95       	ret
 ad6:	0a 26       	eor	r0, r26
 ad8:	09 f4       	brne	.+2      	; 0xadc <__fp_cmp+0x3e>
 ada:	a1 40       	sbci	r26, 0x01	; 1
 adc:	a6 95       	lsr	r26
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	81 1d       	adc	r24, r1
 ae2:	81 1d       	adc	r24, r1
 ae4:	08 95       	ret

00000ae6 <__fp_inf>:
 ae6:	97 f9       	bld	r25, 7
 ae8:	9f 67       	ori	r25, 0x7F	; 127
 aea:	80 e8       	ldi	r24, 0x80	; 128
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	08 95       	ret

00000af2 <__fp_nan>:
 af2:	9f ef       	ldi	r25, 0xFF	; 255
 af4:	80 ec       	ldi	r24, 0xC0	; 192
 af6:	08 95       	ret

00000af8 <__fp_pscA>:
 af8:	00 24       	eor	r0, r0
 afa:	0a 94       	dec	r0
 afc:	16 16       	cp	r1, r22
 afe:	17 06       	cpc	r1, r23
 b00:	18 06       	cpc	r1, r24
 b02:	09 06       	cpc	r0, r25
 b04:	08 95       	ret

00000b06 <__fp_pscB>:
 b06:	00 24       	eor	r0, r0
 b08:	0a 94       	dec	r0
 b0a:	12 16       	cp	r1, r18
 b0c:	13 06       	cpc	r1, r19
 b0e:	14 06       	cpc	r1, r20
 b10:	05 06       	cpc	r0, r21
 b12:	08 95       	ret

00000b14 <__fp_round>:
 b14:	09 2e       	mov	r0, r25
 b16:	03 94       	inc	r0
 b18:	00 0c       	add	r0, r0
 b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0xc>
 b1c:	88 23       	and	r24, r24
 b1e:	52 f0       	brmi	.+20     	; 0xb34 <__fp_round+0x20>
 b20:	bb 0f       	add	r27, r27
 b22:	40 f4       	brcc	.+16     	; 0xb34 <__fp_round+0x20>
 b24:	bf 2b       	or	r27, r31
 b26:	11 f4       	brne	.+4      	; 0xb2c <__fp_round+0x18>
 b28:	60 ff       	sbrs	r22, 0
 b2a:	04 c0       	rjmp	.+8      	; 0xb34 <__fp_round+0x20>
 b2c:	6f 5f       	subi	r22, 0xFF	; 255
 b2e:	7f 4f       	sbci	r23, 0xFF	; 255
 b30:	8f 4f       	sbci	r24, 0xFF	; 255
 b32:	9f 4f       	sbci	r25, 0xFF	; 255
 b34:	08 95       	ret

00000b36 <__fp_split3>:
 b36:	57 fd       	sbrc	r21, 7
 b38:	90 58       	subi	r25, 0x80	; 128
 b3a:	44 0f       	add	r20, r20
 b3c:	55 1f       	adc	r21, r21
 b3e:	59 f0       	breq	.+22     	; 0xb56 <__fp_splitA+0x10>
 b40:	5f 3f       	cpi	r21, 0xFF	; 255
 b42:	71 f0       	breq	.+28     	; 0xb60 <__fp_splitA+0x1a>
 b44:	47 95       	ror	r20

00000b46 <__fp_splitA>:
 b46:	88 0f       	add	r24, r24
 b48:	97 fb       	bst	r25, 7
 b4a:	99 1f       	adc	r25, r25
 b4c:	61 f0       	breq	.+24     	; 0xb66 <__fp_splitA+0x20>
 b4e:	9f 3f       	cpi	r25, 0xFF	; 255
 b50:	79 f0       	breq	.+30     	; 0xb70 <__fp_splitA+0x2a>
 b52:	87 95       	ror	r24
 b54:	08 95       	ret
 b56:	12 16       	cp	r1, r18
 b58:	13 06       	cpc	r1, r19
 b5a:	14 06       	cpc	r1, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	f2 cf       	rjmp	.-28     	; 0xb44 <__fp_split3+0xe>
 b60:	46 95       	lsr	r20
 b62:	f1 df       	rcall	.-30     	; 0xb46 <__fp_splitA>
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <__fp_splitA+0x30>
 b66:	16 16       	cp	r1, r22
 b68:	17 06       	cpc	r1, r23
 b6a:	18 06       	cpc	r1, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	f1 cf       	rjmp	.-30     	; 0xb52 <__fp_splitA+0xc>
 b70:	86 95       	lsr	r24
 b72:	71 05       	cpc	r23, r1
 b74:	61 05       	cpc	r22, r1
 b76:	08 94       	sec
 b78:	08 95       	ret

00000b7a <__fp_zero>:
 b7a:	e8 94       	clt

00000b7c <__fp_szero>:
 b7c:	bb 27       	eor	r27, r27
 b7e:	66 27       	eor	r22, r22
 b80:	77 27       	eor	r23, r23
 b82:	cb 01       	movw	r24, r22
 b84:	97 f9       	bld	r25, 7
 b86:	08 95       	ret

00000b88 <__gesf2>:
 b88:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_cmp>
 b8c:	08 f4       	brcc	.+2      	; 0xb90 <__gesf2+0x8>
 b8e:	8f ef       	ldi	r24, 0xFF	; 255
 b90:	08 95       	ret
 b92:	16 f0       	brts	.+4      	; 0xb98 <__gesf2+0x10>
 b94:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_mpack>
 b98:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 b9c:	68 94       	set
 b9e:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>

00000ba2 <log>:
 ba2:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_splitA>
 ba6:	a8 f3       	brcs	.-22     	; 0xb92 <__gesf2+0xa>
 ba8:	99 23       	and	r25, r25
 baa:	c1 f3       	breq	.-16     	; 0xb9c <__gesf2+0x14>
 bac:	ae f3       	brts	.-22     	; 0xb98 <__gesf2+0x10>
 bae:	df 93       	push	r29
 bb0:	cf 93       	push	r28
 bb2:	1f 93       	push	r17
 bb4:	0f 93       	push	r16
 bb6:	ff 92       	push	r15
 bb8:	c9 2f       	mov	r28, r25
 bba:	dd 27       	eor	r29, r29
 bbc:	88 23       	and	r24, r24
 bbe:	2a f0       	brmi	.+10     	; 0xbca <log+0x28>
 bc0:	21 97       	sbiw	r28, 0x01	; 1
 bc2:	66 0f       	add	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	da f7       	brpl	.-10     	; 0xbc0 <log+0x1e>
 bca:	20 e0       	ldi	r18, 0x00	; 0
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	40 e8       	ldi	r20, 0x80	; 128
 bd0:	5f eb       	ldi	r21, 0xBF	; 191
 bd2:	9f e3       	ldi	r25, 0x3F	; 63
 bd4:	88 39       	cpi	r24, 0x98	; 152
 bd6:	20 f0       	brcs	.+8      	; 0xbe0 <log+0x3e>
 bd8:	80 3e       	cpi	r24, 0xE0	; 224
 bda:	38 f0       	brcs	.+14     	; 0xbea <log+0x48>
 bdc:	21 96       	adiw	r28, 0x01	; 1
 bde:	8f 77       	andi	r24, 0x7F	; 127
 be0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3>
 be4:	e8 e6       	ldi	r30, 0x68	; 104
 be6:	f0 e0       	ldi	r31, 0x00	; 0
 be8:	04 c0       	rjmp	.+8      	; 0xbf2 <log+0x50>
 bea:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3>
 bee:	e5 e9       	ldi	r30, 0x95	; 149
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fp_powser>
 bf6:	8b 01       	movw	r16, r22
 bf8:	be 01       	movw	r22, r28
 bfa:	ec 01       	movw	r28, r24
 bfc:	fb 2e       	mov	r15, r27
 bfe:	6f 57       	subi	r22, 0x7F	; 127
 c00:	71 09       	sbc	r23, r1
 c02:	75 95       	asr	r23
 c04:	77 1f       	adc	r23, r23
 c06:	88 0b       	sbc	r24, r24
 c08:	99 0b       	sbc	r25, r25
 c0a:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
 c0e:	28 e1       	ldi	r18, 0x18	; 24
 c10:	32 e7       	ldi	r19, 0x72	; 114
 c12:	41 e3       	ldi	r20, 0x31	; 49
 c14:	5f e3       	ldi	r21, 0x3F	; 63
 c16:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3x>
 c1a:	af 2d       	mov	r26, r15
 c1c:	98 01       	movw	r18, r16
 c1e:	ae 01       	movw	r20, r28
 c20:	ff 90       	pop	r15
 c22:	0f 91       	pop	r16
 c24:	1f 91       	pop	r17
 c26:	cf 91       	pop	r28
 c28:	df 91       	pop	r29
 c2a:	0e 94 82 04 	call	0x904	; 0x904 <__addsf3x>
 c2e:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>

00000c32 <__mulsf3>:
 c32:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3x>
 c36:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
 c3a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
 c3e:	38 f0       	brcs	.+14     	; 0xc4e <__mulsf3+0x1c>
 c40:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
 c44:	20 f0       	brcs	.+8      	; 0xc4e <__mulsf3+0x1c>
 c46:	95 23       	and	r25, r21
 c48:	11 f0       	breq	.+4      	; 0xc4e <__mulsf3+0x1c>
 c4a:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
 c4e:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 c52:	11 24       	eor	r1, r1
 c54:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>

00000c58 <__mulsf3x>:
 c58:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
 c5c:	70 f3       	brcs	.-36     	; 0xc3a <__mulsf3+0x8>

00000c5e <__mulsf3_pse>:
 c5e:	95 9f       	mul	r25, r21
 c60:	c1 f3       	breq	.-16     	; 0xc52 <__mulsf3+0x20>
 c62:	95 0f       	add	r25, r21
 c64:	50 e0       	ldi	r21, 0x00	; 0
 c66:	55 1f       	adc	r21, r21
 c68:	62 9f       	mul	r22, r18
 c6a:	f0 01       	movw	r30, r0
 c6c:	72 9f       	mul	r23, r18
 c6e:	bb 27       	eor	r27, r27
 c70:	f0 0d       	add	r31, r0
 c72:	b1 1d       	adc	r27, r1
 c74:	63 9f       	mul	r22, r19
 c76:	aa 27       	eor	r26, r26
 c78:	f0 0d       	add	r31, r0
 c7a:	b1 1d       	adc	r27, r1
 c7c:	aa 1f       	adc	r26, r26
 c7e:	64 9f       	mul	r22, r20
 c80:	66 27       	eor	r22, r22
 c82:	b0 0d       	add	r27, r0
 c84:	a1 1d       	adc	r26, r1
 c86:	66 1f       	adc	r22, r22
 c88:	82 9f       	mul	r24, r18
 c8a:	22 27       	eor	r18, r18
 c8c:	b0 0d       	add	r27, r0
 c8e:	a1 1d       	adc	r26, r1
 c90:	62 1f       	adc	r22, r18
 c92:	73 9f       	mul	r23, r19
 c94:	b0 0d       	add	r27, r0
 c96:	a1 1d       	adc	r26, r1
 c98:	62 1f       	adc	r22, r18
 c9a:	83 9f       	mul	r24, r19
 c9c:	a0 0d       	add	r26, r0
 c9e:	61 1d       	adc	r22, r1
 ca0:	22 1f       	adc	r18, r18
 ca2:	74 9f       	mul	r23, r20
 ca4:	33 27       	eor	r19, r19
 ca6:	a0 0d       	add	r26, r0
 ca8:	61 1d       	adc	r22, r1
 caa:	23 1f       	adc	r18, r19
 cac:	84 9f       	mul	r24, r20
 cae:	60 0d       	add	r22, r0
 cb0:	21 1d       	adc	r18, r1
 cb2:	82 2f       	mov	r24, r18
 cb4:	76 2f       	mov	r23, r22
 cb6:	6a 2f       	mov	r22, r26
 cb8:	11 24       	eor	r1, r1
 cba:	9f 57       	subi	r25, 0x7F	; 127
 cbc:	50 40       	sbci	r21, 0x00	; 0
 cbe:	9a f0       	brmi	.+38     	; 0xce6 <__mulsf3_pse+0x88>
 cc0:	f1 f0       	breq	.+60     	; 0xcfe <__mulsf3_pse+0xa0>
 cc2:	88 23       	and	r24, r24
 cc4:	4a f0       	brmi	.+18     	; 0xcd8 <__mulsf3_pse+0x7a>
 cc6:	ee 0f       	add	r30, r30
 cc8:	ff 1f       	adc	r31, r31
 cca:	bb 1f       	adc	r27, r27
 ccc:	66 1f       	adc	r22, r22
 cce:	77 1f       	adc	r23, r23
 cd0:	88 1f       	adc	r24, r24
 cd2:	91 50       	subi	r25, 0x01	; 1
 cd4:	50 40       	sbci	r21, 0x00	; 0
 cd6:	a9 f7       	brne	.-22     	; 0xcc2 <__mulsf3_pse+0x64>
 cd8:	9e 3f       	cpi	r25, 0xFE	; 254
 cda:	51 05       	cpc	r21, r1
 cdc:	80 f0       	brcs	.+32     	; 0xcfe <__mulsf3_pse+0xa0>
 cde:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
 ce2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
 ce6:	5f 3f       	cpi	r21, 0xFF	; 255
 ce8:	e4 f3       	brlt	.-8      	; 0xce2 <__mulsf3_pse+0x84>
 cea:	98 3e       	cpi	r25, 0xE8	; 232
 cec:	d4 f3       	brlt	.-12     	; 0xce2 <__mulsf3_pse+0x84>
 cee:	86 95       	lsr	r24
 cf0:	77 95       	ror	r23
 cf2:	67 95       	ror	r22
 cf4:	b7 95       	ror	r27
 cf6:	f7 95       	ror	r31
 cf8:	e7 95       	ror	r30
 cfa:	9f 5f       	subi	r25, 0xFF	; 255
 cfc:	c1 f7       	brne	.-16     	; 0xcee <__mulsf3_pse+0x90>
 cfe:	fe 2b       	or	r31, r30
 d00:	88 0f       	add	r24, r24
 d02:	91 1d       	adc	r25, r1
 d04:	96 95       	lsr	r25
 d06:	87 95       	ror	r24
 d08:	97 f9       	bld	r25, 7
 d0a:	08 95       	ret
 d0c:	19 f4       	brne	.+6      	; 0xd14 <__mulsf3_pse+0xb6>
 d0e:	16 f4       	brtc	.+4      	; 0xd14 <__mulsf3_pse+0xb6>
 d10:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 d14:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_mpack>

00000d18 <sqrt>:
 d18:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_splitA>
 d1c:	b8 f3       	brcs	.-18     	; 0xd0c <__mulsf3_pse+0xae>
 d1e:	99 23       	and	r25, r25
 d20:	c9 f3       	breq	.-14     	; 0xd14 <__mulsf3_pse+0xb6>
 d22:	b6 f3       	brts	.-20     	; 0xd10 <__mulsf3_pse+0xb2>
 d24:	9f 57       	subi	r25, 0x7F	; 127
 d26:	55 0b       	sbc	r21, r21
 d28:	87 ff       	sbrs	r24, 7
 d2a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_norm2>
 d2e:	00 24       	eor	r0, r0
 d30:	a0 e6       	ldi	r26, 0x60	; 96
 d32:	40 ea       	ldi	r20, 0xA0	; 160
 d34:	90 01       	movw	r18, r0
 d36:	80 58       	subi	r24, 0x80	; 128
 d38:	56 95       	lsr	r21
 d3a:	97 95       	ror	r25
 d3c:	28 f4       	brcc	.+10     	; 0xd48 <sqrt+0x30>
 d3e:	80 5c       	subi	r24, 0xC0	; 192
 d40:	66 0f       	add	r22, r22
 d42:	77 1f       	adc	r23, r23
 d44:	88 1f       	adc	r24, r24
 d46:	20 f0       	brcs	.+8      	; 0xd50 <sqrt+0x38>
 d48:	26 17       	cp	r18, r22
 d4a:	37 07       	cpc	r19, r23
 d4c:	48 07       	cpc	r20, r24
 d4e:	30 f4       	brcc	.+12     	; 0xd5c <sqrt+0x44>
 d50:	62 1b       	sub	r22, r18
 d52:	73 0b       	sbc	r23, r19
 d54:	84 0b       	sbc	r24, r20
 d56:	20 29       	or	r18, r0
 d58:	31 29       	or	r19, r1
 d5a:	4a 2b       	or	r20, r26
 d5c:	a6 95       	lsr	r26
 d5e:	17 94       	ror	r1
 d60:	07 94       	ror	r0
 d62:	20 25       	eor	r18, r0
 d64:	31 25       	eor	r19, r1
 d66:	4a 27       	eor	r20, r26
 d68:	58 f7       	brcc	.-42     	; 0xd40 <sqrt+0x28>
 d6a:	66 0f       	add	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	20 f0       	brcs	.+8      	; 0xd7a <sqrt+0x62>
 d72:	26 17       	cp	r18, r22
 d74:	37 07       	cpc	r19, r23
 d76:	48 07       	cpc	r20, r24
 d78:	30 f4       	brcc	.+12     	; 0xd86 <sqrt+0x6e>
 d7a:	62 0b       	sbc	r22, r18
 d7c:	73 0b       	sbc	r23, r19
 d7e:	84 0b       	sbc	r24, r20
 d80:	20 0d       	add	r18, r0
 d82:	31 1d       	adc	r19, r1
 d84:	41 1d       	adc	r20, r1
 d86:	a0 95       	com	r26
 d88:	81 f7       	brne	.-32     	; 0xd6a <sqrt+0x52>
 d8a:	b9 01       	movw	r22, r18
 d8c:	84 2f       	mov	r24, r20
 d8e:	91 58       	subi	r25, 0x81	; 129
 d90:	88 0f       	add	r24, r24
 d92:	96 95       	lsr	r25
 d94:	87 95       	ror	r24
 d96:	08 95       	ret

00000d98 <__fp_mpack>:
 d98:	9f 3f       	cpi	r25, 0xFF	; 255
 d9a:	31 f0       	breq	.+12     	; 0xda8 <__fp_mpack_finite+0xc>

00000d9c <__fp_mpack_finite>:
 d9c:	91 50       	subi	r25, 0x01	; 1
 d9e:	20 f4       	brcc	.+8      	; 0xda8 <__fp_mpack_finite+0xc>
 da0:	87 95       	ror	r24
 da2:	77 95       	ror	r23
 da4:	67 95       	ror	r22
 da6:	b7 95       	ror	r27
 da8:	88 0f       	add	r24, r24
 daa:	91 1d       	adc	r25, r1
 dac:	96 95       	lsr	r25
 dae:	87 95       	ror	r24
 db0:	97 f9       	bld	r25, 7
 db2:	08 95       	ret

00000db4 <__fp_norm2>:
 db4:	91 50       	subi	r25, 0x01	; 1
 db6:	50 40       	sbci	r21, 0x00	; 0
 db8:	66 0f       	add	r22, r22
 dba:	77 1f       	adc	r23, r23
 dbc:	88 1f       	adc	r24, r24
 dbe:	d2 f7       	brpl	.-12     	; 0xdb4 <__fp_norm2>
 dc0:	08 95       	ret

00000dc2 <__fp_powser>:
 dc2:	df 93       	push	r29
 dc4:	cf 93       	push	r28
 dc6:	1f 93       	push	r17
 dc8:	0f 93       	push	r16
 dca:	ff 92       	push	r15
 dcc:	ef 92       	push	r14
 dce:	df 92       	push	r13
 dd0:	7b 01       	movw	r14, r22
 dd2:	8c 01       	movw	r16, r24
 dd4:	68 94       	set
 dd6:	06 c0       	rjmp	.+12     	; 0xde4 <__fp_powser+0x22>
 dd8:	da 2e       	mov	r13, r26
 dda:	ef 01       	movw	r28, r30
 ddc:	0e 94 2c 06 	call	0xc58	; 0xc58 <__mulsf3x>
 de0:	fe 01       	movw	r30, r28
 de2:	e8 94       	clt
 de4:	a5 91       	lpm	r26, Z+
 de6:	25 91       	lpm	r18, Z+
 de8:	35 91       	lpm	r19, Z+
 dea:	45 91       	lpm	r20, Z+
 dec:	55 91       	lpm	r21, Z+
 dee:	a6 f3       	brts	.-24     	; 0xdd8 <__fp_powser+0x16>
 df0:	ef 01       	movw	r28, r30
 df2:	0e 94 82 04 	call	0x904	; 0x904 <__addsf3x>
 df6:	fe 01       	movw	r30, r28
 df8:	97 01       	movw	r18, r14
 dfa:	a8 01       	movw	r20, r16
 dfc:	da 94       	dec	r13
 dfe:	69 f7       	brne	.-38     	; 0xdda <__fp_powser+0x18>
 e00:	df 90       	pop	r13
 e02:	ef 90       	pop	r14
 e04:	ff 90       	pop	r15
 e06:	0f 91       	pop	r16
 e08:	1f 91       	pop	r17
 e0a:	cf 91       	pop	r28
 e0c:	df 91       	pop	r29
 e0e:	08 95       	ret

00000e10 <_exit>:
 e10:	f8 94       	cli

00000e12 <__stop_program>:
 e12:	ff cf       	rjmp	.-2      	; 0xe12 <__stop_program>
